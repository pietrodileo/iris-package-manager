<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for UNIX (Ubuntu Server LTS for x86-64 Containers) 2025.2 (Build 227U)" ts="2025-09-03 10:19:19">
<Class name="PackageManager.API.Classes.Interface">
<Final>1</Final>
<Super>PackageManager.API.REST</Super>
<TimeChanged>67443,59562.16203579</TimeChanged>
<TimeCreated>67443,59562.16203579</TimeCreated>

<Method name="ExportClasses">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    ; Ignora l'output REST per evitare di restituire all'IO di default (risposta REST) il contenuto di eventuali write inseriti nei metodi invocati
    Set %response.IgnoreRESTOutput=1
    Try {
        Set out = {}

        Set body = %request.Content.Read()
        Set json = {}.%FromJSON(body)
        Set elements = json."elements"

        // Check if the TEMPFILEPATH directory exists, create it if not
        Set path = ##class(PackageManager.Utility.Utils).AdaptPathToOS(##class(PackageManager.Config).#TMPPATH)
        Set sc = ##class(PackageManager.Utility.Utils).DirExists(path,1,.exists)
        If $$$ISERR(sc) { Throw ##class(%Exception.StatusException).CreateFromStatus(sc) }
        If 'exists { 
            Set sc = $$$ERROR($$$GeneralError,"The directory "_path_" does not exist.")
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        }

        // Generate a temporary file name
        Set now = $NOW()
        Set format = ".xml"
        Set datetime = $TRANSLATE($ZDATE(now,3),"-","")_"_"_$TRANSLATE($ZTIME(now,1),":","")
        Set fileName = "classes_"_datetime_format
        Set filePath = path_fileName

        Set iter = elements.%GetIterator()
        While iter.%GetNext(.key, .value) { 
            If '$DATA(items(value."name")) {
                Set items(value."name") = ""
            }
        }

        ; You could define the items argument as a multidimensional array as follows:
		;   set items("PackageOne.ClassA.cls")=""
        ;   set items("PackageTwo.ClassB.cls")=""
        ;   set items("PackageThree.ClassC.cls")=""               
        ; In this case, you must pass the items argument by reference as follows:
        ;   do $system.OBJ.Export(.items,myfilename)
        Set sc = $SYSTEM.OBJ.Export(.items,filePath,"/generated=0")
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)

        // Open the xml file as a stream and return it within the JSON response
        Set xmlFile = ##class(%Stream.FileCharacter).%New()
        Set outputStream = ##class(%Stream.GlobalCharacter).%New()
        Set sc=xmlFile.LinkToFile(filePath)
        While 'xmlFile.AtEnd {
            Set line=xmlFile.Read()
            Do outputStream.Write(line)
        }

        // Delete the log file and the temporary csv file to save space
        Do ##class(%File).Delete(filePath)

        Set %response.ContentType = ..#CONTENTTYPETEXT
        ; Ripristina l'output REST per restituire all'IO di default (risposta REST) il contenuto dell'oggetto response
        Set %response.IgnoreRESTOutput=0
        Do outputStream.Rewind()
        Do outputStream.OutputToDevice()
        #; Set out.stream = outputStream.Read()
        #; Set out.fileName = fileName
        #; Set out.createdTime = $ZDATETIME($HOROLOG,3,5)
        #; Set out.filePath = filePath
        #; Do ..WriteResponse(out, sc)
        
    } Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.out, sc)
    }
    Return sc
]]></Implementation>
</Method>
</Class>




<Class name="PackageManager.API.Namespace.Interface">
<Final>1</Final>
<Super>PackageManager.API.REST</Super>
<TimeChanged>67449,34251.478278122</TimeChanged>
<TimeCreated>67443,59562.143397317</TimeCreated>

<Method name="GetAllNamespaceFiles">
<Description>
This method retrieves all files in the current namespace, including classes, routines, and CSP files.
It returns a list of JSON objects, each representing a file or directory.
It uses the %Library.RoutineMgr_StudioOpenDialog function to query the files.
It can filter by type if specified.
If no type is specified, it retrieves all files.
The result is a JSON object with nested objects for each file type.
It supports any kind of ObjectScript file, including classes, routines, and CSP files, and JavaScript, HTML, CSS, and all other file types usable in csp pages as well.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>type:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {        
        Set packageName = $GET(%request.Data("PackageName",1))
        Set ExcludeSystemClasses = $SELECT($GET(%request.Data("ExcludeSystemClasses",1))="true":1,1:0)
        Set result = {}
        Set sql = "SELECT Name, Type FROM %Library.RoutineMgr_StudioOpenDialog(?,?,?,?,?,?,?)"
        ; If ExludeSystemClasses is true, filter out system classes / default IRIS classes
        Set systemPrefixes = $LISTFROMSTRING($$$systemClassesToExclude,",")
        If ExcludeSystemClasses {
            Set whereConditions = ""    
            Set ptr = 0
            While $LISTNEXT(systemPrefixes, ptr, prefix) {
                If whereConditions '= "" {
                    Set whereConditions = whereConditions _ " AND "
                }
                if prefix = "%" {
                    Set whereConditions = whereConditions _ "Name NOT LIKE '\%%' ESCAPE '\'"
                } Else {
                    Set whereConditions = whereConditions _ "Name NOT LIKE '" _ prefix _ "%'"
                }
            }
            Set sql = sql _ " WHERE " _ whereConditions
        }

        // Define arguments
        Set spec = ""
        If packageName'="" {
            Set spec = packageName
        }
        If type="" {
            Set spec = spec_"*"
        } Else {
            Set spec = spec_"*."_type
        }
        Set dir = 1
        Set orderBy = 1 // 1 for name, 2 for date, 3 for size, 4 for type, 5 for name of the file sorted case sensitively
        Set systemFiles = 0 // 1 to include system files, 0 to exclude them
        Set flat = 1 // If Flat is true then it does not display directories but displays everything at the root level.
        Set notstudio = 0 // If NotStudio is true then it will display globals and OBJ routines as well, for Studio we exclude these types.
        Set showGenerated = 0 // The ShowGenerated argument controls if this query includes items that are generated from another item, such as INT code that is generated from a class compilation.        
        Set tStatement = ##class(%SQL.Statement).%New()
        Set sc = tStatement.%Prepare(sql)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
        Set tResult = tStatement.%Execute(spec,dir,orderBy,systemFiles,flat,notstudio,showGenerated)
        Set filesFormats = $LISTBUILD("CSP","MAC","INC","INT","CLS")
        While tResult.%Next() {
            Set Name = tResult.%Get("Name")
            Set Type = ##class(PackageManager.Utility.Utils).TranscodeType(tResult.%Get("Type"))
            // Create a JSON object containing nested objects for the packages and csp files
            #; w Name," - ",Type,!
            If $LISTFIND(filesFormats, Type)'=0 {
                Set rootType = Type
            } Else {
                Set rootType = "Other"
            }
            // Ensure project root exists in result
            If '$ISOBJECT(result.%Get(rootType)) {
                Do result.%Set(rootType, ##class(%DynamicObject).%New())
            }
            Set rootElement = result.%Get(rootType)
            If rootType = "CSP" {
                Set sc = ##class(PackageManager.Utility.Utils).DefineObjFromCSP(.rootElement, Name, "/")  
            } ElseIf $LISTFIND(filesFormats, Type)'=0 {
                Set sc = ##class(PackageManager.Utility.Utils).DefineObjFromCLSOrRoutine(.rootElement, Name, ".")  
            } ElseIf rootType = "Other" {
                // For other types, we can just add them directly
                If '$ISOBJECT(rootElement.%Get(Name)) {
                    Do rootElement.%Set(Name, {
                        "name": (Name),
                        "type": (Type)
                    })
                }
            }
        }
        // Write the result as JSON
        #; Set %response.ContentType = "application/json"
        #; Write result.%ToJSON()
        Do ..WriteResponse(.result, sc) 
    } Catch ex {
        Set sc = ex.AsStatus()   
        Do ..WriteResponse(.out, sc) 
    }
    Return sc
]]></Implementation>
</Method>
</Class>




<Class name="PackageManager.API.Projects.Interface">
<Final>1</Final>
<Super>PackageManager.API.REST</Super>
<TimeChanged>67451,30210.992347478</TimeChanged>
<TimeCreated>67443,59562.14980484</TimeCreated>

<Method name="CreateProject">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        Set body = %request.Content.Read()
        Set json = {}.%FromJSON(body)
        Set name = json."name"
        Set desc = json."desc"
        If name'="" {
            If ##class(%Studio.Project).NameIdxExists(name) {
                Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Un progetto con lo stesso nome ÃÂ¨ giÃÂ  presente. Non ÃÂ¨ possibile creare progetti con lo stesso nome!")) 
            } 
            Set proj = ##class(%Studio.Project).%New()
            Set proj.Name = name
            Set proj.Description = desc
            Set sc = proj.%Save()
            If $$$ISERR(sc) {
                Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
            }
        } Else {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Name ÃÂ¨ un campo obbligatorio")) 
        }
    } Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.res,sc)
    }
    Return sc
]]></Implementation>
</Method>

<Method name="GetProjects">
<Description><![CDATA[
Get all projects.
The description of this API entry should be in this section.
<RESTResponse>
<Status>200</Status>
<Description>Returns an array of project objects.</Description>
</RESTResponse>
<RESTResponse>
<Status>404</Status>
<Description>No projects found.</Description>
</RESTResponse>]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {        
        Set %response.ContentType = "application/json"
        Set result = []
        Set sql = "SELECT Name, Description, LastModified FROM %Studio.Project ORDER BY Name"
        Set tStatement = ##class(%SQL.Statement).%New()
        Set sc = tStatement.%Prepare(sql)
        If $$$ISERR(sc) {
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        }
        Set tResult = tStatement.%Execute()
        While tResult.%Next() {
            Do result.%Push(
                {
                    "name": (tResult.%Get("Name")),
                    "description": (tResult.%Get("Description")),
                    "last_modified": (tResult.%Get("LastModified"))
                }
            )
        }
        Write result.%ToJSON()
    } Catch ex {
        Set sc=ex.AsStatus()
    }
    Return sc
]]></Implementation>
</Method>

<Method name="ExportProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    ; Ignora l'output REST per evitare di restituire all'IO di default (risposta REST) il contenuto di eventuali write inseriti nei metodi invocati
    Set %response.IgnoreRESTOutput=1
    Try {
        If ProjectId = "" { 
            Set sc = $$$ERROR($$$GeneralError,"ProjectId is required.")
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        }

        #; Set out = {}

        // Check if the TEMPFILEPATH directory exists, create it if not
        Set path = ##class(PackageManager.Utility.Utils).AdaptPathToOS(##class(PackageManager.Config).#TMPPATH)
        Set sc = ##class(PackageManager.Utility.Utils).DirExists(path,1,.exists)
        If $$$ISERR(sc) { Throw ##class(%Exception.StatusException).CreateFromStatus(sc) }
        If 'exists { 
            Set sc = $$$ERROR($$$GeneralError,"The directory "_path_" does not exist.")
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        }

        // Generate a temporary file name
        Set now = $NOW()
        Set release = "release"
        Set format = ".xml"
        Set datetime = $TRANSLATE($ZDATE(now,3),"-","")_"_"_$TRANSLATE($ZTIME(now,1),":","")
        Set fileName = ProjectId_"_"_release_"_"_datetime_format
        Set filePath = path_fileName

        Set project = ##class(%Studio.Project).%OpenId(ProjectId)
        If '$ISOBJECT(project) {
            Set sc = $$$ERROR($$$GeneralError, "Project with ID "_ProjectId_" does not exist.")
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
        }
        // Export project, compile, keep source, and include dependencies
        Set sc = project.Export(.filePath, "cuk", 0, .err)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)

        // Open the f xml file as a stream and return it within the JSON response
        Set xmlFile = ##class(%Stream.FileCharacter).%New()
        Set outputStream = ##class(%Stream.GlobalCharacter).%New()
        Set sc=xmlFile.LinkToFile(filePath)
        While 'xmlFile.AtEnd {
            Set line=xmlFile.Read()
            Do outputStream.Write(line)
        }

        // Delete the log file and the temporary csv file to save space
        Do ##class(%File).Delete(filePath)

        Set %response.ContentType = ..#CONTENTTYPETEXT
        ; Ripristina l'output REST per restituire all'IO di default (risposta REST) il contenuto dell'oggetto response
        Set %response.IgnoreRESTOutput=0
        Do outputStream.Rewind()
        Do outputStream.OutputToDevice()
        #; Set out.stream = outputStream.Read()
        #; Set out.fileName = fileName
        #; Set out.createdTime = $ZDATETIME($HOROLOG,3,5)
        #; Set out.filePath = filePath
        #; Do ..WriteResponse(.out, sc)
        
    } Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.out, sc)
    }
    Return sc
]]></Implementation>
</Method>

<Method name="GetProjectContent">
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectId:%String=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {    
        Set %response.IgnoreRESTOutput=1
        Set result = {}  // This will be a JSON object
        Set Args = 0
        Set sql = "SELECT Project, Name, Type FROM %Studio.ProjectItem "
        If ProjectId'="" {
            Set sql = sql_" WHERE Project = ?"
            Set Args($INCREMENT(Args)) = ProjectId
        }
        Set sql = sql_" ORDER BY Project, Name"
        Set tStatement = ##class(%SQL.Statement).%New()
        Set sc = tStatement.%Prepare(sql)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)

        Set pkgsListStr = ""
        // Improved separators
        Set pkgListStrSeparator = "|,|"
        Set pkgListStrPrjSeparator = "|^|"

        Set tResult = tStatement.%Execute(Args...)
        While tResult.%Next() {
            Set currProject = tResult.%Get("Project")
            Set item = tResult.%Get("Name")
            Set type = tResult.%Get("Type")

            // Make sure project array exists
            If '$ISOBJECT(result.%Get(currProject)) {
                Do result.%Set(currProject, {})
            }

            If type = "PKG" {
                Set pkgsListStr = $SELECT(pkgsListStr="":item_pkgListStrPrjSeparator_currProject, 1:pkgsListStr_pkgListStrSeparator_item_pkgListStrPrjSeparator_currProject)
                // Expand package to classes
                Set sc = $SYSTEM.OBJ.GetPackageList(.pkgItems, item, "/mapped/includesubpackages")
                Set childName = ""
                For {
                    Set childName = $ORDER(pkgItems(childName))
                    Quit:childName=""
                    // Determine type (CLS or MAC/INC)
                    If ##class(%Dictionary.CompiledClass).%ExistsId(childName) {
                        Set childType = "CLS"
                    } Else {
                        Set childType = "MAC"
                        Set extension = $EXTRACT(childName, *-3, *)
                        If extension = ".MAC" {
                            Set childType = "MAC"
                        } ElseIf extension = ".INC" {
                            Set childType = "INC"
                        } Else {
                            // For uncompiled classes 
                            Set childType = "CLS"
                        }
                    }
                    Set sc = ##class(PackageManager.Utility.Utils).CreateNestedObject(childName, childType, currProject, .result)
                }
            } ElseIf type = "MAC" {
                Set extension = $EXTRACT(item, *-3, *)
                If extension = ".MAC" {
                    Set childType = "MAC"
                } ElseIf extension = ".INC" {
                    Set childType = "INC"
                }
                Set childName = $PIECE(item, "."_childType, 1)
                Set sc = ##class(PackageManager.Utility.Utils).CreateNestedObject(childName, childType, currProject, .result)
            } ElseIf type = "DIR" {
                Set childName = item, childType = type
                Set sc = ##class(PackageManager.Utility.Utils).JSONFolderTree(item,currProject,.result)
            } ElseIf type = "CLS" {
                Set extension = $EXTRACT(item, *-3, *)
                Set childType = type
                Set childName = $PIECE(item, "."_childType, 1)
                Set sc = ##class(PackageManager.Utility.Utils).CreateNestedObject(childName, childType, currProject, .result)
            } ElseIf type = "CSP" {
                Set extension = $PIECE(item, ".", 2)
                Set childType = type
                Set childName = $PIECE(item, "."_childType, 1)
                If $ZCONVERT(extension,"L") '= "csp" {
                    Set childName = $PIECE(item, "."_extension, 1)
                }
                Set sc = ##class(PackageManager.Utility.Utils).CreateNestedObject(childName, childType, currProject, .result, "/", extension)
            } Else {
                Set extension = $EXTRACT(item, *-3, *)
                Set childType = type
                Set childName = $PIECE(item, "."_childType, 1)
                Set sc = ##class(PackageManager.Utility.Utils).CreateNestedObject(childName, childType, currProject, .result)
            }
        }

        // Insert a flag to identify whole packages that are project items
        If pkgsListStr '= "" {
            Set ptr = ""
            ;W pkgsListStr,! 
            For i = 1:1:$length(pkgsListStr, pkgListStrSeparator) {
                Set pkg = $piece(pkgsListStr, pkgListStrSeparator, i)
                Set pkgName = $piece(pkg, pkgListStrPrjSeparator, 1)
                Set currProjectName = $piece(pkg, pkgListStrPrjSeparator, 2)
                // reset the resultNode to parse the current package
                Set resultNode = result.%Get(currProjectName)."PKG"
                For j = 1:1:$length(pkgName, ".") {
                    Set value = $piece(pkgName, ".", j)
                    Set resultNode = resultNode.%Get(value)
                    ;Write resultNode.%ToJSON(),!,!
                }
                // If the desired node of the object has been found, otherwise don't set any flag (troubleshooting)
                If $ISOBJECT(resultNode) {
                    Set resultNode."*project-item"="true"
                }
            }
        }

        ;Write result.%ToJSON()
        Do ..WriteResponse(.result,sc)
    } Catch ex {
        Set sc = ex.AsStatus()
        Do ..WriteResponse(.result,sc,500)
        ;Write "Error: "_$SYSTEM.Status.GetErrorText(sc)
    }
    Return sc
]]></Implementation>
</Method>

<Method name="UpdateProjectDesc">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        If projectId = "" {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"ProjectId ÃÂ¨ un campo obbligatorio")) 
        }
        Set body = %request.Content.Read()
        Set json = {}.%FromJSON(body)
        Set name = json."originalName"
        Set desc = json."desc"
        If name'="" {
            Set proj = ##class(%Studio.Project).NameIdxOpen(name)
            Set proj.Description = desc
            Set sc = proj.%Save()
            If $$$ISERR(sc) {
                Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
            }
        } Else {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Name ÃÂ¨ un campo obbligatorio")) 
        }
    } Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.res,sc,500)
    }
    Return sc
]]></Implementation>
</Method>

<Method name="DeleteProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        If projectId = "" {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"ProjectId ÃÂ¨ un campo obbligatorio")) 
        }
        Set sc = ##class(%Studio.Project).NameIdxDelete(projectId)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 

        // Update the export task table to deactivate the deleted project
        &SQL( UPDATE PackageManager_Task.ProjectToExport SET Active = 0 WHERE ProjectId = :projectId )
        If SQLCODE < 0 {
            Set sc = $$$ERROR($$$GeneralError, "It was impossible to disable the project export for "_projectId_".")
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        }
    } Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.res,sc,500)
    }
    Return sc
]]></Implementation>
</Method>

<Method name="AddClassesToProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    ; Ignora l'output REST per evitare di restituire all'IO di default (risposta REST) il contenuto di eventuali write inseriti nei metodi invocati
    Set %response.IgnoreRESTOutput=1
    Try {
        Set body = %request.Content.Read()
        Set json = {}.%FromJSON(body)
        Set elements = json."elements"

        If '##class(%Studio.Project).NameIdxExists(projectId) {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Project with ID "_projectId_" does not exist!")) 
        } 
        Set proj = ##class(%Studio.Project).NameIdxOpen(projectId)

        Set iter = elements.%GetIterator()
        While iter.%GetNext(.key, .value) { 
            Set element = value."name"
            Set type = $ZCONVERT(value."type","U")
            If (type = "OTHER") {
                Set type = ""
            }
            Set sc = proj.AddItem(element,type)
            If $$$ISERR(sc) {
                Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
            }
        }
        Set sc = proj.%Save()        
    } Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.out, sc,500)
    }
    Return sc
]]></Implementation>
</Method>

<Method name="RemoveClassesToProject">
<ClassMethod>1</ClassMethod>
<FormalSpec>projectId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    ; Ignora l'output REST per evitare di restituire all'IO di default (risposta REST) il contenuto di eventuali write inseriti nei metodi invocati
    Set %response.IgnoreRESTOutput=1
    Try {
        Set body = %request.Content.Read()
        Set json = {}.%FromJSON(body)
        Set elements = json."elements"

        If '##class(%Studio.Project).NameIdxExists(projectId) {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Project with ID "_projectId_" does not exist!")) 
        } 
        Set proj = ##class(%Studio.Project).NameIdxOpen(projectId)

        Set iter = elements.%GetIterator()
        While iter.%GetNext(.key, .value) { 
            Set element = value."name"
            Set type = value.%Get("type")
            Set sc = proj.RemoveItem(element,type)
            If $$$ISERR(sc) {
                Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
            }
        }
        Set sc = proj.%Save()        
    } Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.out, sc, 500)
        Set sc = $$$OK // Return a successful status to avoid returning the default error response by IRIS
    }
    Return sc
]]></Implementation>
</Method>
</Class>




<Class name="PackageManager.API.REST">
<Abstract>1</Abstract>
<IncludeCode>PackageManager.PackageManager</IncludeCode>
<Super>%CSP.REST</Super>
<TimeChanged>67450,56049.462026587</TimeChanged>
<TimeCreated>67443,59562.155147615</TimeCreated>

<XData name="UrlMap">
<Data><![CDATA[
<Routes>
    <!-- Project related calls -->
    <Route Url="/project/create" Method="POST" Call="PackageManager.API.Projects.Interface:CreateProject"/>
    <Route Url="/projects" Method="GET" Call="PackageManager.API.Projects.Interface:GetProjects"/>
    <Route Url="/project/export/:projectId" Method="GET" Call="PackageManager.API.Projects.Interface:ExportProject"/>
    <Route Url="/project/content/:projectId" Method="GET" Call="PackageManager.API.Projects.Interface:GetProjectContent"/>
    <Route Url="/project/content" Method="GET" Call="PackageManager.API.Projects.Interface:GetProjectContent"/>
    <Route Url="/project/update/:projectId" Method="POST" Call="PackageManager.API.Projects.Interface:UpdateProjectDesc"/>
    <Route Url="/project/delete/:projectId" Method="DELETE" Call="PackageManager.API.Projects.Interface:DeleteProject"/>
    <Route Url="/project/add/:projectId" Method="POST" Call="PackageManager.API.Projects.Interface:AddClassesToProject"/>
    <Route Url="/project/remove/:projectId" Method="PUT" Call="PackageManager.API.Projects.Interface:RemoveClassesToProject"/>
    <!-- Export classes calls -->
    <Route Url="/classes/export" Method="POST" Call="PackageManager.API.Classes.Interface:ExportClasses"/>
    <!-- Namespace content calls -->
    <Route Url="/namespace/content/:type" Method="GET" Call="PackageManager.API.Namespace.Interface:GetAllNamespaceFiles"/>
    <Route Url="/namespace/content" Method="GET" Call="PackageManager.API.Namespace.Interface:GetAllNamespaceFiles"/>
    <!-- Tasks related calls -->
    <Route Url="/task/create" Method="POST" Call="PackageManager.API.Task.Interface:CreateTask"/>
    <Route Url="/task/existing" Method="GET" Call="PackageManager.API.Task.Interface:CheckExistingTasks"/>
    <Route Url="/task/delete/:taskId" Method="DELETE" Call="PackageManager.API.Task.Interface:DeleteTask"/>
    <Route Url="/task/run/:taskId" Method="GET" Call="PackageManager.API.Task.Interface:RunTask"/>
    <Route Url="/task/:taskId" Method="GET" Call="PackageManager.API.Task.Interface:GetTaskInfo"/>
    <Route Url="/task/update/:taskId" Method="POST" Call="PackageManager.API.Task.Interface:UpdateTask"/>
    <Route Url="/task/updateclasses/:taskId" Method="POST" Call="PackageManager.API.Task.Interface:UpdateAssociatedClasses"/>
    <Route Url="/task/releases/" Method="GET" Call="PackageManager.API.Task.Interface:GetReleases"/>
    <Route Url="/task/release/download" Method="POST" Call="PackageManager.API.Task.Interface:DownloadRelease"/>
    <!-- Ping to test API reachability -->
    <Route Url="/api/ping" Method="GET" Call="Ping"/>
    <!-- Swagger specs -->
    <Route Url="/_spec" Method="GET" Call="SwaggerSpec" />
    <!-- Server Info -->
    <Route Url="/" Method="GET" Call="GetInfo" Cors="true"/>
</Routes>
]]></Data>
</XData>

<Parameter name="HandleCorsRequest">
<Default>1</Default>
</Parameter>

<Parameter name="CHARSET">
<Default>utf-8</Default>
</Parameter>

<Method name="GetInfo">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set info = {
    "version": ($$$PackageManagerVersion)
    }
    Return ..WriteResponse(.info,$$$OK)
]]></Implementation>
</Method>

<Method name="Ping">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Set %response.IgnoreRESTOutput=1
    Set res = {
        "timestamp":($ZDATETIME($HOROLOG,3)),
        "message":"Package Manager API is correctly installed and working properly"
    }
    Set %response.ContentType = "application/json" 
    Do ..WriteResponse(.res,sc)
    Return sc
]]></Implementation>
</Method>

<Method name="GetAPIEndpoint">
<Description>
This method returns the url to be called to access this page</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set namespace = $NAMESPACE
    Set className = $THIS
    // Build URL dynamically
    Set sc=##class(%RoutineMgr).GetWebServerPort(.Port,.Server,.URLPrefix,.URL)
    Set URL = URL_$$$PackageManagerAPI
    If URL [ "//" {
        Set URL = $REPLACE(URL,"//","/")
    }
    //Write URL,!
    Return URL
]]></Implementation>
</Method>

<Method name="AddNewProjectToExportTask">
<Description>
This method is used to add a new project to the export task.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        Set %response.ContentType = "application/json"
        Set projectName = $GET(%request.Data("project_name",1))
        Set dateFrom = $GET(%request.Data("date_from",1))
        Set dateTo = $GET(%request.Data("date_to",1))

        If dateFrom = "" {
            Set dateFrom = $ZDATE($HOROLOG, 3)  // Default to current date
        }

        If projectName'="" {
            &SQL( SELECT ID INTO :projectId FROM %Studio.Project WHERE Name = :projectName)
            If SQLCODE '= 0 {
                Set sc = $$$ERROR($$$GeneralError, "Project "_projectName_" does not exist.")
                Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
            }
            Set proj = ##class(PackageManager.Task.ProjectToExport).%New()
            Set proj.ProjectId = projectId
            Set proj.DateFrom = dateFrom
            Set proj.DateTo = dateTo
            Set sc = proj.%Save()
            If $$$ISERR(sc) { Throw ##class(%Exception.StatusException).CreateFromStatus(sc) }
        } Else {
            Set sc = $$$ERROR($$$GeneralError, "Project name is required.")
        }
    }
    Catch ex {
        Set sc=ex.AsStatus()
    }
    Return sc
]]></Implementation>
</Method>

<Method name="WriteResponse">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&response:%DynamicObject="",sc:%Status,responseStatusCode:%Integer=200]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    If '$ISOBJECT(response) {
        Set response = {}
    }
    Set %response.ContentType = ..#CONTENTTYPEJSON
    ; Ripristina l'output REST per restituire all'IO di default (risposta REST) il contenuto dell'oggetto response
    Set %response.IgnoreRESTOutput=0
    If $$$ISERR(sc) {
        Set response = {"error": ("Error: "_$SYSTEM.Status.GetErrorText(sc))}
        Set %response.Status = responseStatusCode
    }
    // Return the response as a JSON
    If $ISOBJECT(response) {
        If response.%IsA("%DynamicAbstractObject") {
            Do response.%ToJSON()
        } Else {
            Do response.OutputToDevice()
        }
    } Else {
        Write response 
    }
	Set %response.IgnoreRESTOutput=1
    Return sc
]]></Implementation>
</Method>

<Method name="SwaggerSpec">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc = $$$OK
	Try {
		// Declare a variable to hold the generated Swagger specification
		Set swagger = ""
		
		// Use %REST.API to get the OpenAPI spec for the current application.
		// The first parameter is the namespace, the second is the application path.
		Do ##class(%REST.API).GetWebRESTApplication($NAMESPACE, %request.Application, .swagger)
		
		// Customize the generated specification. These steps are optional but highly recommended.
		// Set the host and base path
		Set swagger.host = %request.GetCgiEnv("SERVER_NAME")_":"_%request.GetCgiEnv("SERVER_PORT")
		Set swagger.basePath = %request.Application
				
		// Remove an Intersystems-specific extension if not needed
		Do swagger.info.%Remove("x-ISC_Namespace")
		#; Set swagger.basePath = $$$PackageManagerAPI
		Set swagger.info.title = $$$ProjectName
		Set swagger.info.version = $$$PackageManagerVersion
		#; Set swagger.host = "localhost:52773"

		// Return the generated specification as the response.
		Do ..WriteResponse(.swagger,sc)
	} Catch ex {
		Set sc=ex.AsStatus()
	}
	Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.API.Task.Interface">
<Final>1</Final>
<Super>PackageManager.API.REST</Super>
<TimeChanged>67443,59562.14922835</TimeChanged>
<TimeCreated>67443,59562.14922835</TimeCreated>

<Method name="CreateTask">
<Description>
This method creates a new record for the export task within the task manager</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    ; Ignora l'output REST per evitare di restituire all'IO di default (risposta REST) il contenuto di eventuali write inseriti nei metodi invocati
    Set %response.IgnoreRESTOutput=1
    Try {
        Set out = {}

        Set body = %request.Content.Read()
        Set json = {}.%FromJSON(body)
        Set TaskDesc = json."task_desc"
        Set TaskName = json."task_name"
        Set endDate = $SELECT(json."schedule"."endDate"="":"", 1:$ZDATEH(json."schedule"."endDate",3))
        Set runTime = $ZTIMEH(json."schedule"."runTime", 1)
        Set startDate = $ZDATEH(json."schedule"."startDate",3)
        Set type = json."schedule"."type"
        Set priority = json."schedule"."priority"
        Set username = json."username"
        Set enablePurge = json."purge_config"."enabled"
        Set retentionDays = ""
        Set minFilesKeep = ""
        If enablePurge = 1 {
            Set retentionDays = json."purge_config"."retentionDays"
            Set minFilesKeep = json."purge_config"."minFilesKeep"
        }
        If TaskName="" Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"TaskName is required."))

        /// 0 - DAILY<br>
        /// 		TimePeriodEvery - Run every x Days, where Days are 1-7<br>
        /// 		TimePeriodDay - Set to "", ignored<br><br>
        /// 1 - WEEKLY<br>
        /// 		TimePeriodEvery - Run every x Weeks, where weeks are 1-5<br>
        /// 		TimePeriodDay - Run on days xxxx, where Sunday=Day 1,Saturday=Day 7<br>
        /// 						(where 23456 would be Monday thru Friday)<br><br>
        /// 2 - MONTHLY<br>
        /// 		TimePeriodEvery - Run every x Months, where months are 1-12<br>
        /// 		TimePeriodDay - Run on day x, where day=1-31, where 31=last day of month<br><br>
        /// 5 - ONCE <br>
        ///         Task is not scheduled to run. Task is scheduled to run by calling the RunOnce method        
        Set TimePeriod = $SELECT(type="daily":0, type="weekly":1, type="monthly":2,type="once":5,1:"")

        Set TimePeriodDay ="", TimePeriodEvery = ""
        If TimePeriod="" Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Invalid schedule type"))
        If TimePeriod = 0 {
            Set TimePeriodEvery = json."schedule"."everyNDays"
            If TimePeriodEvery > 7 Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Invalid daily schedule"))
        } ElseIf TimePeriod = 1 {
            Set TimePeriodEvery = json."schedule"."everyNWeeks"
            If TimePeriodEvery > 5 Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Invalid weekly schedule"))
            Set TimePeriodDay = $REPLACE(json."schedule"."daysOfWeek",",","")
        } ElseIf TimePeriod = 2 {
            Set TimePeriodEvery = json."schedule"."everyNMonths"
            If TimePeriodEvery > 12 Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Invalid monthly schedule"))
            Set TimePeriodDay = json."schedule"."dayOfMonth"
        }

        Set task=##class(%SYS.Task).%New()
        /// Name of the task must be 50 characters or less, first character must be a letter.
        /// Note that Names longer than 50 characters will be truncated.
        Set task.Name=TaskName
        Set task.Description=$SELECT(TaskDesc="":$$$defaultTaskDescription, 1:TaskDesc)
        Set task.NameSpace=$NAMESPACE
        Set task.TimePeriod=TimePeriod // If 0, runs daily, 1 runs weekly, 2 runs monthly
        Set task.TimePeriodEvery=TimePeriodEvery // Runs every n days, weeks or months
        Set task.StartDate=startDate
        Set task.Priority=priority
        If endDate'="" { Set task.EndDate=endDate } // If blank, task never expires
        If TimePeriodDay'="" { Set task.TimePeriodDay=TimePeriodDay } // If blank, task never expires

        /// Run every day<br>
        /// TimePeriod=0,TimePeriodEvery=1,TimePeriodDay=""<br><br>
        /// Run every other day<br>
        /// TimePeriod=0,TimePeriodEvery=2,TimePeriodDay=""<br><br>
        /// Run every Sunday<br>
        /// TimePeriod=1,TimePeriodEvery=1,TimePeriodDay=1<br><br>
        /// Run every Monday through Friday<br>
        /// TimePeriod=1,TimePeriodEvery=1,TimePeriodDay=23456<br><br>
        /// Run every other Saturday<br>
        /// TimePeriod=1,TimePeriodEvery=2,TimePeriodDay=7<br><br>
        /// Run the first day of every month<br>
        /// TimePeriod=2,TimePeriodEvery=1,TimePeriodDay=1<br><br>
        /// Run the last day of every month<br>
        /// TimePeriod=2,TimePeriodEvery=1,TimePeriodDay=31<br><br>
        /// Run the last day of every other month<br>
        /// TimePeriod=2,TimePeriodEvery=2,TimePeriodDay=31<br><br>
        /// Run the second Saturday of every month<br>
        /// TimePeriod=3,TimePeriodEvery=1,TimePeriodDay=2^7<br><br>
        /// Run the first Sunday of every month<br>
        /// TimePeriod=3,TimePeriodEvery=1,TimePeriodDay=1^1<br><br>


        /// 0 - ONCE - Run once on the day scheduled<br>
        /// 		DailyFrequencyTime - "", ignored<br>
        /// 		DailyIncrement - "", ignored<br>
        /// 		DailyStartTime - Time for task to run in $H format($p($h,",",2))<br>
        /// 		DailyEndTime - "",ignored<br><br>
        /// 1 - SEVERAL - Run Several times in a day<br>
        /// 		DailyFrequencyTime - 0 - Run every x minutes<br>
        /// 		DailyFrequencyTime - 1 - Run every x hours<br>
        /// 		DailyIncrement - # of minutes between runs or # of hours between runs<br>
        /// 		DailyStartTime - Time for tasks to start running in $H format($p($h,",",2))<br>
        /// 		DailyEndTime - Time for task to stop running in $H format($p($h,",",2))<br><br>
        Set task.DailyFrequency=0 // How many times a day it runs
        Set task.DailyFrequencyTime=""
        Set task.DailyIncrement=""
        Set task.DailyStartTime=runTime
        Set task.DailyEndTime=""
        Set TaskToRun = ##class(PackageManager.Task.ExportProjects).%New()
        Do task.AssignSettings(TaskToRun)
        Set task.TaskClass=$CLASSNAME(TaskToRun)

        /// A comma separated list of email addresses to send a completion notification to.
        // EmailOnCompletion
        /// A comma separated list of email addresses to send an error notification to.
        // EmailOnError
        /// A comma separated list of email addresses to send notification if the task expires.
        // EmailOnExpiration
        /// If an output directory and output file are chosen, and EmailOutput is
        /// set to 1 the output from the entry will be emailed to the email 
        /// addresses in the EmailOnCompletion property
        // EmailOutput
        /// If an output directory and output file are chosen, the output from
        /// the entry will be directed there.
        // Property OutputDirectory As %String(MAXLEN = 1024);

        Set task.RunAsUser=username

        Set sc = task.%Save()
        If $$$ISERR(sc) {
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        }

        Set taskId = task.%Id()
        // This string contains the settings for the new task. 
        // It is a string of the form:
        //    <propertyname>,<value>,<propertyname>,<value>,...
        Set SettingsString = "" 
        Set SettingsString = ..InsertTaskSetting("TaskID",taskId,.SettingsString)
        Set SettingsString = ..InsertTaskSetting("EnablePurge",enablePurge,.SettingsString)
        If retentionDays '= "" Set SettingsString = ..InsertTaskSetting("PurgeAfterNDays",retentionDays,.SettingsString)
        If minFilesKeep '= "" Set SettingsString = ..InsertTaskSetting("MinimumNumberOfFilesToKeep",minFilesKeep,.SettingsString)
        set task.Settings=$LISTFROMSTRING(SettingsString,",") 

        Set sc = task.%Save()
        If $$$ISERR(sc) {
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        }


        If TimePeriod = 5 {
            // If task should run once, schedule it now
            Set sc = task.ScheduleAt(startDate_","_runTime)
            If $$$ISERR(sc) {
                Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
            }
        }
    }
    Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.res, sc)
    }
    Return sc
]]></Implementation>
</Method>

<Method name="CheckExistingTasks">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        Set %response.IgnoreRESTOutput=1
        Set res = {}
        Set sql = "SELECT ID,Name,Description,NameSpace,Priority,Suspended,"
	            _" DisplayRun,DisplayInterval,DisplayDayNextScheduled,TimeNextScheduled,"
                _" DisplayStartDate,DisplayEndDate,DisplayStarted,DisplayFinished,"
                _" DisplayStatus,Error,DisplayErrorDate,DisplayErrorNumber,Error,RunAsUser" 
	            _" FROM %SYS.Task "
	            _" WHERE TaskClass=? "
        //w sql,!
        Set tStatement = ##class(%SQL.Statement).%New()
        Set sc = tStatement.%Prepare(sql)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
        // Define the query to get the projects associated with a task
        Set getPrjSQL = "SELECT ProjectId " 
            _" FROM PackageManager_Task.ProjectToExport"
            _" WHERE TaskID = ? "
            _" AND Active = 1 "
        Set prjTStatement = ##class(%SQL.Statement).%New()
        Set sc = prjTStatement.%Prepare(getPrjSQL)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
        // Execute the first query to get the task data
        Set tResult = tStatement.%Execute(##class(PackageManager.Task.ExportProjects).GetClassName())
        Set elements = []
        While tResult.%Next() {
            If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
            Set prjTResult = prjTStatement.%Execute(tResult.%Get("ID"))
            Set projects = []
            While prjTResult.%Next() {
                // Get the projects associated with the task
                Do projects.%Push({
                    "ProjectId":(prjTResult.%Get("ProjectId"))
                })
            }
            Set Error = (tResult.%Get("Error"))
            Set TaskStatus = (tResult.%Get("DisplayStatus"))
            If Error '= "" {
                Set TaskStatus = Error
            }
            Do elements.%Push({
                "ID":(tResult.%Get("ID")),
                "Name":(tResult.%Get("Name")),
                "Description":(tResult.%Get("Description")),
                "NameSpace":(tResult.%Get("NameSpace")),
                "Priority":(tResult.%Get("Priority")),
                "Suspended":(tResult.%Get("Suspended")), // Suspended: 1 or 0
                "DisplayStarted":(tResult.%Get("DisplayStarted")), // Last time started
                "DisplayFinished":(tResult.%Get("DisplayFinished")), // Last time finished
                "DisplayStatus": (TaskStatus), // Task status (1 or Error)
                "DisplayRun":(tResult.%Get("DisplayRun")), // How many times it runs
                "DisplayInterval":(tResult.%Get("DisplayInterval")), // How many minutes between runs
                "DisplayDayNextScheduled":(tResult.%Get("DisplayDayNextScheduled")), // Next day the task runs
                "TimeNextScheduled": ($ZTIME((tResult.%Get("TimeNextScheduled")))), // Next time the task runs
                "DisplayStartDate":(tResult.%Get("DisplayStartDate")), // Overall start date of the task (before it task won't run)
                "DisplayEndDate":(tResult.%Get("DisplayEndDate")), // Overall end date of the task (after it task won't run anymore)
                "RunAsUser":(tResult.%Get("RunAsUser")), // User running the task (it should have the privileges to run the task and access the database)
                "Projects": (projects) // List of projects associated with the current task
            })            
        }
        Do res.%Set("tasks", elements)
        //w res.%ToJSON(),!
    }
    Catch ex {
        Set sc=ex.AsStatus()
    }
    Do ..WriteResponse(.res, sc)
    Return sc
]]></Implementation>
</Method>

<Method name="DeleteTask">
<ClassMethod>1</ClassMethod>
<FormalSpec>taskId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        If taskId = "" {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"TaskId Ã¨ un campo obbligatorio")) 
        }
        Set sc = ##class(%SYS.Task).%DeleteId(taskId)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
    } Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.res,sc)
    }
    Return sc
]]></Implementation>
</Method>

<Method name="RunTask">
<ClassMethod>1</ClassMethod>
<FormalSpec>taskId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        If taskId = "" {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"TaskId Ã¨ un campo obbligatorio")) 
        }
        Set Task = ##class(%SYS.Task).%OpenId(taskId)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        Set sc = Task.RunTask()
        If $$$ISERR(sc) { 
            // Try by creating a task schedule for now. This could be a delay of 60 seconds
            Set tSc = Task.ScheduleAt($H)
            If $$$ISERR(tSc) { 
                // Throw both errors
                Throw ##class(%Exception.StatusException).CreateFromStatus($$$ADDSC(sc,tSc)) 
            } Else {
                // If the task has been scheduled correctly, return the status
                Set sc = tSc
            }
        }
    } Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.res,sc)
    }
    Return sc
]]></Implementation>
</Method>

<Method name="GetTaskInfo">
<ClassMethod>1</ClassMethod>
<FormalSpec>taskId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    ; Ignora l'output REST per evitare di restituire all'IO di default (risposta REST) il contenuto di eventuali write inseriti nei metodi invocati
    Set %response.IgnoreRESTOutput=1
    Try {
        If taskId=""{
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Task Id is required."))
        }  
        If '##class(%SYS.Task).%ExistsId(taskId) { 
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Task not found.")) 
        }
        // Get task info
        Set out = {}
        Set Task = ##class(%SYS.Task).%OpenId(taskId)
        Set out.Name = Task.Name
        Set out.Description = Task.Description
        Set out.NameSpace = Task.NameSpace
        Set out.TimePeriod = Task.TimePeriod
        Set out.TimePeriodEvery = Task.TimePeriodEvery
        Set out.StartDate = $ZDATE(Task.StartDate,3)
        Set out.Priority = Task.Priority
        Set out.EndDate = $SELECT(Task.EndDate="":"", 1:$ZDATE(Task.EndDate,3))
        Set out.TimePeriodDay = Task.TimePeriodDay
        Set out.Suspended = Task.Suspended
        Set out.DisplayRun = Task.DisplayRun
        Set out.DisplayInterval = Task.DisplayInterval
        Set out.DisplayDayNextScheduled = Task.DisplayDayNextScheduled
        Set out.TimeNextScheduled = $SELECT(Task.TimeNextScheduled="":"", 1:$ZTIME(Task.TimeNextScheduled))
        Set out.DisplayStartDate = Task.DisplayStartDate
        Set out.DisplayEndDate = Task.DisplayEndDate
        Set out.DisplayStarted = Task.DisplayStarted
        Set out.DisplayFinished = Task.DisplayFinished
        Set out.DisplayStatus = Task.DisplayStatus
        Set out.Error = Task.Error
        Set out.DisplayErrorDate = $SELECT(Task.DisplayErrorDate="":"", 1:$ZDATE(Task.DisplayErrorDate,3))
        Set out.DisplayErrorNumber = Task.DisplayErrorNumber
        Set out.DailyFrequency = Task.DailyFrequency
        Set out.DailyFrequencyTime = Task.DailyFrequencyTime
        Set out.DailyIncrement = Task.DailyIncrement
        Set out.DailyStartTime = $SELECT(Task.DailyStartTime="":"", 1:$ZTIME(Task.DailyStartTime))
        Set out.DailyEndTime = Task.DailyEndTime
        Set out.TaskClass = Task.TaskClass
        Set out.Settings = Task.Settings
        Set out.RunAsUser = Task.RunAsUser
        // Get task settings
        Set out.Settings = { 
            "TaskID": (..GetTaskSetting("TaskID",Task.Settings)),
            "EnablePurge": (..GetTaskSetting("EnablePurge",Task.Settings)),
            "PurgeAfterNDays": (..GetTaskSetting("PurgeAfterNDays",Task.Settings)),
            "MinimumNumberOfFilesToKeep": (..GetTaskSetting("MinimumNumberOfFilesToKeep",Task.Settings))
        }
        #; Set out.EmailOnCompletion = $LISTTOSTRING(Task.EmailOnCompletion,",") 
        #; Set out.EmailOnError = Task.EmailOnError
        #; Set out.EmailOnExpiration = Task.EmailOnExpiration
        #; Set out.EmailOutput = Task.EmailOutput
        Set out.OutputDirectory = Task.OutputDirectory
        Do ..WriteResponse(.out, sc)}
    Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.res, sc)
    }
    Return sc
]]></Implementation>
</Method>

<Method name="UpdateTask">
<Description>
This method updates an existing record</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>taskId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    ; Ignora l'output REST per evitare di restituire all'IO di default (risposta REST) il contenuto di eventuali write inseriti nei metodi invocati
    Set %response.IgnoreRESTOutput=1
    Try {
        Set out = {}

        If '##class(%SYS.Task).%ExistsId(taskId) {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"No task found for the given ID: "_taskId))
        }

        Set body = %request.Content.Read()
        Set json = {}.%FromJSON(body)
        Set TaskDesc = json."task_desc"
        Set TaskName = json."task_name"
        Set TaskSuspended = json."task_suspended"
        Set endDate = $SELECT(json."schedule"."endDate"="":"", 1:$ZDATEH(json."schedule"."endDate",3))
        Set runTime = $ZTIMEH(json."schedule"."runTime", 1)
        Set startDate = $SELECT(json."schedule"."startDate"="":"", 1:$ZDATEH(json."schedule"."startDate",3))
        Set type = json."schedule"."type"
        Set priority = json."schedule"."priority"
        If TaskName="" { 
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"TaskName is required."))
        }
        Set enablePurge = json."purge_config"."enabled"
        Set retentionDays = ""
        Set minFilesKeep = ""
        If enablePurge = 1 {
            Set retentionDays = json."purge_config"."retentionDays"
            Set minFilesKeep = json."purge_config"."minFilesKeep"
        }

        /// 0 - DAILY<br>
        /// 		TimePeriodEvery - Run every x Days, where Days are 1-7<br>
        /// 		TimePeriodDay - Set to "", ignored<br><br>
        /// 1 - WEEKLY<br>
        /// 		TimePeriodEvery - Run every x Weeks, where weeks are 1-5<br>
        /// 		TimePeriodDay - Run on days xxxx, where Sunday=Day 1,Saturday=Day 7<br>
        /// 						(where 23456 would be Monday thru Friday)<br><br>
        /// 2 - MONTHLY<br>
        /// 		TimePeriodEvery - Run every x Months, where months are 1-12<br>
        /// 		TimePeriodDay - Run on day x, where day=1-31, where 31=last day of month<br><br>
        /// 5 - ONCE <br>
        ///         Task is not scheduled to run. Task is scheduled to run by calling the RunOnce method        
        Set TimePeriod = $SELECT(type="daily":0, type="weekly":1, type="monthly":2,type="once":5,1:"")
        Set TimePeriodDay ="", TimePeriodEvery = ""
        If TimePeriod="" {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Invalid schedule type"))
        }
        If TimePeriod = 0 {
            Set TimePeriodEvery = json."schedule"."everyNDays"
            If TimePeriodEvery > 7 Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Invalid daily schedule"))
        } ElseIf TimePeriod = 1 {
            Set TimePeriodEvery = json."schedule"."everyNWeeks"
            If TimePeriodEvery > 5 Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Invalid weekly schedule"))
            Set TimePeriodDay = $REPLACE(json."schedule"."daysOfWeek",",","")
        } ElseIf TimePeriod = 2 {
            Set TimePeriodEvery = json."schedule"."everyNMonths"
            If TimePeriodEvery > 12 Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Invalid monthly schedule"))
            Set TimePeriodDay = json."schedule"."dayOfMonth"
        }

        /// Name of the task must be 50 characters or less, first character must be a letter.
        /// Note that Names longer than 50 characters will be truncated.
        Set task=##class(%SYS.Task).%OpenId(taskId)
        Set task.Name=TaskName
        Set task.Suspended=TaskSuspended
        Set task.Description=$SELECT(TaskDesc="":"", 1:TaskDesc)
        Set task.NameSpace=$NAMESPACE
        Set task.TimePeriod=TimePeriod // If 0, runs daily, 1 runs weekly, 2 runs monthly
        Set task.TimePeriodEvery=TimePeriodEvery // Runs every n days, weeks or months
        If startDate '= "" {
            Set task.StartDate=startDate 
        } else {
            Set startDate = task.StartDate
        }
        Set task.Priority=priority
        If endDate'="" { 
            Set task.EndDate=endDate // If blank, task never expires
        } 
        If TimePeriodDay'="" { 
            Set task.TimePeriodDay=TimePeriodDay // If blank, task never expires
        }

        /// Run every day<br>
        /// TimePeriod=0,TimePeriodEvery=1,TimePeriodDay=""<br><br>
        /// Run every other day<br>
        /// TimePeriod=0,TimePeriodEvery=2,TimePeriodDay=""<br><br>
        /// Run every Sunday<br>
        /// TimePeriod=1,TimePeriodEvery=1,TimePeriodDay=1<br><br>
        /// Run every Monday through Friday<br>
        /// TimePeriod=1,TimePeriodEvery=1,TimePeriodDay=23456<br><br>
        /// Run every other Saturday<br>
        /// TimePeriod=1,TimePeriodEvery=2,TimePeriodDay=7<br><br>
        /// Run the first day of every month<br>
        /// TimePeriod=2,TimePeriodEvery=1,TimePeriodDay=1<br><br>
        /// Run the last day of every month<br>
        /// TimePeriod=2,TimePeriodEvery=1,TimePeriodDay=31<br><br>
        /// Run the last day of every other month<br>
        /// TimePeriod=2,TimePeriodEvery=2,TimePeriodDay=31<br><br>
        /// Run the second Saturday of every month<br>
        /// TimePeriod=3,TimePeriodEvery=1,TimePeriodDay=2^7<br><br>
        /// Run the first Sunday of every month<br>
        /// TimePeriod=3,TimePeriodEvery=1,TimePeriodDay=1^1<br><br>


        /// 0 - ONCE - Run once on the day scheduled<br>
        /// 		DailyFrequencyTime - "", ignored<br>
        /// 		DailyIncrement - "", ignored<br>
        /// 		DailyStartTime - Time for task to run in $H format($p($h,",",2))<br>
        /// 		DailyEndTime - "",ignored<br><br>
        /// 1 - SEVERAL - Run Several times in a day<br>
        /// 		DailyFrequencyTime - 0 - Run every x minutes<br>
        /// 		DailyFrequencyTime - 1 - Run every x hours<br>
        /// 		DailyIncrement - # of minutes between runs or # of hours between runs<br>
        /// 		DailyStartTime - Time for tasks to start running in $H format($p($h,",",2))<br>
        /// 		DailyEndTime - Time for task to stop running in $H format($p($h,",",2))<br><br>
        
        #; Set task.DailyFrequency=0 // How many times a day it runs
        #; Set task.DailyFrequencyTime=""
        #; Set task.DailyIncrement=""
        Set task.DailyStartTime=runTime
        #; Set task.DailyEndTime=""
        #; Set TaskToRun = ##class(PackageManager.Task.ExportProjects).%New()
        #; Do task.AssignSettings(TaskToRun)
        #; Set task.TaskClass=$CLASSNAME(TaskToRun)
        //set task.Settings=$LB("","") // Settings for the task properties 

        /// A comma separated list of email addresses to send a completion notification to.
        // EmailOnCompletion
        /// A comma separated list of email addresses to send an error notification to.
        // EmailOnError
        /// A comma separated list of email addresses to send notification if the task expires.
        // EmailOnExpiration
        /// If an output directory and output file are chosen, and EmailOutput is
        /// set to 1 the output from the entry will be emailed to the email 
        /// addresses in the EmailOnCompletion property
        // EmailOutput
        /// If an output directory and output file are chosen, the output from
        /// the entry will be directed there.
        // Property OutputDirectory As %String(MAXLEN = 1024);

        // This string contains the settings for the new task. 
        // It is a string of the form:
        //    <propertyname>,<value>,<propertyname>,<value>,...
        Set SettingsString = task.Settings 
        Set sc = ..ModifyTaskSetting("EnablePurge",enablePurge,.SettingsString)
        If $$$ISERR(sc) { Throw ##class(%Exception.StatusException).CreateFromStatus(sc) }
        If retentionDays '= "" Set sc = ..ModifyTaskSetting("PurgeAfterNDays",retentionDays,.SettingsString)
        If $$$ISERR(sc) { Throw ##class(%Exception.StatusException).CreateFromStatus(sc) }
        If minFilesKeep '= "" Set sc = ..ModifyTaskSetting("MinimumNumberOfFilesToKeep",minFilesKeep,.SettingsString)
        If $$$ISERR(sc) { Throw ##class(%Exception.StatusException).CreateFromStatus(sc) }
        set task.Settings=SettingsString

        Set sc = task.%Save()
        If $$$ISERR(sc) {
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        }

        If TimePeriod = 5 {
            // If task should run once, schedule it now
            Set sc = task.ScheduleAt(startDate_","_runTime)
            If $$$ISERR(sc) {
                Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
            }
        }
    }
    Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.res, sc)
    }
    Return sc
]]></Implementation>
</Method>

<Method name="UpdateAssociatedClasses">
<Description>
This method updates the classes associated to the task</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>taskId:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    ; Ignora l'output REST per evitare di restituire all'IO di default (risposta REST) il contenuto di eventuali write inseriti nei metodi invocati
    Set %response.IgnoreRESTOutput=1
    Try {
        Set out = {}

        If '##class(%SYS.Task).%ExistsId(taskId) {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"No task found for the given ID: "_taskId))
        }

        Set body = %request.Content.Read()
        Set json = {}.%FromJSON(body)
        Set removed = json."removed"
        Set added = json."added"

        Set iterRemoved = removed.%GetIterator()
        While iterRemoved.%GetNext(.key, .removedProjectId) { 
            If '##class(PackageManager.Task.ProjectToExport).ProjectIdIndexExists(removedProjectId,taskId) {
                Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"No project associated to the task "_taskId_" found for the given project ID: "_removedProjectId))
            }
            Set prjRecord = ##class(PackageManager.Task.ProjectToExport).ProjectIdIndexOpen(removedProjectId,taskId)
            // Removed projects are not deleted by default but just disabled
            Set sc = prjRecord.Disable()
            If $$$ISERR(sc) {
                Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
            }
        }

        Set iterAdded = added.%GetIterator()
        While iterAdded.%GetNext(.key, .addedProjectId) { 
            If '##class(%Studio.Project).NameIdxExists(addedProjectId) {
                Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Project with ID "_addedProjectId_" does not exist!")) 
            } 
            If ##class(PackageManager.Task.ProjectToExport).ProjectIdIndexExists(addedProjectId,taskId) {
                Set prjRecord = ##class(PackageManager.Task.ProjectToExport).ProjectIdIndexOpen(addedProjectId,taskId)
                Set sc = prjRecord.Enable()
                If $$$ISERR(sc) {
                    Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
                }
            } Else {
                Set prjRecord = ##class(PackageManager.Task.ProjectToExport).%New()
                Set prjRecord.ProjectId = addedProjectId
                Set prjRecord.TaskID = taskId
            }
            Set sc = prjRecord.%Save()
            If $$$ISERR(sc) {
                Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
            }
        }
    }
    Catch ex {
        Set sc=ex.AsStatus()
        Do ..WriteResponse(.res, sc)
    }
    Return sc
]]></Implementation>
</Method>

<Method name="GetReleases">
<Description>
This method gets all the exported files for a given task</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        Set ^CacheTemp("zpdl") = "qui alle "_$ZDT($H,3)
        Set sc = ##class(PackageManager.API.Task.Interface).GetExportedReleases(.result)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
        Do ..WriteResponse(.result, sc) 
    }
    Catch ex {
        Set sc=ex.AsStatus()
    }
    Return sc
]]></Implementation>
</Method>

<Method name="GetExportedReleases">
<Description>
This method gets all the exported files for a given task</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&result:%DynamicObject="",verbose:%Boolean=0,separator:%String="\"]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        // Initialize result object if not already provided
        If '$ISOBJECT(result) Set result = {}

        // Define base path and initialize stack for directories
        Kill FILES
        Set basePath = ##class(PackageManager.Utility.Utils).AdaptPathToOS(##class(PackageManager.Config).#EXPPATH, .separator)
        // if the directory contains both slashes and backslashes, replace them with the separator
        If basePath [ "/" {
            Set directory = $REPLACE(basePath, "/", separator) 
        }
        Set FILES($INCREMENT(FILES)) = basePath

        // Set the directory root as a specific node of the stack
        Set rootElement = result

        // Main loop to scan each directory in stack
        Set key = ""
        For {
            Set key = $ORDER(FILES(key), 1, searchdir)
            Quit:key=""

            Set filepath = $ZSEARCH(searchdir_"*")
            While filepath'="" {
                Set filename = ##class(%File).GetFilename(filepath)

                // Skip special entries
                If (filename'=".") && (filename'="..") {
                    If verbose { Write "file: "_filepath_" " }
                    // If it is a directory, add it to the stack for further inspection
                    If ##class(%File).DirectoryExists(filepath) {
                        If verbose { Write "is a directory",! }
                        Set FILES($INCREMENT(FILES)) = filepath_separator  // Add subdir to stack

                        // If it's a subdirectory, create corresponding node in the object tree
                        If $ZCONVERT(filepath, "U")'=$ZCONVERT(basePath, "U") {
                            Set relativePath = $PIECE($ZCONVERT(filepath, "U"), $ZCONVERT(basePath, "U"), 2)
                            Set ptr = 0
                            Set element = rootElement
                            While $LISTNEXT($LISTFROMSTRING(relativePath, separator), ptr, elementName) {
                                Continue:elementName=""
                                If '$ISOBJECT(element.%Get(elementName)) {
                                    Do element.%Set(elementName, ##class(%DynamicObject).%New())
                                }
                                Set element = element.%Get(elementName)
                            }
                        }
                    // If it is a file, insert it into the directory node
                    } Else {
                        If verbose { Write "is a file",! }
                        // Check if we're under a subdirectory and move pointer to the correct nested node
                        Set isSubDir = ($ZCONVERT(searchdir, "U")'=$ZCONVERT(basePath, "U"))
                        If isSubDir {
                            Set relativeDirPath = $PIECE($ZCONVERT(searchdir, "U"), $ZCONVERT(basePath, "U"), 2)
                            Set ptr = 0
                            Set element = rootElement
                            While $LISTNEXT($LISTFROMSTRING(relativeDirPath, separator), ptr, dirPath) {
                                Continue:dirPath=""
                                Set element = element.%Get(dirPath)
                            }
                        } Else {
                            Set element = rootElement
                        }

                        // Get file information
                        Set dataCreated = ##class(%File).GetFileDateCreated(filepath)
                        Set fileSize = ##class(%File).GetFileSize(filepath)
                        
                        // Insert file node
                        Set name = $PIECE(filename, ".", 1)
                        Set fileformat = $PIECE(filename, ".", 2)
                        Do element.%Set(name, {
                            "name": (name),
                            "type": (fileformat),
                            "data_created": ($ZDATETIME(dataCreated,3)),
                            "file_size": (fileSize),
                            "file_size_unit": "bytes",
                            "full_file_path": (filepath)
                        })
                    }
                }

                Set filepath = $ZSEARCH("")  // Next entry
            }
        }
        If verbose { Write result.%ToJSON() }
    }
    Catch ex {
        Set sc=ex.AsStatus()
    }
    Return sc
]]></Implementation>
</Method>

<Method name="DownloadRelease">
<Description>
This method is used to ask the server a specific exported file</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {        
        Set body = %request.Content.Read()
        Set json = {}.%FromJSON(body)
        Set filePath = json."filepath"
        If filePath="" { 
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"filepath is required."))
        }

        // Remove double slashes or backslashes
        Set filePath = $REPLACE(filePath, "//", "/")
        Set filePath = $REPLACE(filePath, "\\", "\")

        // Verify if the file exists
        If '##class(%File).Exists(filePath) { 
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"File not found."))
        }

        // Open the xml file as a stream and return it within the JSON response
        Set xmlFile = ##class(%Stream.FileCharacter).%New()
        Set outputStream = ##class(%Stream.GlobalCharacter).%New()
        Set sc=xmlFile.LinkToFile(filePath)
        While 'xmlFile.AtEnd {
            Set line=xmlFile.Read()
            Do outputStream.Write(line)
        }
        Do outputStream.Rewind()
        Do outputStream.OutputToDevice()
        #; Set out = {}
        #; Set out.stream = outputStream.Read()
        #; Do ..WriteResponse(out, sc)
    }
    Catch ex {
        Set sc=ex.AsStatus()
    }
    Return sc
]]></Implementation>
</Method>

<Method name="InsertTaskSetting">
<Description>
This method allow to insert a new setting into the task settings string</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Key:%String,Value:%String,&SettingsString:%String]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    Return $SELECT(SettingsString = "":Key_","_Value, 1:SettingsString_","_Key_","_Value)
]]></Implementation>
</Method>

<Method name="GetTaskSetting">
<Description>
This method allow to insert a new setting into the task settings string</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Key:%String,Settings:%List</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set ptr = 0
    Set valueIdx = "", keyIdx = ""
    Set count = 0
    While $LISTNEXT(Settings, ptr, value) {
        Set count = count +1
        If value = Key {
            Set keyIdx = count, valueIdx = count + 1
            Quit
        }
    }
    If valueIdx = "" Return ""
    If valueIdx '= "" Return $LIST(Settings, valueIdx)
]]></Implementation>
</Method>

<Method name="ModifyTaskSetting">
<Description>
This method allow to modify the value of an existing setting into the task settings string</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[Key:%String,newValue:%String,&Settings:%List]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        Set ptr = 0
        Set valueIdx = "", keyIdx = ""
        Set count = 0
        While $LISTNEXT(Settings, ptr, value) {
            Set count = count +1
            If value = Key {
                Set keyIdx = count, valueIdx = count + 1
                Quit
            }
        }
        If valueIdx = "" {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Impossible to update Task settings: Key not found in settings"))
        }
        If valueIdx '= "" { 
            Set $LIST(Settings, valueIdx) = newValue
        }
    } Catch ex {
        Set sc=ex.AsStatus()
    }
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.Installer.WebApplication">
<IncludeCode>PackageManager.PackageManager</IncludeCode>
<TimeChanged>67443,59562.138826773</TimeChanged>
<TimeCreated>67443,59562.138826773</TimeCreated>

<Method name="CreateWebApplication">
<Description>
This is the installer class for the PackageManager application.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK

    Set namespace = $Namespace
    Set apiEndpoint = $$$PackageManagerAPI 
    Set dispatchClass = $$$PackageManagerRESTClass 
    Set description = "Package Manager REST API"
    Try {
        Set sc = ##class(PackageManager.Utility.WebApplication).RegisterWebApplication(namespace,apiEndpoint,dispatchClass,description)
    } Catch ex {
        Set sc=ex.AsStatus()
    }

    Return sc
]]></Implementation>
</Method>

<Method name="DeleteWebApplication">
<Description>
This is the installer class for the PackageManager application.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK

    Set namespace = $Namespace
    Set apiEndpoint = $$$PackageManagerAPI 
    Set dispatchClass = $$$PackageManagerRESTClass 
    Try {
        Set sc = ##class(PackageManager.Utility.WebApplication).RemoveWebApplication(apiEndpoint,dispatchClass)
    } Catch ex {
        Set sc=ex.AsStatus()
    }

    Return sc
]]></Implementation>
</Method>
</Class>


<Project name="PackageManager" LastModified="2025-09-01 09:28:17.551542315">
  <Items>
    <ProjectItem name="PackageManager.API.Classes" type="PKG"></ProjectItem>
    <ProjectItem name="PackageManager.API.Namespace" type="PKG"></ProjectItem>
    <ProjectItem name="PackageManager.API.Projects" type="PKG"></ProjectItem>
    <ProjectItem name="PackageManager.API.REST" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.API.Task.Interface" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.Installer.WebApplication" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.PackageManager.INC" type="MAC"></ProjectItem>
    <ProjectItem name="PackageManager.Task.ExportProjects" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.Task.ProjectToExport" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.APIClient" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.CSS" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.JavaScript" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.JavaScriptUtils" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Main" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.Abstract" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.ContentViewerSection.CSS" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.ContentViewerSection.HTML" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.ContentViewerSection.JavaScript" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.ExportTaskSection.CSS" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.ExportTaskSection.HTML" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.ExportTaskSection.JavaScript" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.InstallSection.CSP.APIStatusCSP" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.InstallSection.CSP.InstallCSP" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.InstallSection.CSP.UninstallCSP" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.InstallSection.CSS" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.InstallSection.HTML" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.InstallSection.JavaScript" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.ReleaseSection.CSS" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.ReleaseSection.HTML" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.ReleaseSection.JavaScript" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.UI.Screens.SideBar.CSS" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.Utility.Utils" type="CLS"></ProjectItem>
    <ProjectItem name="PackageManager.Utility.WebApplication" type="CLS"></ProjectItem>
  </Items>
</Project>


<Routine name="PackageManager.PackageManager" type="INC" timestamp="67451,33416.682355265"><![CDATA[

#define ProjectName			 "IRIS Package Manager"
#define PackageManagerVersion			 "0.1.0"
#define PackageManagerAPI			 "/csp/user/rest/packagemanager/"
#define PackageManagerRESTClass			 "PackageManager.API.REST"
#define APIDIR             "DIR"
#define APIPKG            "PKG"
#define ExportProjectTaskSectionTitle			 "Export Project Task"
#define ProjectContentViewerSectionTitle			 "Projects Content Viewer"
#define ExportedReleaseSectionTitle			 "Exported Release"
#define InstallationSectionTitle			 "Install Package Manager"
#define defaultTaskDescription			 "Export projects utility task"
#define systemClassesToExclude			 "CSPX,Ens,EnsHL7,EnsLib,HS,HSMOD,HIPAA,%"

#; --> For standard usage you can use these paths: 
#; #define tmpFilePath			 $system.Util.InstallDirectory()_"tmp/packagemanager/"
#; #define exportTaskFilePath			 $system.Util.InstallDirectory()_"tmp/packagemanager/task/export/"

#; --> For container usage you can use these paths: 
#define tmpFilePath			"/opt/irisapp/export/packagemanager/tmp/"
#define exportTaskFilePath			 "/opt/irisapp/export/packagemanager/task/"
]]></Routine>


<Class name="PackageManager.Task.ExportProjects">
<IncludeCode>PackageManager.PackageManager</IncludeCode>
<Super>%SYS.Task.Definition</Super>
<TimeChanged>67443,59562.146223994</TimeChanged>
<TimeCreated>67443,59562.146223994</TimeCreated>

<Parameter name="TaskName">
<Description>
Task Name</Description>
<Default>Export Projects Utility</Default>
</Parameter>

<Property name="TaskID">
<Description>
ID of the related %SYS.Task definition</Description>
<Type>%String</Type>
</Property>

<Property name="EnablePurge">
<Description>
Enable automatic purge of old exported files
If enabled, old exported files will be automatically deleted based on the retention policy
defined by the user. If disabled, old exported files will be kept indefinitely.</Description>
<Type>%Boolean</Type>
<InitialExpression>0</InitialExpression>
</Property>

<Property name="PurgeAfterNDays">
<Description>
Number of days after which exported files are considered old and eligible for deletion</Description>
<Type>%Integer</Type>
<InitialExpression>60</InitialExpression>
</Property>

<Property name="MinimumNumberOfFilesToKeep">
<Description>
As a security measure, the task will always keep a minimum number of recent exported files 
even if they are older than the retention period.</Description>
<Type>%Integer</Type>
<InitialExpression>5</InitialExpression>
</Property>

<Parameter name="releasePrefix">
<Default>taskId_</Default>
</Parameter>

<Parameter name="exportFormat">
<Default>.xml</Default>
</Parameter>

<Method name="TestTask">
<Description>
Workaround to test the task using the debugger</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Set task = ..%New()
    Set sc = task.OnTask()  
    Return sc
]]></Implementation>
</Method>

<Method name="OnTask">
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set sc = $$$OK
	Try {
		Set Today = $zdate($h,4)		
		Set sql = "SELECT ProjectId FROM PackageManager_Task.ProjectToExport "
            _" WHERE Active = 1 "
            _" AND TaskID = ? "
            //_" AND CURRENT_DATE >= DateFrom "
            //_" AND ( DateTo IS NULL OR CURRENT_DATE <= DateTo ) "
        Set tStatement = ##class(%SQL.Statement).%New()
        Set sc = tStatement.%Prepare(sql)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
        Set tResult = tStatement.%Execute(..TaskID) 
        While tResult.%Next() {
            Set ProjectId = tResult.%Get("ProjectId")
            Set sc = ..ExportProject(ProjectId, ..TaskID) 
            If $$$ISERR(sc) { Throw ##class(%Exception.StatusException).CreateFromStatus(sc) }

            // If the export has been completed successfully, eventually purge old files
            If ..EnablePurge {
                Set sc = ..PurgeOldFiles(ProjectId, ..TaskID, ..PurgeAfterNDays, ..MinimumNumberOfFilesToKeep)
                If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
            }
        }
    } Catch ex {
        Set sc=ex.AsStatus()
    }
    Return sc
]]></Implementation>
</Method>

<Method name="ExportProject">
<Description>
This method exports a project by its ID.
It checks if the project exists, creates a file name, and exports the project to a file.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectId:%String,TaskID:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        If ProjectId = "" { 
            Set sc = $$$ERROR($$$GeneralError,"ProjectId is required.")
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        }
        If TaskID = "" { 
            Set sc = $$$ERROR($$$GeneralError,"TaskID is required.")
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        }

        // Check if the export directory exists, create it if not
        Set basePath = ##class(PackageManager.Utility.Utils).AdaptPathToOS(##class(PackageManager.Config).#EXPPATH, .osSeparator)
        Set prjFilePath = basePath_ProjectId_osSeparator
        Set sc = ##class(PackageManager.Utility.Utils).DirExists(prjFilePath,1,.exists)
        If $$$ISERR(sc) { Throw ##class(%Exception.StatusException).CreateFromStatus(sc) }
        If 'exists { 
            Set sc = $$$ERROR($$$GeneralError,"The directory "_prjFilePath_" does not exist.")
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        }

        // Get file version
        If '##class(PackageManager.Task.ProjectToExport).ProjectIdIndexExists(ProjectId,TaskID) {
            Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"No project associated to the task "_TaskID_" found for the given project ID: "_ProjectId))
        }
        Set prjRecord = ##class(PackageManager.Task.ProjectToExport).ProjectIdIndexOpen(ProjectId,TaskID)
        Set version = prjRecord.Version

        Set sc = prjRecord.IncrementVersion()
        If $$$ISERR(sc) {
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc) 
        }

        // Generate a temporary file name
        Set release = ..#releasePrefix_TaskID
        Set format = ..#exportFormat
        Set datetime = $TRANSLATE($ZDATE($PIECE($H,",",1),3),"-","")_"_"_$TRANSLATE($ZTIME($PIECE($H,",",2),1),":","")
        Set fileName = ProjectId_"_"_release_"_V"_version_"_"_datetime_format
        
        Set filePath = prjFilePath_fileName

        Set project = ##class(%Studio.Project).%OpenId(ProjectId)
        If '$ISOBJECT(project) {
            Set sc = $$$ERROR($$$GeneralError, "Project with ID "_ProjectId_" does not exist.")
            Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
        }
        // Export project, compile, keep source, and include dependencies
        Set sc = project.Export(.filePath, "cuk", 0, .err)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
    } Catch ex {
        Set sc=ex.AsStatus()
    }
    Return sc
]]></Implementation>
</Method>

<Method name="PurgeOldFiles">
<Description>
If Purge is enabled, this method will be called to delete old exported files
Each task will delete files that he has create (they start with the project id and then the task id)
Files will be purged only if older than 'PurgeAfterNDays' days, otherwise they will be kept

A minimum number of file will be kept. 
If less than 'MinimumNumberOfFilesToKeep' files are found, all the files will be kept.
If more than 'MinimumNumberOfFilesToKeep' files are found, the oldest ones (that are older than 'PurgeAfterNDays') will be deleted until 'MinimumNumberOfFilesToKeep' is reached.

This method accepts the following arguments: 
    - ProjectId of the project that has been exported 
    - TaskID that executed the task.
    - Number of days after which a file is considered old and should be purged
    - Minimum number of files to keep even if they are expired
    - An additional verbose argument (default = 0) can be passed to print information about the purge process.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>ProjectId:%String,TaskID:%String,PurgeAfterNDays:%Integer,MinimumNumberOfFilesToKeep:%Integer,verbose:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {    
        // Check if the export directory exists, do not create it if not
        Set basePath = ##class(PackageManager.Utility.Utils).AdaptPathToOS(##class(PackageManager.Config).#EXPPATH, .separator)
        Set prjFilePath = basePath_ProjectId_separator
        Set sc = ##class(PackageManager.Utility.Utils).DirExists(prjFilePath,0,.exists)
        If $$$ISERR(sc) { Throw ##class(%Exception.StatusException).CreateFromStatus(sc) }
        If 'exists { 
            // The directory does not exist, no files to purge
            Return sc
        }
        // Look for files starting with 
        Set filenameStart = ..#releasePrefix_TaskID
        Set format = ..#exportFormat

        // Define base path and initialize stack for directories
        Kill FILES
        Set FILES($INCREMENT(FILES)) = prjFilePath

        // list of files to purge
        Kill PURGELIST

        // Scan the export directory looking for older files
        Set key = ""
        For {
            Set key = $ORDER(FILES(key), 1, searchdir)
            Quit:key=""

            Set filepath = $ZSEARCH(searchdir_"*")
            While filepath'="" {
                Set filename = ##class(%File).GetFilename(filepath)

                // Skip special entries
                If (filename'=".") && (filename'="..") {
                    If verbose Write "file: "_filepath_" " 
                    // If it is a directory, add it to the stack for further inspection
                    If ##class(%File).DirectoryExists(filepath) {
                        If verbose Write "is a directory",!
                        Set FILES($INCREMENT(FILES)) = filepath_separator  // Add subdir to stack
                    // If it is a file, insert it into the directory node
                    } Else {
                        If verbose Write "is a file",! 
                        If (filename[filenameStart)&&(filename[format) {
                            Set toPurge = 0
                            // Get file information                      
                            Set dataCreatedLogic = ##class(%File).GetFileDateCreated(filepath)
                            Set fileSize = ##class(%File).GetFileSize(filepath)
                            // Check if the files should be purged
                            Set dataCreated = $ZDATETIME(dataCreatedLogic,3)
                            Set dayCreated = $PIECE(dataCreatedLogic,",")
                            Set daysDifference = $H - dayCreated
                            If daysDifference >= PurgeAfterNDays {
                                Set toPurge = 1
                            }
                            If verbose w filename_" - data created "_dataCreated_" (diff "_daysDifference_" days)- size "_fileSize_" - Purge "_toPurge,!
                            If toPurge {
                                // Add the file to the list of the files to purge
                                Set PURGELIST($INCREMENT(PURGELIST)) = filepath
                            }
                        } Else {
                            // File does not match the pattern, skip it
                            if verbose Write "File does not match the pattern, skipping it",!
                        }
                    }
                }
                Set filepath = $ZSEARCH("")  // Next entry
            }
        }
        If ($GET(PURGELIST) = "" || ($GET(PURGELIST) = 0)) {
            If verbose Write "No file to purge",!
        } Else {
            If verbose Write "Files to purge: "_$GET(PURGELIST),!
            If ($GET(PURGELIST) < MinimumNumberOfFilesToKeep) {
                // Interrupt the process and keep all the files
                If verbose Write "Keeping all the files",!
                Return sc
            }
            // Purge the older files
            Set filesToDelete = $GET(PURGELIST) - MinimumNumberOfFilesToKeep
            If verbose Write "Deleting the oldest "_filesToDelete_" files",!
            Set deletedCount = 0
            Set key = ""
            For {
                Set key = $ORDER(PURGELIST(key))
                Quit:key=""
                Set filepath = $GET(PURGELIST(key))
                w filepath,! 
                // Older filepaths come first inside the array
                If ##class(%File).Delete(filepath) {
                    Set deletedCount = deletedCount + 1
                    If verbose Write "Deleted "_filepath,!
                } Else {
                    Throw ##class(%Exception.StatusException).CreateFromStatus($$$ERROR($$$GeneralError,"Failed to delete "_filepath)) 
                }
                If deletedCount = filesToDelete {
                    Quit
                }
            }
        }
    } Catch ex {
        Set sc=ex.AsStatus()
        If verbose Write "Error :"_$SYSTEM.Status.GetErrorText(sc),!
    }
    Return sc
]]></Implementation>
</Method>

<Method name="GetClassName">
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[    Return ..%ClassName(1)
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.Task.ProjectToExport">
<Super>%Persistent</Super>
<TimeChanged>67443,59562.17676273</TimeChanged>
<TimeCreated>67443,59562.17676273</TimeCreated>

<Property name="ProjectId">
<Description>
Project name - Contains the ID property of table %Studio.Project to recognize projects to export</Description>
<Type>%String</Type>
</Property>

<Property name="TaskID">
<Description>
ID of the %SYS.Task record which is linked to the export of the current element</Description>
<Type>%String</Type>
</Property>

<Index name="ProjectIdIndex">
<Properties>ProjectId,TaskID</Properties>
<Unique>1</Unique>
</Index>

<Property name="DateFrom">
<Description>
Date from which the project is exported
If not inserted, is the date when the project is created
If the date is future, the project will not be exported

[not used yet]
</Description>
<Type>%Date</Type>
</Property>

<Property name="DateTo">
<Description>
Date to which the project is exported
If the date is not set, the project will be exported 
If the date is past, the project will not be exported

[not used yet]
</Description>
<Type>%Date</Type>
</Property>

<Property name="Active">
<Description>
Property to determine if the project export is active or not, by default it is active
If the project export is not active, it will not be exported even if the export date range is valid</Description>
<Type>%Boolean</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Property name="InsertTimestamp">
<Description>
Insert time of the project export</Description>
<Type>%TimeStamp</Type>
<SqlComputeCode> set {insertTimestamp} = $ZDATETIME($NOW(),3,1,5) </SqlComputeCode>
<SqlComputed>1</SqlComputed>
<SqlComputeOnChange>%%INSERT</SqlComputeOnChange>
</Property>

<Property name="Version">
<Description>
Integer to distinguish versions (number of times the project is exported through a given task)</Description>
<Type>%Integer</Type>
<InitialExpression>1</InitialExpression>
</Property>

<Method name="Disable">
<Description>
This method is called to disable the object </Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Set ..Active = 0
    Set sc = ..%Save()
    Return sc
]]></Implementation>
</Method>

<Method name="Enable">
<Description>
This method is called to enable the object </Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Set ..Active = 1
    Set sc = ..%Save()
    Return sc
]]></Implementation>
</Method>

<Method name="IncrementVersion">
<Description>
This method increment the version of the record</Description>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Set ..Version = ..Version + 1
    Set sc = ..%Save()
    Return sc
]]></Implementation>
</Method>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^PackageManD007.ProjectToExpB5FD</DataLocation>
<DefaultData>ProjectToExportDefaultData</DefaultData>
<IdLocation>^PackageManD007.ProjectToExpB5FD</IdLocation>
<IndexLocation>^PackageManD007.ProjectToExpB5FI</IndexLocation>
<StreamLocation>^PackageManD007.ProjectToExpB5FS</StreamLocation>
<ExtentSize>2</ExtentSize>
<Data name="ProjectToExportDefaultData">
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>ProjectId</Value>
</Value>
<Value name="3">
<Value>TaskID</Value>
</Value>
<Value name="4">
<Value>DateFrom</Value>
</Value>
<Value name="5">
<Value>DateTo</Value>
</Value>
<Value name="6">
<Value>Active</Value>
</Value>
<Value name="7">
<Value>InsertTimestamp</Value>
</Value>
<Value name="8">
<Value>Version</Value>
</Value>
</Data>
<Property name="%%CLASSNAME">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999999:</OutlierSelectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="%%ID">
<Selectivity>1</Selectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="Active">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999999:1</OutlierSelectivity>
<AverageFieldSize>3</AverageFieldSize>
</Property>
<Property name="DateFrom">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999999:</OutlierSelectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="DateTo">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999999:</OutlierSelectivity>
<AverageFieldSize>2</AverageFieldSize>
</Property>
<Property name="InsertTimestamp">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>27</AverageFieldSize>
</Property>
<Property name="ProjectId">
<Selectivity>50.0000%</Selectivity>
<AverageFieldSize>11.5</AverageFieldSize>
</Property>
<Property name="TaskID">
<Selectivity>0.0001%</Selectivity>
<OutlierSelectivity>.999999:1020</OutlierSelectivity>
<AverageFieldSize>6</AverageFieldSize>
</Property>
<SQLMap name="IDKEY">
<BlockCount>-4</BlockCount>
</SQLMap>
<SQLMap name="ProjectIdIndex">
<BlockCount>-4</BlockCount>
</SQLMap>
</Storage>
</Class>


<Class name="PackageManager.UI.APIClient">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67450,56373.594654336</TimeChanged>
<TimeCreated>67443,59562.169293099</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    JAVASCRIPT
*/
]]></Content>
</UDLText>

<Method name="APIClient">
<Description><![CDATA[
JavaScript API client 

This script provides a client-side interface to interact with the Package Manager REST API.
It defines functions to perform various operations such as creating projects, managing tasks, and exporting classes

The API client can be accessed globally via the `PackageManagerAPI` or `pmAPI` object.
Requests can be made with different caching strategies: no-cache, short-cache (5 minutes), and long-cache (1 hour).

Example usage:
PackageManagerAPI.ping()
    .then(function(response) { // This returns a JSON, not a promise
        console.log('API is running:', response.message);
    });

Example usage with catch block:
    const cacheStrategy = 'noCache';
    PackageManagerAPI.getProjects(cacheStrategy)
        .then(function(response) {
            console.log('API is running:', response.message);
            allProjects = response;
            renderProjects(response);
         })
         .catch(function(err) {
            const table_body = document.getElementById('projectTableBody');
            table_body.innerHTML = `
                <tr>
                    <td colspan="3" style="color:red; text-align:center;">
                         Error loading projects from database<br>
                            ${err.message}
                    </td>
                </tr>
            `;
            console.error("Error while fetching projects:", err);
        });        
    }
]]></Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    
    Set packagemanagerAPIendpoint = $$$PackageManagerAPI
    If (($EXTRACT(packagemanagerAPIendpoint,*) = "/") || ($EXTRACT(packagemanagerAPIendpoint,*) = "\")) {
        Set packagemanagerAPIendpoint = $EXTRACT(packagemanagerAPIendpoint,1,*-1)
    }
    &html<<script type="text/javascript">                       

        // Package Manager API Service - ES5 Compatible
        (function() {
            'use strict';
            
            // Configuration
            var API_CONFIG = {
                baseURL: '#(packagemanagerAPIendpoint)#', 
                defaultHeaders: {
                    'Content-Type': 'application/json'
                },
                cacheHeaders: {
                    noCache: {
                        'Cache-Control': 'no-cache, no-store, must-revalidate',
                        'Pragma': 'no-cache',
                        'Expires': '0'
                    },
                    shortCache: {
                        'Cache-Control': 'max-age=300' // 5 minutes
                    },
                    longCache: {
                        'Cache-Control': 'max-age=3600' // 1 hour
                    }
                }
            };

            // Helper function to merge headers
            function mergeHeaders() {
                var result = {};
                for (var i = 0; i < arguments.length; i++) {
                    var headers = arguments[i];
                    if (headers) {
                        for (var key in headers) {
                            if (headers.hasOwnProperty(key)) {
                                result[key] = headers[key];
                            }
                        }
                    }
                }
                return result;
            }

            // Generic request method
            async function request(endpoint, options, cacheStrategy = 'shortCache') {
                options = options || {};
                var url = API_CONFIG.baseURL + endpoint;
                
                var headers = mergeHeaders(
                    API_CONFIG.defaultHeaders,
                    API_CONFIG.cacheHeaders[cacheStrategy],
                    options.headers
                );

                var config = {
                    method: options.method || 'GET',
                    headers: headers
                };

                if (options.body) {
                    config.body = options.body;
                }

                return fetch(url, config)
                    .then(async function(response) {

                        if (!response.ok) {
                            // return the error content as text if returned
                            const errorText = await response.text();
                            throw new Error(
                                `HTTP error - status: ${response.status} - ${response.statusText} - details: ${errorText}`
                            );
                        }
                        
                        var contentType = response.headers.get('content-type');
                        if (contentType && contentType.indexOf('application/json') !== -1) {
                            return response.json(); // Return the promise
                        } else if (contentType && contentType.indexOf('application/octet-stream') !== -1) {
                            return response.blob(); // Return the promise
                        }
                        return response.text(); // Return the promise
                    })
                    .catch(function(error) {
                        console.error('API request failed: ' + endpoint, error);
                        throw error;
                    });
            }

            // Create the API service object
            var PackageManagerAPI = {
                // Project methods
                createProject: function(projectData) {
                    return request('/project/create', {
                        method: 'POST',
                        body: JSON.stringify(projectData)
                    });
                },

                getProjects: function(cacheStrategy) {
                    return request('/projects', { method: 'GET' }, cacheStrategy);
                },

                getProjectContent: function(projectId) {
                    var endpoint = projectId ? '/project/content/' + projectId : '/project/content';
                    return request(endpoint, { method: 'GET' });
                },

                updateProject: function(projectId, updateData) {
                    return request('/project/update/' + projectId, {
                        method: 'POST',
                        body: JSON.stringify(updateData)
                    });
                },

                deleteProject: function(projectId) {
                    return request('/project/delete/' + projectId, { method: 'DELETE' }, 'noCache');
                },

                addClassesToProject: function(projectId, classes) {
                    return request('/project/add/' + projectId, {
                        method: 'POST',
                        body: JSON.stringify(classes)
                    });
                },

                removeClassesFromProject: function(projectId, classes) {
                    return request('/project/remove/' + projectId, {
                        method: 'PUT',
                        body: JSON.stringify(classes)
                    });
                },

                exportProject: function(projectId) {
                    return request('/project/export/' + projectId, { method: 'GET' });
                },

                // Classes methods
                exportClasses: function(classData) {
                    return request('/classes/export', {
                        method: 'POST',
                        body: JSON.stringify(classData)
                    });
                },

                // Namespace methods
                getNamespaceContent: function(type, lookInto, excludeSystemClasses = false) {
                    const lookIntoKey = 'PackageName';
                    const excludeSystemKey = 'ExcludeSystemClasses';
                    var endpoint = type ? '/namespace/content/' + type : '/namespace/content';

                    // Build query parameters
                    const params = [];
                    
                    // Add excludeSystemClasses parameter
                    params.push(excludeSystemKey + '=' + excludeSystemClasses);

                    // If not empty, add a parameter to look into specific packages
                    if (lookInto && lookInto.length > 0) { 
                        params.push(lookIntoKey + '=' + encodeURIComponent(lookInto));
                    }
                    
                    // Append parameters to endpoint if any exist
                    if (params.length > 0) {
                        endpoint += '?' + params.join('&');
                    }

                    return request(endpoint, { method: 'GET' });
                },

                // Task methods
                createTask: function(taskData, cacheStrategy) {
                    return request('/task/create', {
                        method: 'POST',
                        body: JSON.stringify(taskData)
                    },
                    cacheStrategy);
                },

                checkExistingTasks: function(cacheStrategy) {
                    // Force no-cache for dynamic task status
                    return request('/task/existing', { 
                        method: 'GET',
                        headers: API_CONFIG.cacheHeaders.noCache
                    },
                    cacheStrategy);
                },

                deleteTask: function(taskId) {
                    return request('/task/delete/' + taskId, { method: 'DELETE' });
                },

                runTask: function(taskId) {
                    // Force no-cache for task execution
                    return request('/task/run/' + taskId, { 
                        method: 'GET',
                        headers: API_CONFIG.cacheHeaders.noCache
                    });
                },

                getTaskInfo: function(taskId) {
                    // Force no-cache for current task state
                    return request('/task/' + taskId, { 
                        method: 'GET',
                        headers: API_CONFIG.cacheHeaders.noCache
                    });
                },

                updateTask: function(taskId, taskData, cacheStrategy) {
                    return request('/task/update/' + taskId, {
                        method: 'POST',
                        body: JSON.stringify(taskData)
                    },
                    cacheStrategy);
                },

                updateTaskClasses: function(taskId, classes) {
                    return request('/task/updateclasses/' + taskId, {
                        method: 'POST',
                        body: JSON.stringify(classes)
                    });
                },

                getReleases: function(cacheStrategy) {
                    return request('/task/releases/', { method: 'GET' }, cacheStrategy);
                },

                downloadRelease: function(releaseData, cacheStrategy) {
                    return request('/task/release/download', {
                        method: 'POST',
                        body: JSON.stringify(releaseData)
                    },
                    cacheStrategy);
                },

                // Utility methods
                ping: function() {
                    return request('/api/ping', { method: 'GET' }, 'noCache');
                },

                getInfo: function() {
                    return request('/', { method: 'GET' });
                }
            };

            // Make it globally available
            window.PackageManagerAPI = PackageManagerAPI;
            
            // Also create a shorter alias
            window.pmAPI = PackageManagerAPI;

        })();

    </script>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.CSS">
<Description>
This class provides the main and generic CSS classes for the Package Manager UI. </Description>
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67451,30779.723896677</TimeChanged>
<TimeCreated>67443,59562.168127157</TimeCreated>

<Method name="Styles">
<Description>
Overall generic styles for the package manager projecty </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK

    &html<<style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            height: 100vh;
            overflow: hidden;
            background-color: #f4f6f8;
        }

        .main-content {
            flex-grow: 1;
            flex-shrink: 1; /* Allow shrinking when needed */
            min-width: 0; /* Important: allows flex item to shrink below content size */
            width: 0; /* Forces flexbox to calculate width based on available space */
            padding: 40px;
            overflow-y: auto;
            overflow-x: hidden; /* Prevents horizontal overflow */
            background-color: #ffffff;
        }

        .main-content h1 {
            font-size: 2em;
            color: #2c3e50;
            margin-bottom: 10px;
        }

        .main-content h2 {
            font-size: 1.5em;
            color: #34495e;
            border-bottom: 2px solid #e0e4e8;
            padding-bottom: 6px;
            margin-top: 30px;
        }

        .main-content p {
            font-size: 1em;
            color: #555;
            line-height: 1.6em;
            margin-top: 12px;
        }

        .hidden {
            display: none;
        }

        .message {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 16px;
            border-radius: 6px;
            color: white;
            font-weight: 500;
            z-index: 1001;
            transform: translateX(100%);
            transition: transform 0.3s ease;
        }

        .message.show {
            transform: translateX(0);
        }

        .message.success {
            background: #10b981;
        }

        .message.error {
            background: #ef4444;
        }

        .loading {
            text-align: center;
            padding: 40px;
            color: #64748b;
        }

        .actions {
            display: flex;
            gap: 8px;
        }    

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: #3b82f6;
            color: white;
        }

        .btn-primary:hover {
            background: #2563eb;
        }

        .btn-secondary {
            background: #e2e8f0;
            color: #475569;
        }

        .btn-secondary:hover {
            background: #cbd5e1;
        }

        .btn-danger {
            background: #ef4444;
            color: white;
        }

        .btn-danger:hover {
            background: #dc2626;
        }

        .btn-small {
            padding: 4px 8px;
            font-size: 12px;
        }

        .btn-icon {
            width: 32px;
            height: 32px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background: none;
            border: none;
            outline: none;
            font-size: 18px;
        }

        .btn-icon:hover {
            transform: translateY(-1px) scale(1.2) rotate(360deg);
        }

        .btn-icon:focus {
            outline: none;
        }

        .sidebar-icon {
            width: 32px;
            height: 32px;
            padding: 0;
            display: flex;
            align-items: center;
            justify-content: center;
            background: none;
            border: none;
            outline: none;
            font-size: 18px;
        }

        .sidebar-icon:hover {
            transform: translateY(-1px) scale(1.2) rotate(720deg);
            transition: transform 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55);
        }
        
        @keyframes spin {
            from { transform: translateY(-1px) scale(1.2) rotate(0deg); }
            to { transform: translateY(-1px) scale(1.2) rotate(360deg); }
        }

        .sidebar-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .sidebar-header-icon {
            width: 32px;
            height: 32px;
            padding: 0;
            background: none;
            border: none;
            outline: none;
            font-size: 24px;
        }

        .sidebar-header-icon:hover {
            transform: translateY(-1px) scale(1.4);
            animation: spin 0.7s linear infinite;
        }

        /* Icon base styles */
        .icon {
            display: inline-block;
            font-style: normal;
            font-variant: normal;
            text-rendering: auto;
            line-height: 1;
        }

        /* Specific icon classes */
        .icon-save:before { content: "\1f4be"; }        /* floppy disk */
        .icon-cancel:before { content: "\274c"; }       /* cross mark */
        .icon-edit:before { content: "\270D"; }         /* pencil */
        .icon-delete:before { content: "\1F6AE"; }      /* wastebasket */
        .icon-settings:before { content: "\1F4D1"; }     /* whitepaper */
        .icon-tools:before { content: "\1f527"; }       /* wrench */
        .icon-success:before { content: "\2713"; }      /* check mark */
        .icon-warning:before { content: "\26a0"; }      /* warning sign */
        .icon-home:before { content: "\1f3e0"; }        /* house */
        .icon-user:before { content: "\1f464"; }        /* bust in silhouette */
        .icon-search:before { content: "\1f50d"; }      /* left-pointing magnifying glass */
        .icon-refresh:before { content: "\21bb"; }      /* clockwise open circle arrow */
        .icon-download:before { content: "\2B07"; }     /* downwards arrow */
        .icon-upload:before { content: "\2191"; }       /* upwards arrow */
        .icon-multiplication:before { content: "\00D7"; }         /* multiplication sign */
        .icon-plus:before { content: "\002b"; }         /* plus sign */
        .icon-minus:before { content: "\2212"; }        /* minus sign */
        .icon-left:before { content: "\2190"; }         /* leftwards arrow */
        .icon-right:before { content: "\2192"; }        /* rightwards arrow */
        .icon-up:before { content: "\2191"; }           /* upwards arrow */
        .icon-down:before { content: "\2193"; }         /* downwards arrow */
        .icon-package:before { content: "\1f4e6"; }     /* package */
        .icon-info:before { content: "\2139"; }         /* information source */
        .icon-document:before { content: "\1f4c4"; }    /* page facing up */
        .icon-cls:before { content: "\1f4d8"; }          /* blue book */
        .icon-mac:before { content: "\1f4dc"; }          /* scroll */
        .icon-inc:before { content: "\1f4dd"; }          /* memo */
        .icon-csp:before { content: "\1f9e9"; }          /* puzzle piece */
        .icon-css:before { content: "\1f3a8"; }          /* artist palette */
        .icon-js:before { content: "\1f4bb"; }           /* personal computer */
        .icon-json:before { content: "\1f9fe"; }         /* receipt */
        .icon-png:before { content: "\1f5bc"; }          /* framed picture */
        .icon-html:before { content: "\1f310"; }         /* globe with meridians */
        .icon-ico:before { content: "\1f5bc"; }          /* framed picture */
        .icon-jpg:before { content: "\1f5bc"; }          /* framed picture */
        .icon-folder:before { content: "\1f4c1"; }       /* file folder */
        .icon-folder-open:before { content: "\1f4c2"; }  /* open file folder */
        .icon-books:before { content: "\1f4da"; }        /* books */
        .icon-outbox:before { content: "\1f4e4"; }       /* outbox tray */
        .icon-info-circle:before { content: "\24d8"; }   /* circled information */
        .icon-question:before { content: "\2753"; }      /* question mark ornament */
        .icon-exclamation:before { content: "\2757"; }   /* exclamation mark symbol */
        .icon-lightbulb:before { content: "\1f4a1"; }    /* light bulb */
        .icon-speech:before { content: "\1f4ac"; }       /* speech balloon */
        .icon-thought:before { content: "\1f4ad"; }      /* thought balloon */
        .icon-wireless:before { content: "\1f6dc"; }     /* wireless */
        .icon-dividers:before { content: "\1F5C2"; }     /* CARD INDEX DIVIDERS */
        .icon-new:before { content: "\1F195"; }          /* SQUARED NEW */
        .icon-refresh:before { content: "\1F504"; }      /* REFRESH */
        .icon-open-book:before { content: "\1F4D6"; }    /* open book */
        .icon-plus:before { content: "\2795"; }          /* PLUS SIGN */
        .icon-calendar:before { content: "\1F4C5"; }     /* CALENDAR */
        .icon-email:before { content: "\1F4E7"; }        /* EMAIL */
        .icon-pause:before { content: "\23F8"; }        /* Pause Button */
        .icon-barchart:before { content: "\1F4CA"; }    /* Bar Chart */
        .icon-bag:before { content: "\1F4BC"; }    /* BRIEFCASE / BAG */
        .icon-clipboard:before { content: "\1F4CB"; }   /* Clipboard */
        .icon-run:before {                              /* RUN BUTTON */
            content: "\25B6"; 
            background-color: #1c73ffff; /* Sets the background color to blue */
            padding: 3px 6px; /* Adds space around the icon */
            border-radius: 4px; /* Rounds the corners for a softer look */
            color: white; /* Makes the arrow white for contrast against the blue background */
            font-size: 0.65em;
        }
        .icon-right-arrow:before { content: "\25B6"; } /* ARROW TOGGLE */
        .icon-hourglass:before { content: "\23F3"; } /* hourglass with sand */
        .icon-select-all:before { content: "\2705"; } /* checkbox icon  */
        .icon-blackcircle:before { 
            content: "\26AB"; 
            font-size: 0.65em;
        } /* black circle  */
    </style>>

    // Specific CSS for the Sidebar
    Do ##class(PackageManager.UI.Screens.SideBar.CSS).SideBarCSS()

    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.JavaScript">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67443,59562.167420179</TimeChanged>
<TimeCreated>67443,59562.167420179</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    JAVASCRIPT
*/
]]></Content>
</UDLText>

<Method name="JavaScriptUtilities">
<Description>
JavaScript functions used by the whole application</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    
    &html<<script type="text/javascript">                       

        /**
        * Converts various iterable types to a plain array
        * Works with: Arrays, Sets, NodeLists, strings, etc.
        */
        function toArray(iterable) {
            // Handle null/undefined
            if (iterable == null) {
                return [];
            }
            
            // Already an array
            if (Array.isArray(iterable)) {
                return iterable.slice(); // Return a copy
            }
            
            // Handle Set
            if (iterable instanceof Set) {
                const result = [];
                iterable.forEach(function(item) {
                    result.push(item);
                });
                return result;
            }
            
            // Handle objects with length property (like NodeList, arguments)
            if (typeof iterable.length === 'number') {
                const result = [];
                for (let i = 0; i < iterable.length; i++) {
                    result.push(iterable[i]);
                }
                return result;
            }
            
            // Handle other iterables (if they have forEach)
            if (typeof iterable.forEach === 'function') {
                const result = [];
                iterable.forEach(function(item) {
                    result.push(item);
                });
                return result;
            }
            
            // Handle strings
            if (typeof iterable === 'string') {
                return iterable.split('');
            }
            
            // Fallback: wrap single item in array
            return [iterable];
        }

        /**
        * Combines multiple iterables into a single array
        * Compatible replacement for: [...iterable1, ...iterable2, ...]
        */
        function combineAll() {
            const result = [];
            for (let i = 0; i < arguments.length; i++) {
                pushAll(result, arguments[i]);
            }
            return result;
        }

        /**
        * Adds all items from an iterable to an existing array
        * Compatible replacement for: targetArray.push(...iterable)
        */
        function pushAll(targetArray, iterable) {
            const items = toArray(iterable);
            for (let i = 0; i < items.length; i++) {
                targetArray.push(items[i]);
            }
            return targetArray;
        }

        // Utility to remove an item from a Set and return a new Set
        // Ensure compatibility with ObjectScript environments, where delete operator may not work
        function removeFromSet(set, item) {
            const newArray = [];
            set.forEach(function(value) {
                if (value !== item) {
                    newArray.push(value);
                }
            });
            return new Set(newArray);
        }


    </script>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.JavaScriptUtils">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67443,59562.16935804</TimeChanged>
<TimeCreated>67443,59562.16935804</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    JAVASCRIPT
*/
]]></Content>
</UDLText>

<Method name="JavaScriptUtilities">
<Description>
JavaScript functions used by the whole application</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    
    &html<<script type="text/javascript">                       

        /**
        * Converts various iterable types to a plain array
        * Works with: Arrays, Sets, NodeLists, strings, etc.
        */
        function toArray(iterable) {
            // Handle null/undefined
            if (iterable == null) {
                return [];
            }
            
            // Already an array
            if (Array.isArray(iterable)) {
                return iterable.slice(); // Return a copy
            }
            
            // Handle Set
            if (iterable instanceof Set) {
                const result = [];
                iterable.forEach(function(item) {
                    result.push(item);
                });
                return result;
            }
            
            // Handle objects with length property (like NodeList, arguments)
            if (typeof iterable.length === 'number') {
                const result = [];
                for (let i = 0; i < iterable.length; i++) {
                    result.push(iterable[i]);
                }
                return result;
            }
            
            // Handle other iterables (if they have forEach)
            if (typeof iterable.forEach === 'function') {
                const result = [];
                iterable.forEach(function(item) {
                    result.push(item);
                });
                return result;
            }
            
            // Handle strings
            if (typeof iterable === 'string') {
                return iterable.split('');
            }
            
            // Fallback: wrap single item in array
            return [iterable];
        }

        /**
        * Combines multiple iterables into a single array
        * Compatible replacement for: [...iterable1, ...iterable2, ...]
        */
        function combineAll() {
            const result = [];
            for (let i = 0; i < arguments.length; i++) {
                pushAll(result, arguments[i]);
            }
            return result;
        }

        /**
        * Adds all items from an iterable to an existing array
        * Compatible replacement for: targetArray.push(...iterable)
        */
        function pushAll(targetArray, iterable) {
            const items = toArray(iterable);
            for (let i = 0; i < items.length; i++) {
                targetArray.push(items[i]);
            }
            return targetArray;
        }

        // Utility to remove an item from a Set and return a new Set
        // Ensure compatibility with ObjectScript environments, where delete operator may not work
        function removeFromSet(set, item) {
            const newArray = [];
            set.forEach(function(value) {
                if (value !== item) {
                    newArray.push(value);
                }
            });
            return new Set(newArray);
        }


    </script>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Main">
<Description>
This class provides the main functionality for the Package Manager UI. 
It provides methods for rendering the main page, initializing the sidebar content, and handling window load events.  
The class is responsible for setting up the UI components and providing the necessary functionality for the Package Manager UI.</Description>
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67449,55975.13109419</TimeChanged>
<TimeCreated>67443,59562.175750499</TimeCreated>

<Method name="OnPage">
<Description>
This code sets the content of the #mainContent element for the welcome landing page.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    &html<<html>
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <title>Package Manager UI</title>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <!-- <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet"> -->
        </head>
    >

    Do ##class(PackageManager.UI.CSS).Styles()
    Do ..SectionsJS()
    Do ..WindowOnLoad()

    &html<
        <body>
            <div class="sidebar">
                <div class="sidebar-header" title="Toggle Sidebar"> 
                    <span class='sidebar-header-icon icon-package'></span>
                    <span class="label">Package Manager</span>
                </div>
                <div id="sidebarList"></div>

                <!-- Bottom info section with user info and version -->
                <div class="bottom-info">
                    <!-- User information section -->
                    <div class="user-info">
                        <span class="icon-settings"></span>
                        <span class="currentNamespace" title="Current Namespace">#($NAMESPACE)#</span>
                        <span class="icon-user"></span>
                        <span class="currentUser" title="Current User">#($USERNAME)#</span>
                    </div>

                    <!-- Version indicator at the bottom of sidebar -->
                    <div class="sidebar-version" title="Package Manager Version">
                        <span class="icon-info-circle"></span>
                        <span class="version-text">v#($$$PackageManagerVersion)#</span>
                    </div>
                </div>
            </div>
            <div class="main-content" id="mainContent"></div>
        </body>
    </html>>
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="SectionsJS">
<Description>
Initialize sidebar content on page load
This code is executed when the window finishes loading, and is used to initialize the page's content.
The loadSection function is called to fetch data from the server and dynamically generate the content for the selected section, and then inject it into the main content area. 
This code executes the populateSidebar function when the window finishes loading, which is responsible for populating the sidebar with its content.
The populateSidebar function is expected to generate the necessary HTML and populate the sidebar element with it, making it visible and interactive for the user.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK

    // Insert the JavaScript functions for all the sections
    Do ##class(PackageManager.UI.JavaScriptUtils).JavaScriptUtilities()
    Do ##class(PackageManager.UI.APIClient).APIClient()
    Do ##class(PackageManager.UI.Screens.InstallSection.HTML).renderInstallSection()
    Do ##class(PackageManager.UI.Screens.ContentViewerSection.HTML).renderContentViewer()
    Do ##class(PackageManager.UI.Screens.ExportTaskSection.HTML).renderExportTask()
    Do ##class(PackageManager.UI.Screens.ReleaseSection.HTML).renderExportedRelease()

    // Main script to handle different sections
    &html<<script language="javascript"> 
    
        const sections = {
            '#($$$InstallationSectionTitle)#': renderInstallSection,
            '#($$$ProjectContentViewerSectionTitle)#': renderContentViewer,
            '#($$$ExportProjectTaskSectionTitle)#': renderExportTask,
            '#($$$ExportedReleaseSectionTitle)#': renderExportedRelease
        };

        // Function to load section content dynamically based on the title of the section
        async function loadSection(title) {
            const renderFn = sections[title];
            const contentDiv = document.getElementById("mainContent");
            if (typeof renderFn === "function") {
                contentDiv.innerHTML = renderFn();
                // After injecting Project List UI, fetch data to populate the UI
                if (title === '#($$$ProjectContentViewerSectionTitle)#') {
                    loadProjects();
                }
                if (title === '#($$$ExportProjectTaskSectionTitle)#') {
                    loadExportTasks();
                }
                if (title === '#($$$ExportedReleaseSectionTitle)#') {
                    loadExportedReleases();
                }
                if (title === '#($$$InstallationSectionTitle)#') {
                    apiMgrCheckAPIStatus();
                }
            } else {
                contentDiv.innerHTML = "<p>Section not found.</p>";
            }
        }

        // Logic for icons and sidebar population
        const icons = {
            '#($$$InstallationSectionTitle)#': "icon-tools",
            '#($$$ProjectContentViewerSectionTitle)#': "icon-csp",
            '#($$$ExportProjectTaskSectionTitle)#': "icon-outbox",
            '#($$$ExportedReleaseSectionTitle)#': "icon-books"
        };

        function populateSidebar() {
            const sidebar = document.getElementById("sidebarList");
            for (const title in sections) {
                const el = document.createElement("h3");
                const icon = icons[title] || "icon-document";
                el.innerHTML = `<span class='sidebar-icon ${icon}'></span> <span class='label'>${title}</span>`;
                el.onclick = () => loadSection(title);
                sidebar.appendChild(el);
            }
        }
    </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="WindowOnLoad">
<Description>
Toggle collapse of the sidebar on header click
This code adds a click event handler to the sidebar header that toggles the "collapsed" class on the sidebar element.
When the sidebar header is clicked, the sidebar will toggle between its expanded and collapsed states.
The sidebar element will have the class "collapsed" added or removed when the header is clicked.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language="javascript"> 
        window.onload = function() {
            populateSidebar();
            document.getElementById("mainContent").innerHTML = [
                "<h1>Welcome to Package Manager</h1>",
                "<p>Select a section from the sidebar to begin.</p>"
            ].join("");
            
            // Add click event to sidebar header to toggle collapse
            document.querySelector(".sidebar-header").onclick = function () {
                document.querySelector(".sidebar").classList.toggle("collapsed");
            };

        }
    </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="GetMainPageClassName">
<Description>
Get the class name to call the correct API URL

This method retrieves the class name of the current page and constructs the correct API URL
by combining the class name with the web application ID and namespace.

# Parameters

* `URL`: Output parameter that will contain the constructed API URL

# Notes

This method uses the `%Dictionary.CompiledClass` and `%RoutineMgr` classes to retrieve the class name and web server port.
It also uses the `%SQL.Statement` class to execute a SQL query to retrieve the default web application ID for the namespace.

The constructed API URL is in the format `http(s)://webAppID/class.Name.cls`</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>*URL:%String,verbose:%Boolean=1</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        Set URL = ""
        Set class = ##class(%Dictionary.CompiledClass).%OpenId(..%ClassName(1)) 
        If '$ISOBJECT(class) Throw ##class(%Exception.General).%New("Class not found")
        // Get Instance URL and Port
        Set sc=##class(%RoutineMgr).GetWebServerPort(.Port,.Server,.URLPrefix,.URL)
        // Get Default Web Application for the namespace (for csp pages)
        Set PackageManagerNamespace = $NAMESPACE
        New $Namespace
        Set $Namespace = "%SYS"
        Set sql = "SELECT ID FROM Security.Applications WHERE IsNameSpaceDefault = 1 AND NameSpace = ?"
        Set tStatement = ##class(%SQL.Statement).%New()
        Set sc = tStatement.%Prepare(sql)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
        Set tResult = tStatement.%Execute(PackageManagerNamespace)
        While tResult.%Next() {
            Set webAppID = tResult.%Get("ID")
        }
        Set URL = URL_webAppID_"/"_class.Name_".cls"
        // Remve double slash 
        If URL [ "//" {
            If URL [ "http://" { 
                Set prefix = "http://" 
            } ElseIf URL [ "https://"  { 
                Set prefix = "https://" 
            }
            If prefix '= "" {
                Set URL = $REPLACE(URL,prefix,"")
            }
            Set URL = $REPLACE(URL,"//","/")
            If prefix '= "" { 
                Set URL = prefix_URL
            }
        }
        If verbose w URL,!
    }
    Catch ex {
        Set sc=ex.AsStatus()
    }
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.Abstract">
<Description>
Abstract class for all the UI screens</Description>
<Abstract>1</Abstract>
<IncludeCode>PackageManager.PackageManager</IncludeCode>
<Super>%CSP.Page</Super>
<TimeChanged>67443,59562.178980492</TimeChanged>
<TimeCreated>67443,59562.178980492</TimeCreated>

<Method name="GetPageURLForInternalCalls">
<Description>
This method returns the endpoint to call to execute an internal call (from a CSP page to another)</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        Set URL = ""
        Set class = ##class(%Dictionary.CompiledClass).%OpenId(..%ClassName(1)) 
        If '$ISOBJECT(class) Throw ##class(%Exception.General).%New("Class not found")
        // Get Instance URL and Port
        Set sc=##class(%RoutineMgr).GetWebServerPort(.Port,.Server,.URLPrefix,.URL)
        // Get Default Web Application for the namespace (for csp pages)
        Set PackageManagerNamespace = $NAMESPACE
        New $Namespace
        Set $Namespace = "%SYS"
        Set sql = "SELECT ID FROM Security.Applications WHERE IsNameSpaceDefault = 1 AND NameSpace = ?"
        Set tStatement = ##class(%SQL.Statement).%New()
        Set sc = tStatement.%Prepare(sql)
        If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
        Set tResult = tStatement.%Execute(PackageManagerNamespace)
        While tResult.%Next() {
            Set webAppID = tResult.%Get("ID")
        }
        Set URL = webAppID_"/"_class.Name_".cls"
    }
    Catch ex {
        Set sc=ex.AsStatus()
        Do ex.Log()
        Set URL = ""
    }
    Return URL
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.ContentViewerSection.CSS">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67451,30211.04098736</TimeChanged>
<TimeCreated>67443,59562.191085347</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    CSS STYLES
*/
]]></Content>
</UDLText>

<Method name="RenderStyles">
<Description>
Wrapper for content viewer section css styles</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Do ..CreateProject()
    Do ..ProjectTable()
    Do ..NewProjectModal()
    Do ..Msg()
    Do ..ContentTreeViewer()
    Do ..AddClassesModal()
    Return sc
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
    SCREENS AND MODALS CSS
*/
]]></Content>
</UDLText>

<Method name="CreateProject">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<style>
        .create-project-controls {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .create-project-controls button {
            padding: 10px 18px;
            font-weight: 600;
            border: 1px solid #e0e4e8;
            border-radius: 15px;
            font-size: 12px;
            font-weight: 600;
            letter-spacing: 0.03em;
            min-width: 150px;
            margin-right: 10px;
            background-color: #fefefe;
            transition: background-color 0.25s ease, box-shadow 0.25s ease;
        }

        .create-project-controls button:hover {
            background-color: #3498db;
            box-shadow: 0 2px 5px #3498db;
            color: white;
        }
    </style>>

    Return sc
]]></Implementation>
</Method>

<Method name="ProjectTable">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<style>
        .project-table-controls {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #e0e4e8;
        }

        .project-table-controls button {
            padding: 10px 18px;
            font-weight: 600;
            border: 1px solid #e0e4e8;
            border-radius: 15px;
            font-size: 12px;
            font-weight: 600;
            letter-spacing: 0.03em;
            min-width: 150px;
            margin-right: 10px;
            background-color: #fefefe;
            transition: background-color 0.25s ease, box-shadow 0.25s ease;
            cursor: pointer;
        }

        .project-table-controls button:hover {
            transform: translateY(-1px);
            background-color: #3498db;
            box-shadow: 0 2px 5px #3498db;
            color: white;
        }

        /* container styles */
        .project-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            overflow: hidden;
            margin-bottom: 20px;
            margin-top: 10px;
        }

        .project-header {
            background: linear-gradient(135deg, #3c97ffff, #0d6bd7ff);
            color: white;
            padding: 16px 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .project-title {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 16px;
            font-weight: 600;
        }

        .project-title .icon {
            font-size: 18px;
        }

        .header-controls {
            display: flex;
            gap: 8px;
        }

        .header-controls button {
            padding: 8px 16px;
            background-color: #fefefe;
            color: #2c3e50;
            border: 1px solid #e0e4e8;
            border-radius: 15px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
            letter-spacing: 0.03em;
            transition: all 0.25s ease;
            white-space: nowrap;
        }
        
        .header-controls button:hover {
            transform: translateY(-1px);
            background: linear-gradient(135deg, #3e5f81ff 0%, #34495e 100%);
            color: white;
            border-color: #2c3e50;
            box-shadow: 0 2px 5px rgba(44, 62, 80, 0.3);
        }

        .header-controls button:active {
            transform: translateY(-1px) scale(1.01);
            box-shadow: 0 4px 15px rgba(44, 62, 80, 0.2);
        }

        .header-controls button:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(44, 62, 80, 0.1),
                        0 4px 15px rgba(44, 62, 80, 0.2);
        }

        .header-controls input {
            width: 100%;
            padding: 8px 10px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            background-color: #fefefe;
            box-sizing: border-box;
        }

        .header-controls input:focus {
            outline: none;
            border-color: #4a90e2;
            box-shadow: 0 0 0 3px rgba(74, 144, 226, 0.1);
        }

        .project-content {
            padding: 20px;
        }

        .project-table-wrapper {
            overflow-x: auto;
            border: 1px solid #e0e4e8;
            border-radius: 6px;
            margin-bottom: 20px;
        }

        .project-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        .project-table th {
            background: #f8f9fa;
            padding: 12px 16px;
            text-align: left;
            font-weight: 600;
            color: #333;
            border-bottom: 1px solid #e0e4e8;
        }

        .project-table td {
            padding: 12px 16px;
            border-bottom: 1px solid #e0e4e8;
        }

        .project-table tr:last-child td {
            border-bottom: none;
        }

        .project-table tr:hover {
            background-color: #f8f9fa;
        }

        .message {
            padding: 12px;
            border-radius: 6px;
            display: none;
        }

        .message.success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .message.error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        .message.info {
            background-color: #cce7ff;
            border: 1px solid #99d3ff;
            color: #004085;
        }
    </style>>

    Return sc
]]></Implementation>
</Method>

<Method name="NewProjectModal">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<style>
        /* Special styling for New Project button */
        .new-project-btn {
            background: #81f99dff !important;
            border-color: #81f99dff !important;
            font-weight: 600 !important;
        }

        .new-project-btn:hover {
            background: #58df76ff !important;
            border-color: #58df76ff !important;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
        }

        .plus-icon {
            font-size: 16px;
            font-weight: bold;
            margin-right: 4px;
        }

        /* Modal Styles */
        .modal-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            animation: fadeIn 0.3s ease;
        }

        .modal-overlay.show {
            display: flex;
            justify-content: center;
            align-items: center;
        }

        .modal-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            width: 90%;
            max-width: 500px;
            max-height: 90vh;
            overflow-y: auto;
            animation: slideIn 0.3s ease;
        }

        .modal-header {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
            padding: 20px;
            border-radius: 12px 12px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .modal-close {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.2s ease;
        }

        .modal-close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .modal-content {
            padding: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 6px;
            font-weight: 600;
            color: #333;
        }

        .form-group input,
        .form-group textarea,
        .form-group select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.2s ease;
            box-sizing: border-box;
        }

        .form-group input:focus,
        .form-group textarea:focus,
        .form-group select:focus {
            outline: none;
            border-color: #28a745;
            box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
        }

        .form-help {
            display: block;
            margin-top: 4px;
            font-size: 12px;
            color: #666;
        }

        .modal-actions {
            display: flex;
            gap: 12px;
            justify-content: flex-end;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }

        .btn-primary,
        .btn-secondary {
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
            border: none;
        }

        .btn-primary {
            background: #31b14cff;
            color: white;
        }

        .btn-primary:hover {
            background: #218838;
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(40, 167, 69, 0.3);
        }

        .btn-secondary {
            background: #6c757d;
            color: white;
        }

        .btn-secondary:hover {
            background: #5a6268;
        }

        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes slideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .header-controls {
                flex-direction: column;
                gap: 8px;
                align-items: stretch;
            }
            
            .header-controls input,
            .header-controls button {
                width: 100%;
            }
            
            .modal-container {
                width: 95%;
                margin: 10px;
            }
            
            .modal-content {
                padding: 20px;
            }
        }
    </style>>

    Return sc
]]></Implementation>
</Method>

<Method name="Msg">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<style>
            #msg {
            margin-top: 10px;
            font-weight: bold;
            max-width: 600px;
            word-wrap: break-word;
            padding: 10px 12px;
            border-radius: 5px;
            background-color: #fefefe;
        }

        #msg .success {
            color: #2ecc71;
            background-color: #eafaf1;
            border: 1px solid #2ecc71;
        }

        #msg .error {
            color: #e74c3c;
            background-color: #fdecea;
            border: 1px solid #e74c3c;
        }
    </style>>

    Return sc
]]></Implementation>
</Method>

<Method name="ContentTreeViewer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<style>
        .container {
            width: 100%;
            max-width: none;
            margin: 0;
            background-color: #ffffff;
            border-radius: 6px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        
        .selection-info {
            padding: 12px 15px;
            background-color: #e8f8fbff;
            border-bottom: 1px solid #e0e4e8;
            font-size: 14px;
            color: #2c3e50;
        }
        
        .selected-count {
            font-weight: bold;
            color: #3498db;
        }
        
        .tree-wrapper {
            background-color: #ffffff;
        }
        
        .tree-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            border-bottom: 1px solid #e0e4e8;
            background: linear-gradient(135deg, #3c97ffff, #0d6bd7ff);
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .tree-header h3 {
            margin: 0;
            color: white;
            font-size: 16px;
            font-weight: 600;
            min-width: 0;
            flex-shrink: 1;
        }
        
        .tree-controls {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        
        .tree-controls button {
            padding: 8px 16px;
            background-color: #fefefe;
            color: #2c3e50;
            border: 1px solid #e0e4e8;
            border-radius: 15px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
            letter-spacing: 0.03em;
            transition: all 0.25s ease;
            white-space: nowrap;
        }
        
        .tree-controls button:hover {
            transform: translateY(-1px);
            background: linear-gradient(135deg, #3e5f81ff 0%, #34495e 100%);
            color: white;
            border-color: #2c3e50;
            box-shadow: 0 2px 5px rgba(44, 62, 80, 0.3);
        }
        
        .tree-controls button:active {
            transform: translateY(-1px) scale(1.01);
            box-shadow: 0 4px 15px rgba(44, 62, 80, 0.2);
        }

        .tree-controls button:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(44, 62, 80, 0.1),
                        0 4px 15px rgba(44, 62, 80, 0.2);
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .tree-header {
                flex-direction: column;
                align-items: stretch;
                text-align: center;
            }
            
            .tree-controls {
                justify-content: center;
            }
            
            .tree-controls button {
                flex: 1;
                min-width: 120px;
            }
        }
        
        @media (max-width: 480px) {
            .container {
                margin-top: 15px;
                border-radius: 4px;
            }
            
            .selection-info {
                padding: 10px 12px;
                font-size: 13px;
            }
            
            .tree-header {
                padding: 10px 12px;
            }
            
            .tree-header h3 {
                font-size: 14px;
            }
            
            .tree-controls {
                flex-direction: column;
                gap: 6px;
            }
            
            .tree-controls button {
                width: 100%;
                margin: 0;
                padding: 10px 16px;
                font-size: 14px;
            }
        }
        
        .tree-container {
            max-height: 600px;
            overflow-y: auto;
            padding: 0;
            background-color: #ffffff;
        }
        
        .tree-list {
            list-style: none;
            margin: 0;
            padding: 0;
        }
        
        .tree-item {
            list-style: none;
            margin: 0;
            padding: 0;
        }
        
        .tree-item-content {
            display: flex;
            align-items: center;
            padding: 4px 8px;
            cursor: pointer;
            min-height: 22px;
            border-bottom: 1px solid #f0f5fa;
            transition: background-color 0.2s ease;
        }
        
        .tree-item-content:hover {
            background-color: #f0f5fa;
        }
        
        .tree-toggle {
            width: 16px;
            height: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 4px;
            font-size: 12px;
            transition: transform 0.15s ease;
            color: #2c3e50;
        }
        
        .tree-checkbox {
            margin-right: 6px;
            margin-left: 0px;
        }
        
        .tree-icon {
            margin-right: 6px;
            font-size: 16px;
            vertical-align: middle;
            /*font-family: 'Material Icons';  /* Optional, but clarifies intention */
        }
        
        .tree-label {
            flex: 1;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            font-size: 14px;
            color: #2c3e50;
        }
        
        .tree-type {
            font-size: 11px;
            color: #555;
            margin-left: 0px;
            background-color: #e0e4e8;
            padding: 2px 6px;
            border-radius: 3px;
            font-weight: 500;
        }
        
        .tree-children {
            margin-left: 20px;
            display: none;
            list-style: none;
            padding: 2px 0 0 0;
        }
        
        .tree-item.expanded .tree-children {
            display: block;
        }
        
        /* Ensure nested collapsed items stay hidden */
        .tree-item:not(.expanded) .tree-children {
            display: none !important;
        }
        
        .tree-item.expanded .tree-toggle {
            transform: rotate(90deg);
        }
        
        /* Reset rotation for nested non-expanded items */
        .tree-item:not(.expanded) .tree-toggle {
            transform: rotate(0deg);
        }
        
        .search-container {
            padding: 10px 15px;
            border-bottom: 1px solid #3c3c3c;
        }
        
        .search-input {
            width: 100%;
            padding: 8px 10px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            background-color: #fbfffeff;
            box-sizing: border-box;
        }

        .search-input:focus {
            outline: none;
            border-color: #0e639c;
        }

        .edit-input {
            width: auto; /* Let size attribute control width */
            min-width: 400px; /* Fallback minimum width */
            padding: 8px 10px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            background-color: #fbfffeff;
            box-sizing: border-box;
        }

        .edit-input:focus {
            outline: none;
            border-color: #0e639c;
        }    

        .tree-select-children-btn {
            background: none;
            border: none;
            padding: 4px 6px;
            margin-left: 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 14px;
            color: #666;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 24px;
            height: 24px;
        }

        .tree-select-children-btn:hover {
            background-color: #e3f2fd;
            color: #1976d2;
            transform: scale(1.1);
        }

        .tree-select-children-btn:active {
            background-color: #bbdefb;
            transform: scale(0.95);
        }

        /* For folders that are expanded, show different visual state */
        .tree-item.folder.expanded .tree-select-children-btn {
            background-color: #f0f8ff;
        }

        /* Focus states for accessibility */
        .tree-select-children-btn:focus {
            outline: 2px solid #1976d2;
            outline-offset: 2px;
        }

        /* Different states based on selection */
        .tree-item.has-selected-children .tree-select-children-btn {
            color: #1976d2;
            background-color: #e3f2fd;
        }

        /* Animation for button press */
        @keyframes selectPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        .tree-select-children-btn.selecting {
            animation: selectPulse 0.3s ease-in-out;
        }

        /* Responsive behavior for mobile */
        @media (max-width: 768px) {
            .tree-select-children-btn {
                min-width: 28px;
                height: 28px;
                font-size: 16px;
            }
        }

        .tree-select-children-btn.icon-select-all-modern::before {
            content: '';
            display: inline-block;
            width: 16px;
            height: 16px;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'%3E%3Cpath d='M8 12l4 4 4-4'/%3E%3Cpath d='M8 6l4 4 4-4'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: center;
            background-size: contain;
        }

    </style>>
    Return sc
]]></Implementation>
</Method>

<Method name="AddClassesModal">
<Description>
CSS for Add Classes Modal </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<style>
        /* Add Classes Modal Overlay Styles */
        .add-classes-modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            display: none;
            backdrop-filter: blur(4px);
            animation: fadeIn 0.3s ease;
        }

        .add-classes-modal-container {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 1300px;
            height: 85%;
            max-height: 800px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        /* Add Classes Modal Header Styles */
        .add-classes-modal-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 10px;
            border-radius: 12px 12px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .add-classes-modal-title {
            font-size: 24px;
            font-weight: 600;
            margin: 0;
            color: #ffffffff
        }

        .add-classes-project-name {
            font-size: 18px;
            opacity: 0.9;
            margin-top: 5px;
        }

        .add-classes-close-btn {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            font-size: 24px;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.3s ease;
        }

        .add-classes-close-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        /* Add Classes Control Panel Styles */
        .add-classes-control-panel {
            background: #f8fafc;
            padding: 20px;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: nowrap;
            overflow-x: auto; /* Add horizontal scroll if needed */
        }

        .add-classes-control-group {
            display: flex;
            align-items: center;
            gap: 8px;
            white-space: nowrap; /* Prevent text wrapping */
            flex-shrink: 0; /* Prevent shrinking */
        }

        .add-classes-control-group label {
            font-weight: 500;
            color: #374151;
            font-size: 14px;
        }

        .add-classes-type-selector {
            padding: 6px 10px;
            border: 2px solid #d1d5db;
            border-radius: 8px;
            background: white;
            font-size: 13px;
            transition: border-color 0.3s ease;
            min-width: 120px; 
        }

        .add-classes-type-selector:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .add-classes-search-input {
            padding: 6px 10px;
            border: 2px solid #d1d5db;
            border-radius: 8px;
            background: white;
            font-size: 13px;
            min-width: 150px;
            transition: border-color 0.3s ease;
        }

        .add-classes-search-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .add-classes-btn {
            padding: 6px 12px;
            border: none;
            border-radius: 8px;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 4px;
            white-space: nowrap;
        }

        .add-classes-btn-primary {
            background: #667eea;
            color: white;
        }

        .add-classes-btn-primary:hover {
            transform: translateY(-1px);
            background: #5a6fd8;
        }

        .add-classes-btn-secondary {
            background: #e5e7eb;
            color: #374151;
        }

        .add-classes-btn-secondary:hover {
            background: #d1d5db;
        }

        .add-classes-btn-success {
            background: #10b981;
            color: white;
        }

        .add-classes-btn-success:hover {
            background: #059669;
            transform: translateY(-1px);
        }

        /* Add Classes Tree Content Styles */
        .add-classes-tree-content {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            background: white;
        }

        .add-classes-loading-message {
            text-align: center;
            color: #6b7280;
            font-style: italic;
            padding: 40px;
        }

        .add-classes-error-message {
            background: #fef2f2;
            border: 1px solid #fecaca;
            color: #dc2626;
            padding: 15px;
            border-radius: 8px;
            margin: 20px;
        }

        /* Add Classes Tree Styles */
        .add-classes-tree-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .add-classes-tree-item {
            margin: 0;
            padding: 0;
        }

        .add-classes-tree-item-content {
            display: flex;
            align-items: center;
            padding: 6px 8px;
            margin: 2px 0;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.2s ease;
        }

        .add-classes-tree-item-content:hover {
            background-color: #f3f4f6;
        }

        .add-classes-tree-toggle {
            width: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            color: #6b7280;
            cursor: pointer;
            transition: transform 0.15s ease;
        }

        .add-classes-tree-item.expanded .add-classes-tree-toggle {
            transform: rotate(90deg);
        }

        .add-classes-tree-checkbox {
            margin: 0 8px;
        }

        .add-classes-tree-icon {
            margin-right: 8px;
            font-size: 16px;
        }

        .add-classes-tree-label {
            flex: 1;
            font-weight: 500;
            font-size: 14px;
            color: #374151;
        }

        .add-classes-tree-type {
            background: #e5e7eb;
            color: #6b7280;
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
            text-transform: uppercase;
        }

        .add-classes-tree-children {
            list-style: none;
            padding-left: 20px;
            margin: 0;
            display: none;
        }

        .add-classes-tree-item.expanded .add-classes-tree-children {
            display: block;
        }

        .add-classes-tree-item.file .add-classes-tree-toggle {
            visibility: hidden;
        }

        /* Reset rotation for nested non-expanded items */
        .add-classes-tree-item:not(.expanded) .add-classes-tree-toggle {
            transform: rotate(0deg);
        }

        /* Add Classes Modal Footer Styles */
        .add-classes-modal-footer {
            background: #f8fafc;
            padding: 20px;
            border-top: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .add-classes-selection-info {
            color: #6b7280;
            font-weight: 500;
        }

        .add-classes-footer-actions {
            display: flex;
            gap: 12px;
        }

        @media (max-width: 1200px) {
            .add-classes-control-panel {
                flex-wrap: wrap;
            }
        }

        /* Add Classes Modal Responsive Design */
        @media (max-width: 768px) {
            .add-classes-modal-container {
                width: 95%;
                height: 90%;
            }

            .add-classes-control-panel {
                flex-direction: column;
                align-items: stretch;
                gap: 15px;
            }

            .add-classes-control-group {
                justify-content: space-between;
                flex-wrap: wrap;
            }

            .add-classes-search-input {
                min-width: auto;
                flex: 1;
            }
        }

        /* Fix toggle arrow rotation for expanded items */
        .add-classes-tree-item.expanded .add-classes-tree-toggle {
            transform: rotate(90deg);
        }

        /* Ensure nested collapsed items stay hidden */
        .add-classes-tree-item:not(.expanded) .add-classes-tree-children {
            display: none !important;
        }

        /* Reset rotation for nested non-expanded items */
        .add-classes-tree-item:not(.expanded) .add-classes-tree-toggle {
            transform: rotate(0deg);
        }

        .add-classes-checkbox {
            width: 16px;
            height: 16px;
            cursor: pointer;
        }

        .add-classes-checkbox-label {
            cursor: pointer;
            font-weight: 500;
            color: #333;
            user-select: none;
        }

        /* Select all children button styling */
        .add-classes-select-children-btn {
            background: none;
            border: none;
            padding: 4px 6px;
            margin-left: 8px;
            border-radius: 3px;
            cursor: pointer;
            font-size: 14px;
            color: #666;
            transition: all 0.2s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 24px;
            height: 24px;
        }

        .add-classes-select-children-btn:hover {
            background-color: #e3f2fd;
            color: #1976d2;
            transform: scale(1.1);
        }

        .add-classes-select-children-btn:active {
            background-color: #bbdefb;
            transform: scale(0.95);
        }

        /* Modern approach with SVG-like symbols */
        .add-classes-select-children-btn.icon-select-all-modern::before {
            content: '';
            display: inline-block;
            width: 16px;
            height: 16px;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'%3E%3Cpath d='M8 12l4 4 4-4'/%3E%3Cpath d='M8 6l4 4 4-4'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: center;
            background-size: contain;
        }

        /* For folders that are expanded, show different visual state */
        .add-classes-tree-item.folder.expanded .add-classes-select-children-btn {
            background-color: #f0f8ff;
        }

        /* Responsive behavior */
        @media (max-width: 768px) {
            .add-classes-select-children-btn {
                min-width: 28px;
                height: 28px;
                font-size: 16px;
            }
        }

        /* Tooltip enhancement */
        .add-classes-select-children-btn[title] {
            position: relative;
        }

        /* Focus states for accessibility */
        .add-classes-select-children-btn:focus {
            outline: 2px solid #1976d2;
            outline-offset: 2px;
        }

        /* Different states based on selection */
        .add-classes-tree-item.has-selected-children .add-classes-select-children-btn {
            color: #1976d2;
            background-color: #e3f2fd;
        }

        /* Animation for button press */
        @keyframes selectPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        .add-classes-select-children-btn.selecting {
            animation: selectPulse 0.3s ease-in-out;
        }
    </style>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.ContentViewerSection.HTML">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67451,32019.268350682</TimeChanged>
<TimeCreated>67443,59562.191291865</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    HTML Rendering
*/
]]></Content>
</UDLText>

<Method name="renderContentViewer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK

    // CSS
    Do ##class(PackageManager.UI.Screens.ContentViewerSection.CSS).RenderStyles()
    // JS 
    Do ##class(PackageManager.UI.Screens.ContentViewerSection.JavaScript).RenderJavaScript()
    // HTML Modals
    Do ##class(PackageManager.UI.Screens.ContentViewerSection.HTML).renderNewProjectModal()
    Do ##class(PackageManager.UI.Screens.ContentViewerSection.HTML).renderContentViewerTable()
    Do ##class(PackageManager.UI.Screens.ContentViewerSection.HTML).renderAddClassesToPrjModal()

    &html<<script language="javascript"> 
        function renderContentViewer() {
            // Projects List HTML with container design
            return `
                <h2><span class="icon-open-book"></span> Projects List</h2>
                <p>This shows the current list of all projects in the system. You can show their content and export them. </p>
                <p>You can create new projects and associate them with classes or files on the current namespace. </p>
                <div class='project-container' id ='projectContainer'>
                    <div class='project-header'>
                        <div class='project-title'>
                        <h3><span class="icon-open-book"></span> Projects List</h3>
                        </div>
                        <div class='header-controls'>
                        <input type='text' id='searchInput' placeholder='Search projects...' onkeyup='filterProjects()' />
                        <button type='button' onclick='showSelectedProjectContent()'>Show Project Content</button>
                        <button type='button' onclick='showSelectedProjectContent(true)'>Show All Projects Content</button>
                        <button type='button' onclick='exportSelectedProject()'>Export Selected Project</button>
                        <button class='new-project-btn' type='button' onclick='openNewProjectModal()' title='Add New Project'>
                            <span class='plus-icon'>+</span> New Project
                        </button>
                        </div>
                    </div>
                    <div class='project-content'>
                        <div class='project-table-wrapper'>
                            <table class='project-table'><thead>
                            </thead><tbody id='projectTableBody'></tbody></table>
                        </div>
                        <div id='msg' class='message'></div>
                        <div id='exportResult' class='message' style='margin-top: 15px;'></div>
                    </div>
                </div>

                <!-- New Project Modal HTML - to create a new project -->
                ${renderNewProjectModal()}

                <!-- Content Viewer Table -->
                ${renderContentViewerTable()}

                <!-- Add Classes Modal HTML - to add classes to a project -->
                ${renderAddClassesToPrjModal()}

            `;
        }
    </script>>

    Return sc
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
    Modals and content viewer Rendering
*/
]]></Content>
</UDLText>

<Method name="renderNewProjectModal">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language='javascript'>
        function renderNewProjectModal() {
            // New Project Modal HTML
            return `
                <div id='newProjectModal' class='modal-overlay'>
                    <div class='modal-container'>
                        <div class='modal-header'>
                            <h3><span class="icon-new"></span> Create New Project</h3>
                            <button class='modal-close' onclick='closeNewProjectModal()'>&times;</button>
                        </div>
                        <div class='modal-content'>
                            <form id='newProjectForm' onsubmit='createNewProject(event)'>
                                <div class='form-group'>
                                    <label for='projectName'>Project Name *</label>
                                    <input type='text' id='projectName' name='projectName' required 
                                        placeholder='Enter project name...' maxlength='64'>
                                    <small class='form-help'>Choose a unique name for your project</small>
                                </div>
                                <div class='form-group'>
                                    <label for='projectDescription'>Description</label>
                                    <textarea id='projectDescription' name='projectDescription' 
                                            placeholder='Enter project description...' rows='4' maxlength='500'></textarea>
                                    <small class='form-help'>Optional: Describe what this project is for</small>
                                </div>
                                <div class='modal-actions'>
                                    <button type='button' class='btn-secondary' onclick='closeNewProjectModal()'>Cancel</button>
                                    <button type='submit' class='btn-primary'>
                                        <span class='plus-icon'>+</span> Create Project
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            `;
        }
    </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="renderContentViewerTable">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language='javascript'>
        function renderContentViewerTable() {
            // Content Viewer HTML
            return `
                <h2><span class='icon-csp'></span> Projects Content Viewer</h2>  
                <p>This shows the project content. 'PKG' nodes are related to classes (cls, inc, mac), while 'DIR' are related to other files (like csp, js, css, etc.). </p>
                <p>You can remove selected classes from a project (without deleting it from the namespace) or export them into an XML file. </p>              
                <body>
                    <div class='container'>
                        <div class='selection-info'>
                            Select items in project content and export classes and files
                            <span class='selected-count' id='selectedCount'>0 Selected</span>
                        </div>
                    <div class='tree-wrapper'>
                            <div class='tree-header'>
                                <h3><span class='icon-folder-open'></span> Projects Content</h3>
                                <div class='tree-controls'>
                                    <button id='tree-expand-btn' type='button' onclick='expandAllTree()'>Expand All</button>
                                    <button id='tree-collapse-btn' type='button' onclick='collapseAllTree()'>Collapse All</button>
                                    <button id='tree-clear-btn' type='button' onclick='clearTreeSelection()'>Clear Selection</button>
                                    <button id='tree-export-btn' type='button' onclick='getSelectedProjectItems()'>Export Selected</button>
                                    <button id='tree-remove-items-btn' type='button' onclick='removeSelectedProjectItems()'>Remove Selected from Project</button>
                                </div>
                            </div>
                            <div class='search-container'>
                                <input 
                                    type='text' 
                                    id='treeSearchInput' 
                                    class='search-input'
                                    placeholder='Search files and classes...'
                                    oninput='filterProjectTree()'
                                />
                            </div>
                            <div class='tree-container'
                                <div id='container'>
                                        <!-- Tree content will be rendered here -->
                                </div>
                            </div>
                        </div>
                    </div>
            `;
        }
    </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="renderAddClassesToPrjModal">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language='javascript'>
        // Add Classes Modal HTML 
        function renderAddClassesToPrjModal() {
            return `
                <div id='addClassesModal' class='add-classes-modal-overlay'>
                    <div class='add-classes-modal-container'>
                        <div class='add-classes-modal-header'>
                            <div>
                                <h2 class='add-classes-modal-title'>Add Classes to Project</h2>
                                <div class='add-classes-project-name' id='modalProjectName'>Loading...</div>
                            </div>
                            <button class='add-classes-close-btn' onclick='closeAddClassesModal()'>&times;</button>
                        </div>
                        <div class='add-classes-control-panel'>
                            <div class='add-classes-control-group'>
                                <label for='fileTypeSelector'>File Type:</label>
                                <select id='fileTypeSelector' class='add-classes-type-selector'> // onchange='loadNamespaceContent()'>
                                    <option value=''>All Types</option>
                                    <option value='cls'>Classes (.cls)</option>
                                    <option value='inc'>Includes (.inc)</option>
                                    <option value='mac'>Macros (.mac)</option>
                                    <option value='js'>JavaScript (.js)</option>
                                    <option value='csp'>CSP Pages (.csp)</option>
                                    <option value='json'>JSON (.json)</option>
                                    <option value='abs'>Abstract (.abs)</option>
                                    <option value='dtl'>DTL (.dtl)</option>
                                    <option value='dfi'>DFI (.dfi)</option>
                                </select>
                            </div>
                            <div class='add-classes-control-group'>
                                <label></label>
                                <div class='add-classes-checkbox-group'>
                                    <input type='checkbox' id='excludeSystemClasses' class='add-classes-checkbox'>
                                    <label for='excludeSystemClasses' class='add-classes-checkbox-label' title='Exclude Intersystems IRIS default classes starting with the following prefixes: #($$$systemClassesToExclude)#'>
                                        Exclude System Classes</label>
                                </div>
                            </div>
                            <div class='add-classes-control-group'>
                                <label for='packageSearchInput'>Look Into:</label>
                                <input type='text' id='packageSearchInput' class='add-classes-search-input' placeholder='Look into package...'>
                            </div>
                            <div class='add-classes-control-group'>
                                <label for='namespaceSearchInput'>Search:</label>
                                <input type='text' id='namespaceSearchInput' class='add-classes-search-input' placeholder='Search classes...' onkeyup='filterNamespaceTree()'>
                            </div>
                            <div class='add-classes-control-group'>
                                <button class='add-classes-btn add-classes-btn-secondary' onclick='expandAllNamespaceTree()'>Expand All</button>
                                <button class='add-classes-btn add-classes-btn-secondary' onclick='collapseAllNamespaceTree()'>Collapse All</button>
                                <button class='add-classes-btn add-classes-btn-secondary' onclick='clearNamespaceSelection()'>Clear Selection</button>
                            </div>
                        </div>
                        <div class='add-classes-tree-content'>
                            <div id='namespaceContainer'>
                                <div class='add-classes-loading-message'>Select a file type and click 'Load Content' to begin</div>
                            </div>
                        </div>
                        <div class='add-classes-modal-footer'>
                            <div class='add-classes-selection-info'>
                                <span id='namespaceSelectedCount'>0 Selected</span>
                            </div>
                            <div class='add-classes-footer-actions'>
                                <button class='add-classes-btn add-classes-btn-primary' onclick='loadNamespaceContent()'><span class="icon-refresh"></span> Load Content</button>
                                <button class='add-classes-btn add-classes-btn-success' onclick='addSelectedToProject()'><span class="icon-plus"></span> Add to Project</button>
                                <button class='add-classes-btn add-classes-btn-secondary' onclick='closeAddClassesModal()'>Cancel</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
    </script>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.ContentViewerSection.JavaScript">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67451,31575.37520274</TimeChanged>
<TimeCreated>67443,59562.19714692</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    JAVASCRIPT
*/
]]></Content>
</UDLText>

<Method name="RenderJavaScript">
<Description>
Render JavaScript code for the page

This method generates the necessary JavaScript code for the page

# Notes
This method is responsible for rendering the JavaScript code that is used
to interact with the Content Viewer and Project List Section page UI components.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK

    // JavaScript
    Do ..EditProject()
    Do ..ExportProject()
    Do ..IconsHandler()
    Do ..AddClassesModal()
    Do ..NewProjectModal()
    Do ..ContentViewer()
    Do ..ProjectList()

    Return sc
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* 

    SCREENS JAVASCRIPT 

*/
]]></Content>
</UDLText>

<Method name="EditProject">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language="javascript"> 
        async function editProject(el) {
            const row = el.closest("tr");
            if (!row) return;

            const nameCell = row.children[1];
            const descCell = row.children[2];
            const actionsCell = row.children[4];

            const currentName = nameCell.textContent.trim();
            const currentDesc = descCell.textContent.trim();

            // Name must not be modified since it is equal to the id by default
            //nameCell.innerHTML = `<input type="text" value="${currentName}" />`;
            descCell.innerHTML = `<input class='edit-input' type="text" id="edit-desc-${currentName}" name="desc" placeholder="${currentDesc}" value="${currentDesc}" />`; // Description become modifiable

            // Modify fields as input fields to modify them and modify actions in order to save the modifications
            actionsCell.innerHTML = `
                <div class="actions">
                    <button title="Save" type="button" class="btn-icon icon-save" onclick="saveEditedProject(this, '${currentName}')"></button>
                    <button title="Cancel Operation" type="button" class="btn-icon icon-cancel" onclick="restoreRecord(this, '${currentDesc}')"></button>
                </div>
            `;
        }

        // This method restores the original project description and actions after editing.
        async function restoreRecord(el, NewDesc) {
            const row = el.closest("tr");
            if (!row) return;

            const nameCell = row.children[1];
            const descCell = row.children[2];
            const actionsCell = row.children[4];
            const projectName = nameCell.textContent.trim();

            // Set the new description
            descCell.innerHTML = `<td>${NewDesc}</td>`;

            // Ripristina icone azioni
            actionsCell.innerHTML = `
                <div class="actions">
                    <button title="Edit Description" type="button" class="btn-icon" onclick="editProject(this)"><span class="icon-edit"></span></button>
                    <button title="Add Classes To Project" type="button" class="btn-icon" onclick="addClasses(this)"><span class="icon-plus"></span></button>
                    <button title="Delete" type="button" class="btn-icon" onclick="confirmDeleteProject('${projectName}')"><span class="icon-delete"></span></button>
                </div>
            `;
        }

        // This method saves the edited project details to the server
        async function saveEditedProject(el, originalName) {
            const row = el.closest("tr");
            const name = row.children[1].innerHTML;
            const desc = row.children[2].querySelector("input").value;

            const updateData = { 
                "originalName":originalName, // Non permetti la modifica del name
                "desc":desc
            };

            PackageManagerAPI.updateProject(name,updateData)
                .then(function(response) {
                    alert("Project '"+name+"' updated successfully");
                    loadProjects();
                })
                .catch(function(err) {
                    alert("Error updating project: '"+err.message+"'");
                });        
         }

        async function confirmDeleteProject(name) {
            if (confirm('Are you sure you want to delete project "'+name+'" (project content will not be deleted)?')) {
                deleteProject(name);
            }
        }

        async function deleteProject(name) {
            PackageManagerAPI.deleteProject(name)
                .then(function(response) {
                    alert("Project '"+name+"' has been deleted");
                    loadProjects();
                })
                .catch(function(err) {
                    alert("Error deleting project: '"+ err.message+"'");
                });        
        }
    </script>>

    Return sc
]]></Implementation>
</Method>

<Method name="ExportProject">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language="javascript"> 
        async function exportSelectedProject() {
            const selected = document.querySelector("input[name='projCheckbox']:checked");
            if (!selected) {
                alert("Please select a project to export.");
                return;
            }

            const projectId = selected.value;

            PackageManagerAPI.exportProject(projectId)
                .then(function(data) {
                    // Create a Blob from the XML string
                    const blob = new Blob([data], { type: "application/xml" });

                    // Create a hidden download link and trigger it silently
                    const url = URL.createObjectURL(blob);

                    const a = document.createElement("a");
                    a.style.display = "none";
                    a.href = url;

                    // Current date time
                    const now = new Date();
                    const year = now.getFullYear();
                    const month = String(now.getMonth() + 1).padStart(2, '0');
                    const day = String(now.getDate()).padStart(2, '0');
                    const hours = String(now.getHours()).padStart(2, '0');
                    const minutes = String(now.getMinutes()).padStart(2, '0');
                    const seconds = String(now.getSeconds()).padStart(2, '0');

                    const timestamp = year + month + day + '_' + hours + ':' + minutes + ':' + seconds;

                    a.download = projectId + '_' + timestamp + '.xml' || "project_export.xml";

                    // Append to DOM, trigger click, then remove
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);

                    // Clean up blob URL
                    URL.revokeObjectURL(url);
                })
                .catch(function(err) {
                    const div = document.getElementById("exportResult");
                    div.innerHTML = `<p class='error'>Export failed: ${err.message}</p>`;
                });        
        }

        window.exportSelectedProject = exportSelectedProject;
    </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="IconsHandler">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language="javascript"> 
            function getIcon(type) {
                const icons = {
                    'CLS': 'icon-cls','cls': 'icon-cls', 'MAC': 'icon-mac', 'mac': 'icon-mac', 
                    'INC': 'icon-inc','inc': 'icon-inc', 'CSP': 'icon-csp', 'csp': 'icon-csp',
                    'CSS': 'icon-css', 'css': 'icon-css', 'JS': 'icon-js', 'js': 'icon-js',
                    'JSON': 'icon-json', 'json': 'icon-json', 'PNG': 'icon-png', 'png': 'icon-png',
                    'HTML': 'icon-html', 'html': 'icon-html', 'PKG': 'icon-package', 'DIR': 'icon-folder',
                    'ico': 'icon-email', 'JPG': 'icon-email', 'jpg': 'icon-email'
                };
                return icons[type] || 'icon-document';
            }
            /*
            Eventual Material Icons support
            function getIcon(type) {
                const icons = {
                    'CLS': 'book',
                    'MAC': 'description',
                    'INC': 'note',
                    'CSP': 'extension',
                    'CSS': 'palette',
                    'JS': 'Javascript',
                    'JSON': 'receipt',
                    'PNG': 'image',
                    'HTML': 'language',
                    'PKG': 'inventory',
                    'DIR': 'folder',
                    'TXT': 'article',
                    'XML': 'code',
                    'PDF': 'picture_as_pdf',
                    'MD': 'notes',
                    'YAML': 'data_object'
                };
                return icons[type.toUpperCase()] || 'insert_drive_file';
            }*/
    </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="ProjectList">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language="javascript"> 

        // Additional project management functions from your code
        let allProjects = [];

        // This method loads the list of projects from the server
        async function loadProjects() {
            const cacheStrategy = 'noCache';
            PackageManagerAPI.getProjects(cacheStrategy)
                .then(function(response) {
                    console.log('API is running:', response.message);
                    allProjects = response;
                    renderProjects(response);
                })
                .catch(function(err) {
                    const table_body = document.getElementById('projectTableBody');
                    table_body.innerHTML = `
                        <tr>
                            <td colspan="3" style="color:red; text-align:center;">
                                <span class="icon-cancel"></span> Error loading projects from database<br>
                                ${err.message}
                            </td>
                        </tr>
                    `;
                    console.error("Error while fetching projects:", err);
                });        
            }

        // This method renders the list of projects in the table
        async function renderProjects(projects) {
            const table = document.getElementById("projectTableBody");
            if (!table) {
                alert("Table does not exist")   
                return;
            }

            if (projects.length === 0) {
                table.innerHTML = `
                    <div class="loading">
                        <p><span class='icon-folder-open'></span> No projects found</p>
                        <p style="font-size: 14px; color: #64748b; margin-top: 8px;">Create a new project to start managing your code.</p>
                        <button class="btn-primary" onclick="openNewProjectModal()" style="margin-top: 12px;">
                            <span class="icon-plus"></span> Create New Project
                        </button>
                    </div>
                `;
                return;
            }
            
            table.innerHTML = "";
            // Table header
            table.innerHTML += `
                <tr>
                    <th>Select</th>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Last Modified</th>
                    <th>Actions</th>
                </tr>
            `;
            projects.forEach((project, index) => {
                const row = `<tr>
                    <td><input type="checkbox" name="projCheckbox" value="${project.name}" onclick="selectOnlyOne(this)"></td>
                    <td>${project.name}</td>
                    <td>${project.description}</td>
                    <td>${project.last_modified}</td>
                    <td>
                    <div class="actions">
                        <button title="Edit Description" type="button" class="btn-icon" onclick="editProject(this)"><span class="icon-edit"></span></button>
                        <button title="Add Classes To Project" type="button" class="btn-icon " onclick="addClasses(this)"><span class="icon-plus"></span></button>
                        <button title="Delete" type="button" class="btn-icon" onclick="confirmDeleteProject('${project.name}')"><span class="icon-delete"></span></button>
                    </div>
                    </td>
                </tr>`;
                table.innerHTML += row;
            });
        }

        function selectOnlyOne(checkbox) {
            document.querySelectorAll("input[name='projCheckbox']").forEach(cb => {
                if (cb !== checkbox) cb.checked = false;
            });
        }

        // This method filters the list of projects based on the search term.
        async function filterProjects() {
             const term = document.getElementById("searchInput").value.toLowerCase();
            const filtered = allProjects.filter(p =>
                p.name.toLowerCase().includes(term) ||
                p.description.toLowerCase().includes(term)
            );
            renderProjects(filtered);
        }

    </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="ContentViewer">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language="javascript"> 

        // This method get all the content of a project and render the tree view
        async function showSelectedProjectContent(showAll = false, projectId = null) {
            let idToLoad = null;

            if (!showAll) {
                if (projectId) {
                    idToLoad = projectId;
                } else {
                    const selected = document.querySelector("input[name='projCheckbox']:checked");
                    if (!selected) {
                        alert("Please select a project.");
                        return;
                    }
                    idToLoad = selected.value;
                }
            }

            PackageManagerAPI.getProjectContent(idToLoad)
                .then(function(json) {
                    // Raise an alert if the project is empty
                    if (Object.keys(json).length === 0) {
                        throw new Error("The project is empty.");
                    }                    

                    // Store the original data for filtering
                    window.originalProjectData = json;
                    window.currentProjectData = json;

                    // Reset search field if exists
                    const searchInput = document.getElementById('treeSearchInput');
                    if (searchInput) searchInput.value = '';

                    // Render new tree
                    renderFolderTree(json, "container");

                    // Mark as exported
                    window.exported = 1;
                })
                .catch(function(err) {
                    console.error("Error loading project content:", err);
                    alert("Error loading project content: " + err.message);
                });        
        }

        // Global array to track selected items persistently
        window.persistentTreeSelectedItems = [];
        window.projectPackageSelections = []; // Track packages selected as packages
        window.projectClassSelections = []; // Track individual classes selected

        // Get all leaf paths under a node
        function getAllProjectLeafPaths(nodeData, basePath) {
            const leafPaths = [];
            
            function traverse(obj, currentPath) {
                for (const key in obj) {
                    // skip unwanted key
                    if (key === "*project-item") continue;

                    const value = obj[key];
                    if (!value) continue;
                    
                    const fullPath = currentPath ? `${currentPath}.${key}` : key;
                    
                    if (isLeafNode(value)) {
                        leafPaths.push(fullPath);
                    } else {
                        traverse(value, fullPath);
                    }
                }
            }
            
            traverse(nodeData, basePath);
            return leafPaths;
        }

        function isLeafNode(node) {
            return node && typeof node === 'object' && 'name' in node && 'type' in node;
        }

        // This method renders the folder tree for the project content
        function renderFolderTree(data, containerId = "container") {
            const container = document.getElementById(containerId);
            if (!container) {
                alert("Container not found:", containerId);
                return;
            }
            
            // Store current data globally
            window.currentProjectData = data;
            
            container.innerHTML = '';

            function createTreeItem(key, value, path = '') {
                const fullPath = path ? `${path}.${key}` : key;
                const li = document.createElement('li');
                li.className = 'tree-item';
                li.title = fullPath;

                const itemContent = document.createElement('div');
                itemContent.className = 'tree-item-content';

                // Folder toggle arrow
                const toggle = document.createElement('span');
                toggle.className = 'tree-toggle icon-right-arrow';
                itemContent.appendChild(toggle);
                toggle.title = fullPath;

                // Checkbox
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'tree-checkbox';
                checkbox.value = fullPath;
                checkbox.placeholder = false;
                checkbox.id = 'tree-checkbox-'+fullPath;

                // Add leaf count as data attribute for folders
                if (isLeafNode(value)) {
                    // For leaf nodes (classes), checkbox selects the individual class
                    checkbox.setAttribute('data-leaf', 'true');
                    checkbox.addEventListener('change', (e) => {
                        e.stopPropagation();
                        handleProjectClassSelection(fullPath, checkbox.checked);
                    });
                } else {
                    // For folder nodes (packages), checkbox selects the package
                    checkbox.setAttribute('data-leaf', 'false');
                    checkbox.addEventListener('change', (e) => {
                        e.stopPropagation();
                        handleProjectPackageSelection(fullPath, checkbox.checked, value);
                    });
                }

                itemContent.appendChild(checkbox);

                if (isLeafNode(value)) {
                    // File node
                    li.classList.add('file');
                    toggle.style.visibility = 'hidden';
                    
                    const icon = document.createElement('span');
                    icon.className = "tree-icon "+getIcon(value.type);
                    itemContent.appendChild(icon);

                    const label = document.createElement('span');
                    label.className = 'tree-label';
                    label.textContent = value.name;
                    itemContent.appendChild(label);

                    const type = document.createElement('span');
                    type.className = 'tree-type';
                    type.textContent = value.type.toLowerCase();
                    itemContent.appendChild(type);

                    li.appendChild(itemContent);
                } else {
                    // Folder node
                    li.classList.add('folder');
                    let is_pkg = true
                    const icon = document.createElement('span');
                    // If the icon is related to the project name (not a folder) use a different icon
                    let curr_icon = 'icon-folder-open'
                    if (!path) {
                        curr_icon = 'icon-bag'
                        checkbox.hidden=true
                        is_pkg = false
                    } 
                    if (key === 'DIR') {
                        curr_icon = 'icon-folder'
                        checkbox.hidden=true
                        is_pkg = false
                    } 
                    if (key === 'PKG') {
                        curr_icon = 'icon-package'
                        checkbox.hidden=true
                        is_pkg = false
                    } 

                    // Verify if the package is directly associated with the project (i.e. is a project item itself)
                    if (is_pkg === true) {
                        const prj_item_icon = document.createElement('span');
                        if (value && value.hasOwnProperty("*project-item")) {
                            // Show an icon to indicate that the package is directly associated with the project
                            prj_item_icon.className = "icon-lightbulb";
                            prj_item_icon.title = "This package is a project item. All classes in this package will be directly associated with the project. It is not possible to add or remove classes from a package that is a project item, but it is possible to add or remove the package itself.";
                        } else {
                            prj_item_icon.className = "icon-blackcircle";
                            prj_item_icon.title = "This package is not a project item. It is possible that not all classes in this package are directly associated with the project. It is possible to add or remove classes from this package, but it is not possible to add or remove the package itself.";
                        }
                        itemContent.appendChild(prj_item_icon);
                    }

                    icon.className = "tree-icon "+curr_icon;
                    itemContent.appendChild(icon);

                    const label = document.createElement('span');
                    label.className = 'tree-label';
                    label.textContent = key;
                    itemContent.appendChild(label);

                    // Add "select all children" icon button
                    const selectChildrenBtn = document.createElement('button');
                    selectChildrenBtn.className = 'tree-select-children-btn icon-select-all';
                    selectChildrenBtn.title = 'Select all children as individual classes';
                    selectChildrenBtn.addEventListener('click', (e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        handleProjectSelectAllChildren(fullPath, value);
                    });
                    itemContent.appendChild(selectChildrenBtn);

                    // Click handler for folder expansion
                    itemContent.addEventListener('click', (e) => {
                        if (e.target === checkbox || e.target === selectChildrenBtn) return;
                        e.preventDefault();
                        e.stopPropagation();
                        
                        const wasExpanded = li.classList.contains('expanded');
                        if (wasExpanded) {
                            li.classList.remove('expanded');
                        } else {
                            li.classList.add('expanded');
                        }
                    });

                    // Create children
                    const childrenContainer = document.createElement('ul');
                    childrenContainer.className = 'tree-children';

                    for (const childKey in value) {
                        // skip unwanted key
                        if (childKey === "*project-item") continue;

                        if (value[childKey]) {
                            const childItem = createTreeItem(childKey, value[childKey], fullPath);
                            childrenContainer.appendChild(childItem);
                        }
                    }

                    li.appendChild(itemContent);
                    li.appendChild(childrenContainer);
                }

                return li;
            }

            // Handle individual class selection
            function handleProjectClassSelection(classPath, selected) {
                if (selected) {
                    if (!window.projectClassSelections.includes(classPath)) {
                        window.projectClassSelections.push(classPath);
                    }
                    // Remove from persistent array if present (legacy compatibility)
                    const legacyIdx = window.persistentTreeSelectedItems.indexOf(classPath);
                    if (legacyIdx !== -1) {
                        window.persistentTreeSelectedItems.splice(legacyIdx, 1);
                    }
                } else {
                    const idx = window.projectClassSelections.indexOf(classPath);
                    if (idx !== -1) {
                        window.projectClassSelections.splice(idx, 1);
                    }
                }
                updateSelectedCount();
            }

            // Handle package selection (selects the package as a whole)
            function handleProjectPackageSelection(packagePath, selected, packageData) {
                if (selected) {
                    // Add package to package selections
                    if (!window.projectPackageSelections.includes(packagePath)) {
                        window.projectPackageSelections.push(packagePath);
                    }
                    
                    // Remove any individual children from class selections since the package is selected
                    const allChildren = getAllProjectLeafPaths(packageData, packagePath);
                    allChildren.forEach(childPath => {
                        const idx = window.projectClassSelections.indexOf(childPath);
                        if (idx !== -1) {
                            window.projectClassSelections.splice(idx, 1);
                        }
                        // Uncheck individual child checkboxes
                        const childCheckbox = document.querySelector(`input[value="${childPath}"]`);
                        if (childCheckbox) {
                            childCheckbox.checked = false;
                        }
                    });
                    
                } else {
                    // Remove package from package selections
                    const idx = window.projectPackageSelections.indexOf(packagePath);
                    if (idx !== -1) {
                        window.projectPackageSelections.splice(idx, 1);
                    }
                }
                updateSelectedCount();
            }

            // Handle "select all children" button click
            function handleProjectSelectAllChildren(packagePath, packageData) {
                const allChildren = getAllProjectLeafPaths(packageData, packagePath);
                
                // Remove package selection if it exists
                const packageIdx = window.projectPackageSelections.indexOf(packagePath);
                if (packageIdx !== -1) {
                    window.projectPackageSelections.splice(packageIdx, 1);
                    // Uncheck package checkbox
                    const packageCheckbox = document.querySelector(`input[value="${packagePath}"]`);
                    if (packageCheckbox) {
                        packageCheckbox.checked = false;
                    }
                }
                
                // Add all children to individual selections
                allChildren.forEach(childPath => {
                    if (!window.projectClassSelections.includes(childPath)) {
                        window.projectClassSelections.push(childPath);
                    }
                    // Check individual child checkboxes
                    const childCheckbox = document.querySelector(`input[value="${childPath}"]`);
                    if (childCheckbox) {
                        childCheckbox.checked = true;
                    }
                });
                
                updateSelectedCount();
            }

            function updateSelectedCount() {
                const individualCount = window.projectClassSelections.length;
                const packageCount = window.projectPackageSelections.length;
                const totalDisplayCount = individualCount + packageCount;
                
                // Update legacy persistent array for backward compatibility
                window.persistentTreeSelectedItems = combineAll(window.projectPackageSelections, window.projectClassSelections);
                
                const countElement = document.getElementById('selectedCount');
                if (countElement) {
                    if (packageCount > 0) {
                        countElement.textContent = `${totalDisplayCount} Selected (${packageCount} packages, ${individualCount} individual)`;
                        countElement.title = window.persistentTreeSelectedItems.join(', ');
                    } else {
                        countElement.textContent = `${totalDisplayCount} Selected`;
                        countElement.title = window.persistentTreeSelectedItems.join(', ');
                    }
                }
            }

            // This method expands all folders in the folder tree
            window.expandAllTree = function() {
                if (!window.exported) {
                    alert('Show at least a project before');
                    return;
                }
                container.querySelectorAll('.tree-item.folder').forEach(item => {
                    item.classList.add('expanded');
                });
            };

            // This method collapses all folders in the folder tree
            window.collapseAllTree = function() {
                if (!window.exported) {
                    alert('Show at least a project before');
                    return;
                }
                container.querySelectorAll('.tree-item.folder').forEach(item => {
                    item.classList.remove('expanded');
                });
            };

            // Function to ask API to export an xml with the selected classes or packages
            window.getSelectedProjectItems = async function() {
                const expandedSelection = [];
                
                if (window.persistentTreeSelectedItems.length == 0) {
                    alert("Please select at least an element to export");
                    return;
                }

                // Get the export button and save original text
                const exportButton = document.getElementById('tree-export-btn');
                const originalText = exportButton.textContent;
                
                // Set loading state
                exportButton.textContent = 'Exporting...';
                exportButton.disabled = true;

                try {
                    window.persistentTreeSelectedItems.forEach(path => {
                        const item = findItemByPath(window.currentProjectData, path);
                        if (item && isLeafNode(item)) {
                            expandedSelection.push({
                                path: path,
                                name: item.name,
                                type: item.type,
                                isLeaf: true
                            });
                        }                     
                        // Skip folder selections - only export explicitly selected leaf nodes
                    });

                    class_array = []
                    expandedSelection.forEach(item => {
                        // Check if current item is a class (PKG) or a file (DIR)
                        // Rendered items are always separated by a point ('.')
                        let item_parts = item.path.split(".");
                        if (item_parts[1]=='DIR'){ 
                            item_parts.splice(0, 2); // Remove the first two elements
                            // Directory files should be sent to the API separated by a slash
                            item.path = item_parts.join('/')
                        } else if (item_parts[1]=='PKG') {
                            item_parts.splice(0, 2); // Removes the first two elements
                            // Package items should be sent to the API separated by a point
                            item.path = item_parts.join('.')
                        }
                        const item_fullname = item.path+'.'+item.type.toLowerCase();
                        // Push the current item within the array
                        class_array.push({
                            "name": item_fullname
                        })
                    });

                    const classData = { "elements": class_array }
                    PackageManagerAPI.exportClasses(classData)
                        .then(function(data) {
                            // Create a Blob from the XML string
                            const blob = new Blob([data], { type: "application/xml" });

                            // Create a hidden download link and trigger it silently
                            const url = URL.createObjectURL(blob);
                            const a = document.createElement("a");
                            a.style.display = "none";
                            a.href = url;

                            // Current date time
                            const now = new Date();
                            const year = now.getFullYear();
                            const month = String(now.getMonth() + 1).padStart(2, '0');
                            const day = String(now.getDate()).padStart(2, '0');
                            const hours = String(now.getHours()).padStart(2, '0');
                            const minutes = String(now.getMinutes()).padStart(2, '0');
                            const seconds = String(now.getSeconds()).padStart(2, '0');

                            const timestamp = year + month + day + '_' + hours + ':' + minutes + ':' + seconds;

                            a.download = 'class_export_' + timestamp + '.xml';

                            // Append to DOM, trigger click, then remove
                            document.body.appendChild(a);
                            a.click();
                            document.body.removeChild(a);

                            // Clean up blob URL
                            URL.revokeObjectURL(url);
                        })
                        .catch(function(err) {
                            alert(`"Export failed: ${err.message}"`);
                        });        
                        
                    return expandedSelection;
                    
                } catch (error) {
                    // Handle any errors that might occur
                    console.error('Export error:', error);
                    alert('Export failed: ' + error.message);
                } finally {
                    // Always restore the button state, even if an error occurs
                    exportButton.textContent = originalText;
                    exportButton.disabled = false;
                }
            };

            // Function to ask API to remove the selected classes or packages from the project
            window.removeSelectedProjectItems = async function() {
                if (window.projectPackageSelections.length === 0 && window.projectClassSelections.length === 0) {
                    alert("Please select at least an element to remove");
                    return;
                }

                // Check for conflicts between package and class selections
                const conflicts = [];
                
                for (const pkg of window.projectPackageSelections) {
                    for (const cls of window.projectClassSelections) {
                        if (cls.startsWith(pkg + ".")) {
                            conflicts.push({ package: pkg, class: cls });
                        }
                    }
                }

                if (conflicts.length > 0) {
                    let conflictMessage = "Conflict detected: You cannot select both packages and their individual classes for removal.\n\nConflicts found:\n";
                    conflicts.forEach(conflict => {
                        conflictMessage += `â¢ Package "${conflict.package}" and class "${conflict.class}"\n`;
                    });
                    conflictMessage += "\nPlease select either packages or their individual classes, not both.";
                    alert(conflictMessage);
                    return;
                }

                const projectId = getCommonPrefix(combineAll(window.projectPackageSelections, window.projectClassSelections));
                if (projectId === null) {
                    alert("Please remove items from one project at a time.");
                    return;
                }

                const totalItems = window.projectPackageSelections.length + window.projectClassSelections.length;
                if (!confirm("Do you really want to remove " + totalItems + " elements from project '" + projectId + "'?")) {
                    return;
                }

                const expandedSelection = [];
                
                // Process package selections
                window.projectPackageSelections.forEach(packagePath => {
                    //const packageData = findItemByPath(window.currentProjectData, packagePath);
                    if (packageData && !isLeafNode(packageData)) {
                        expandedSelection.push({
                            path: packagePath
                        });
                        //const leafItems = getAllLeafNodes(packageData, packagePath);
                        //leafItems.forEach(leafItem => {
                        //    expandedSelection.push(leafItem);
                        //});
                    }
                });

                // Process individual class selections
                window.projectClassSelections.forEach(classPath => {
                    const item = findItemByPath(window.currentProjectData, classPath);
                    if (item && isLeafNode(item)) {
                        expandedSelection.push({
                            path: classPath,
                            name: item.name,
                            type: item.type,
                            isLeaf: true
                        });
                    }
                });

                class_array = []
                expandedSelection.forEach(item => {
                    // Check if current item is a class (PKG) or a file (DIR)
                    // Rendered items are always separated by a point ('.')
                    let item_parts = item.path.split(".");
                    if (item_parts[1]=='DIR'){ 
                        item_parts.splice(0, 2); // Remove the first two elements
                        // Directory files should be sent to the API separated by a slash
                        item.path = item_parts.join('/')
                    } else if (item_parts[1]=='PKG') {
                        item_parts.splice(0, 2); // Removes the first two elements
                        // Package items should be sent to the API separated by a point
                        item.path = item_parts.join('.')
                    }
                    let item_type = '';
                    if (item && item.hasOwnProperty("type")) {
                        item_type = item.type.toLowerCase()
                    } 
                    const item_fullname = item_type==='' ? item.path : item.path+'.'+item_type;
                    // Push the current item within the array
                    if (item_type==='') {
                        class_array.push({
                            "name": item_fullname,
                            "type": 'PKG' // specify the type as 'PKG' for the packages
                        })
                    } else {
                        class_array.push({
                            "name": item_fullname
                        })
                    }
                });
    
                const classes_to_remove = { "elements": class_array }
                PackageManagerAPI.removeClassesFromProject(projectId, classes_to_remove)
                    .then(function(response) {
                        alert("Elements have been successfully removed from the project");
                        // Reload table to show the updated project content
                        showSelectedProjectContent(false, projectId);
                        // Initialize the arrays of the selected items
                        window.projectPackageSelections = [];
                        window.projectClassSelections = [];
                        window.persistentTreeSelectedItems = [];
                        updateSelectedCount();
                    })
                    .catch(function(err) {
                        alert(`Failed to remove items from project: ${err.message}`);
                    });        
            };

            // Get project name from item node name
            function getCommonPrefix(arr) {
                const prefixes = new Set();

                for (const item of arr) {
                    const prefix = item.split('.')[0];
                    prefixes.add(prefix);
                }

                if (prefixes.size === 1) {
                    let prefixes_array = toArray(prefixes);
                    return prefixes_array[0];  // The only unique prefix
                } else {
                    return null;  // Multiple different prefixes
                }
            }

            // Helper functions for selection
            function findItemByPath(data, path) {
                const pathParts = path.split('.');
                let current = data;
                
                for (const part of pathParts) {
                    if (current && current[part]) {
                        current = current[part];
                    } else {
                        return null;
                    }
                }
                
                return current;
            }

            // Function to get all leaf nodes from a given node 
            function getAllLeafNodes(node, basePath = '') {
                const leafNodes = [];
                
                function traverse(obj, currentPath) {
                    for (const key in obj) {
                        // skip unwanted key
                        if (key === "*project-item") continue;

                        const value = obj[key];
                        if (!value) continue;
                        
                        const fullPath = currentPath ? `${currentPath}.${key}` : key;
                        
                        if (isLeafNode(value)) {
                            leafNodes.push({
                                path: fullPath,
                                name: value.name,
                                type: value.type,
                                isLeaf: true
                            });
                        } else {
                            traverse(value, fullPath);
                        }
                    }
                }
                
                traverse(node, basePath);
                return leafNodes;
            }
            
            // Search/filter functionality
            window.filterProjectTree = function() {
                const searchInput = document.getElementById('treeSearchInput');
                if (!searchInput) return;
                
                const searchTerm = searchInput.value.toLowerCase().trim();
                
                if (!searchTerm) {
                    renderFolderTree(window.originalProjectData, containerId);
                } else {
                    const filteredData = filterProjectData(window.originalProjectData, searchTerm);
                    renderFolderTree(filteredData, containerId);
                    setTimeout(() => { window.expandAllTree(); }, 100);
                }                
            };

            // Restore selections from state
            function restoreProjectSelectionsFromState() {
                const container = document.getElementById(containerId || "container");
                if (!container) return;
                                
                // Restore package selections
                window.projectPackageSelections.forEach(path => {
                    const checkbox = container.querySelector(`input[value="${path}"]`);
                    if (checkbox) {
                        checkbox.checked = true;
                    }
                });
                
                // Restore individual class selections
                window.projectClassSelections.forEach(path => {
                    const checkbox = container.querySelector(`input[value="${path}"]`);
                    if (checkbox) {
                        checkbox.checked = true;
                    }
                });
                
                updateSelectedCount();
            }

            // Update the clear selection function to also clear new arrays
            window.clearTreeSelection = function() {
                window.persistentTreeSelectedItems = []; // Clear persistent array too
                window.projectPackageSelections = [];
                window.projectClassSelections = [];
                const container = document.getElementById(containerId || "container");
                if (container) {
                    container.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                        cb.checked = false;
                    });
                }
                updateSelectedCount();
            };

            // Function to filter project data based on search term
            function filterProjectData(data, searchTerm) {
                // Set to track visited nodes and prevent infinite recursion
                const visitedNodes = new WeakSet();

                function nodeMatches(node, key) {
                    if (isLeafNode(node)) {
                        return node.name.toLowerCase().includes(searchTerm) || 
                            node.type.toLowerCase().includes(searchTerm) ||
                            key.toLowerCase().includes(searchTerm);
                    } else {
                        return key.toLowerCase().includes(searchTerm);
                    }
                }

                function findMatchingPaths(node, key, currentPath = []) {
                    // Prevent infinite recursion by checking if we've already visited this node
                    if (visitedNodes.has(node)) {
                        return [];
                    }

                    // Mark this node as visited
                    visitedNodes.add(node);

                    const fullPath = currentPath.concat([key]);
                    const matches = [];

                    if (nodeMatches(node, key)) {
                        matches.push({
                            path: fullPath,
                            node: node,
                            isDirectMatch: true
                        });
                    }

                    if (!isLeafNode(node) && typeof node === 'object' && node !== null) {
                        for (const childKey in node) {
                            // Skip unwanted keys and null/undefined values
                            if (childKey === "*project-item" || !node[childKey]) {
                                continue;
                            }

                            if (typeof node[childKey] === 'object' && node[childKey] !== null) {
                                const childMatches = findMatchingPaths(node[childKey], childKey, fullPath);
                                pushAll(matches, childMatches);
                            }
                        }
                    }

                    return matches;
                }

                function buildFilteredTree(matches) {
                    const tree = {};

                    matches.forEach(match => {
                        let current = tree;
                        
                        for (let i = 0; i < match.path.length; i++) {
                            const pathSegment = match.path[i];
                            
                            if (i === match.path.length - 1) {
                                current[pathSegment] = match.node;
                            } else {
                                if (!current[pathSegment]) {
                                    current[pathSegment] = {};
                                }
                                current = current[pathSegment];
                            }
                        }
                    });

                    return tree;
                }

                const allMatches = [];
                for (const key in data) {
                    if (data[key] && typeof data[key] === 'object') {
                        const matches = findMatchingPaths(data[key], key);
                        pushAll(allMatches, matches);
                    }
                }

                const filteredTree = buildFilteredTree(allMatches);

                allMatches.forEach(match => {
                    if (match.isDirectMatch && !isLeafNode(match.node)) {
                        let current = filteredTree;
                        for (let i = 0; i < match.path.length - 1; i++) {
                            if (!current[match.path[i]]) {
                                current[match.path[i]] = {};
                            }
                            current = current[match.path[i]];
                        }
                        const lastSegment = match.path[match.path.length - 1];
                        current[lastSegment] = match.node;
                    }
                });

                return filteredTree;
            }

            // Render the tree
            const ul = document.createElement('ul');
            ul.className = 'tree-list';

            for (const key in data) {
                if (data[key]) {
                    const item = createTreeItem(key, data[key]);
                    ul.appendChild(item);
                }
            }

            container.appendChild(ul);            
        }

    </script>>

    Return sc
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/* 

    MODALS JAVASCRIPT 

*/
]]></Content>
</UDLText>

<Method name="AddClassesModal">
<Description>
Add Classes Modal JavaScript </Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language="javascript"> 
        // Global variables for Add Classes Modal (separate from existing project tree)
        let currentAddProjectName = '';
        let originalNamespaceData = null;
        let currentNamespaceData = null;
        let packageSelections = []; // Track packages selected as packages
        let childrenSelections = []; // Track individual children selected

        window.persistentNamespaceSelectedItems = [];

        function isLeafNodeNamespace(node) {
            return node && typeof node === 'object' && 'name' in node && 'type' in node;
        }

        // Get all leaf paths under a node
        function getAllLeafPaths(nodeData, basePath) {
            const leafPaths = [];
            
            function traverse(obj, currentPath) {
                
                for (const key in obj) {
                    const value = obj[key];
                    if (!value) continue;
                    
                    const fullPath = currentPath ? `${currentPath}.${key}` : key;
                    
                    if (isLeafNodeNamespace(value)) {
                        leafPaths.push(fullPath);
                    } else {
                        traverse(value, fullPath);
                    }
                }
            }
            
            traverse(nodeData, basePath);
            return leafPaths;
        }

        // Main function to open the Add Classes modal
        function addClasses(element) {
            const row = element.closest("tr");
            if (!row) return;
            
            const projectName = row.children[1].textContent.trim();
            currentAddProjectName = projectName;
            
            document.getElementById('modalProjectName').textContent = projectName;
            document.getElementById('addClassesModal').style.display = 'block';
            
            // Reset the modal state
            resetAddClassesModalState();
        }

        function closeAddClassesModal() {
            document.getElementById('addClassesModal').style.display = 'none';
        }

        function resetAddClassesModalState() {
            document.getElementById('fileTypeSelector').value = '';
            document.getElementById('packageSearchInput').value = '';
            document.getElementById('namespaceSearchInput').value = '';
            document.getElementById('namespaceContainer').innerHTML = '<div class="add-classes-loading-message">Select a file type and click "Load Content" to begin</div>';
            
            // Reset all selection arrays
            packageSelections = [];
            childrenSelections = [];
            window.persistentNamespaceSelectedItems = [];
            
            updateNamespaceSelectedCount();
            originalNamespaceData = null;
            currentNamespaceData = null;
        }

        // Load namespace content based on selected type
        async function loadNamespaceContent() {
            let fileType = document.getElementById('fileTypeSelector').value;
            const container = document.getElementById('namespaceContainer');
            const exclude_system_classes = document.getElementById('excludeSystemClasses').checked;
            const lookInto = document.getElementById('packageSearchInput').value;
            const lookIntoKey = 'PackageName';

            container.innerHTML = '<div class="add-classes-loading-message icon-hourglass">Loading namespace content...</div>';
                            
            PackageManagerAPI.getNamespaceContent(fileType,lookInto,exclude_system_classes)
                .then(function(data) {
                    // Store the data
                    originalNamespaceData = data;
                    currentNamespaceData = data;
                    
                    // Clear search
                    document.getElementById('namespaceSearchInput').value = '';
                    
                    // Clear previous selections
                    window.persistentNamespaceSelectedItems = [];
                    
                    // Render the tree
                    renderNamespaceTree(data, 'namespaceContainer');
                })
                .catch(function(err) {
                    console.error('Error loading namespace content:', err.message);
                    container.innerHTML = `<div class="add-classes-error-message">Error loading content: ${err.message}</div>`;
                });        
        }

        // Render the namespace tree 
        // Modified render function with separate selection logic
        function renderNamespaceTree(data, containerId) {
            const container = document.getElementById(containerId);
            if (!container) return;
            
            container.innerHTML = '';
            currentNamespaceData = data;

            function createNamespaceTreeItem(key, value, path = '') {
                try {
                    const fullPath = path ? `${path}.${key}` : key;
                    const li = document.createElement('li');
                    li.className = 'add-classes-tree-item';
                    li.title = fullPath;

                    const itemContent = document.createElement('div');
                    itemContent.className = 'add-classes-tree-item-content';

                    // Folder toggle arrow
                    const toggle = document.createElement('span');
                    toggle.className = 'add-classes-tree-toggle icon-right-arrow';
                    itemContent.appendChild(toggle);
                    toggle.title = fullPath;

                    const formats_array = ['csp', 'cls', 'inc', 'mac', 'other'];

                    // Checkbox for package/class selection
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.className = 'add-classes-tree-checkbox';
                    checkbox.value = fullPath;
                    checkbox.id = 'namespace-checkbox-' + fullPath;

                    if (formats_array.includes(fullPath.toLowerCase())) {
                        // Hide the checkbox for non-file types   
                        checkbox.style.display = 'none';   
                        checkbox.disabled = true;
                    }

                    if (isLeafNodeNamespace(value)) {
                        // For leaf nodes (classes), checkbox selects the individual class
                        checkbox.setAttribute('data-leaf', 'true');
                        checkbox.addEventListener('change', (e) => {
                            e.stopPropagation();
                            handleClassSelection(fullPath, checkbox.checked);
                        });
                    } else {
                        // For folder nodes (packages), checkbox selects the package
                        checkbox.setAttribute('data-leaf', 'false');
                        checkbox.addEventListener('change', (e) => {
                            e.stopPropagation();
                            handlePackageSelection(fullPath, checkbox.checked, value);
                        });
                    }
                    
                    itemContent.appendChild(checkbox);

                    if (isLeafNodeNamespace(value)) {
                        // File node
                        li.classList.add('file');
                        toggle.style.visibility = 'hidden';
                        
                        const icon = document.createElement('span');
                        icon.className = 'add-classes-tree-icon '+getIcon(value.type);
                        itemContent.appendChild(icon);

                        const label = document.createElement('span');
                        label.className = 'add-classes-tree-label';
                        label.textContent = value.name;
                        itemContent.appendChild(label);

                        const type = document.createElement('span');
                        type.className = 'add-classes-tree-type';

                        let typeValue;
                        if (typeof value.type === 'object' && value.type !== null && 'type' in value.type) {
                            typeValue = value.type.type;
                        } else {
                            typeValue = value.type;
                        }

                        const validTypes = [
                                'csp', 'cls', 'inc', 'mac','js','json'
                                ,'abs','dtl','dfi','css','png','html'
                                ,'pkg','dir','ico','jpg'
                        ];

                        if (typeValue) {
                            type.textContent = typeValue.toLowerCase();
                            if (!validTypes.includes(typeValue.toLowerCase())) {
                                type.textContent = 'Other';
                            }
                        } else {
                            type.textContent = 'Other';
                        }

                        itemContent.appendChild(type);
                        li.appendChild(itemContent);
                    } else {
                        // Folder node
                        li.classList.add('folder');
                        
                        const icon = document.createElement('span');
                        let icon_emoji = 'icon-folder'
                        if (key == 'CSP') {
                            icon_emoji = 'icon-csp'
                        } else if (key == 'CLS') {
                            icon_emoji = 'icon-cls'
                        } else if (key == 'INC') {
                            icon_emoji = 'icon-inc'
                        } else if (key == 'MAC') {
                            icon_emoji = 'icon-mac'
                        } else if (key == 'Other') {
                            icon_emoji = 'icon-settings'
                        }
                        icon.className = 'add-classes-tree-icon '+icon_emoji;
                        itemContent.appendChild(icon);

                        const label = document.createElement('span');
                        label.className = 'add-classes-tree-label';
                        label.textContent = key;
                        itemContent.appendChild(label);

                        // Add "select all children" icon button
                        const selectChildrenBtn = document.createElement('button');
                        selectChildrenBtn.className = 'add-classes-select-children-btn icon-select-all';
                        selectChildrenBtn.title = 'Select all children as individual classes';
                        selectChildrenBtn.addEventListener('click', (e) => {
                            e.preventDefault();
                            e.stopPropagation();
                            handleSelectAllChildren(fullPath, value);
                        });
                        itemContent.appendChild(selectChildrenBtn);

                        // Click handler for folder expansion
                        itemContent.addEventListener('click', (e) => {
                            if (e.target === checkbox || e.target === selectChildrenBtn) return;
                            e.preventDefault();
                            e.stopPropagation();
                            
                            const wasExpanded = li.classList.contains('expanded');
                            if (wasExpanded) {
                                li.classList.remove('expanded');
                            } else {
                                li.classList.add('expanded');
                            }
                        });

                        // Create children
                        const childrenContainer = document.createElement('ul');
                        childrenContainer.className = 'add-classes-tree-children';

                        for (const childKey in value) {
                            if (value[childKey]) {
                                const childItem = createNamespaceTreeItem(childKey, value[childKey], fullPath);
                                childrenContainer.appendChild(childItem);
                            }
                        }

                        li.appendChild(itemContent);
                        li.appendChild(childrenContainer);
                    }
                    return li;
                } catch (error) {
                    console.error('createNamespaceTreeItem error at path ' + path + ' - value: ' + value + ' - error: ' + error);
                    return null;
                }
            }

            // Render the tree
            const ul = document.createElement('ul');
            ul.className = 'add-classes-tree-list';

            if (Object.keys(data).length === 0 ) {
                container.innerHTML = '<div class="add-classes-error-message">Research did not return any results, please try again. Note that "Look Into" search is case-sensitive.</div>';
            }

            for (const key in data) {
                if (data[key]) {
                    const item = createNamespaceTreeItem(key, data[key]);
                    ul.appendChild(item);
                }
            }

            container.appendChild(ul);
            updateNamespaceSelectedCount();

            // Restore selections after rendering
            setTimeout(() => {
                restoreSelectionsFromState();
            }, 200);
        }

        // Handle individual class selection
        function handleClassSelection(classPath, selected) {
            if (selected) {
                if (!childrenSelections.includes(classPath)) {
                    childrenSelections.push(classPath);
                }
            } else {
                const idx = childrenSelections.indexOf(classPath);
                if (idx !== -1) {
                    childrenSelections.splice(idx, 1);
                }
            }
            updateNamespaceSelectedCount();
        }

        // Handle package selection (selects the package as a whole)
        function handlePackageSelection(packagePath, selected, packageData) {
            if (selected) {
                // Add package to package selections
                if (!packageSelections.includes(packagePath)) {
                    packageSelections.push(packagePath);
                }
                
                // Remove any individual children from childrenSelections since the package is selected
                const allChildren = getAllLeafPaths(packageData, packagePath);
                allChildren.forEach(childPath => {
                    const idx = childrenSelections.indexOf(childPath);
                    if (idx !== -1) {
                        childrenSelections.splice(idx, 1);
                    }
                    // Uncheck individual child checkboxes
                    const childCheckbox = document.querySelector(`input[value="${childPath}"]`);
                    if (childCheckbox) {
                        childCheckbox.checked = false;
                    }
                });
                
            } else {
                // Remove package from package selections
                const idx = packageSelections.indexOf(packagePath);
                if (idx !== -1) {
                    packageSelections.splice(idx, 1);
                }
            }
            updateNamespaceSelectedCount();
        }

        // Handle "select all children" button click
        function handleSelectAllChildren(packagePath, packageData) {
            const allChildren = getAllLeafPaths(packageData, packagePath);
            
            // Remove package selection if it exists
            const packageIdx = packageSelections.indexOf(packagePath);
            if (packageIdx !== -1) {
                packageSelections.splice(packageIdx, 1);
                // Uncheck package checkbox
                const packageCheckbox = document.querySelector(`input[value="${packagePath}"]`);
                if (packageCheckbox) {
                    packageCheckbox.checked = false;
                }
            }
            
            // Add all children to individual selections
            allChildren.forEach(childPath => {
                if (!childrenSelections.includes(childPath)) {
                    childrenSelections.push(childPath);
                }
                // Check individual child checkboxes
                const childCheckbox = document.querySelector(`input[value="${childPath}"]`);
                if (childCheckbox) {
                    childCheckbox.checked = true;
                }
            });
            
            updateNamespaceSelectedCount();
        }

        // Restore selections from state
        function restoreSelectionsFromState() {
            const container = document.getElementById('namespaceContainer');
            if (!container) return;
                                
            // Restore package selections
            packageSelections.forEach(path => {
                const checkbox = container.querySelector(`input[value="${path}"]`);
                if (checkbox) {
                    checkbox.checked = true;
                }
            });
            
            // Restore individual class selections
            childrenSelections.forEach(path => {
                const checkbox = container.querySelector(`input[value="${path}"]`);
                if (checkbox) {
                    checkbox.checked = true;
                }
            });
            
            updateNamespaceSelectedCount();
        }

        // Helper function to restore selections from persistent array
        function restoreNamespaceSelectionsFromPersistent() {
            const container = document.getElementById('namespaceContainer');
            if (!container) return;
                            
            // Restore each selection from persistent array
            window.persistentNamespaceSelectedItems.forEach(path => {
                // Try multiple selectors to find the checkbox
                let checkbox = container.querySelector(`#namespace-checkbox-${CSS.escape(path)}`);
                if (!checkbox) {
                    checkbox = container.querySelector(`input[value="${path}"]`);
                }
                
                if (checkbox) {
                    checkbox.checked = true;
                }
            });
            
            // Update the selection counter after restoring
            updateNamespaceSelectedCount();
        }

        function updateNamespaceSelectedCount() {
            const individualCount = childrenSelections.length;
            const packageCount = packageSelections.length;
            const totalDisplayCount = individualCount + packageCount;
            
            const selectedItems = combineAll(window.projectPackageSelections, window.projectClassSelections);

            const countElement = document.getElementById('namespaceSelectedCount');
            if (countElement) {
                if (packageCount > 0) {
                    countElement.textContent = `${totalDisplayCount} Selected (${packageCount} packages, ${individualCount} individual)`;
                    countElement.title = selectedItems.join(', ');
                } else {
                    countElement.textContent = `${totalDisplayCount} Selected`;
                    countElement.title = selectedItems.join(', ');
                }
            }
        }

        // Tree control functions for Add Classes Modal
        function expandAllNamespaceTree() {
            const container = document.getElementById('namespaceContainer');
            if (!currentNamespaceData) {
                alert('Load content first');
                return;
            }
            container.querySelectorAll('.add-classes-tree-item.folder').forEach(item => {
                item.classList.add('expanded');
            });
        }

        function collapseAllNamespaceTree() {
            const container = document.getElementById('namespaceContainer');
            if (!currentNamespaceData) {
                alert('Load content first');
                return;
            }
            container.querySelectorAll('.add-classes-tree-item.folder').forEach(item => {
                item.classList.remove('expanded');
            });
        }

        function clearNamespaceSelection() {
            packageSelections = [];
            childrenSelections = [];
            window.persistentNamespaceSelectedItems = [];
            
            const container = document.getElementById('namespaceContainer');
            if (container) {
                container.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                    cb.checked = false;
                });
            }
            updateNamespaceSelectedCount();
        }

        // Search/filter functionality for namespace tree
        function filterNamespaceTree() {
            const searchInput = document.getElementById('namespaceSearchInput');
            if (!searchInput || !originalNamespaceData) return;
            
            const searchTerm = searchInput.value.toLowerCase().trim();
            
            if (!searchTerm) {
                renderNamespaceTree(originalNamespaceData, 'namespaceContainer');
            } else {
                const filteredData = filterNamespaceData(originalNamespaceData, searchTerm);
                renderNamespaceTree(filteredData, 'namespaceContainer');
                setTimeout(() => { expandAllNamespaceTree(); }, 100);
            }
            
            // Restore selections after re-rendering
            setTimeout(() => {
                restoreNamespaceSelectionsFromPersistent();
            }, 200);
        }

        function filterNamespaceData(data, searchTerm) {
            function isLeafNodeNamespace(node) {
                return node && typeof node === 'object' && 'name' in node && 'type' in node;
            }

            function nodeMatches(node, key) {
                if (isLeafNodeNamespace(node)) {
                    return node.name.toLowerCase().includes(searchTerm) || 
                        node.type.toLowerCase().includes(searchTerm) ||
                        key.toLowerCase().includes(searchTerm);
                } else {
                    return key.toLowerCase().includes(searchTerm);
                }
            }

            function findMatchingPaths(node, key, currentPath = []) {
                const fullPath = currentPath.concat([key]);
                const matches = [];

                if (nodeMatches(node, key)) {
                    matches.push({
                        path: fullPath,
                        node: node,
                        isDirectMatch: true
                    });
                }

                if (!isLeafNodeNamespace(node)) {
                    for (const childKey in node) {
                        if (node[childKey]) {
                            const childMatches = findMatchingPaths(node[childKey], childKey, fullPath);                            
                            pushAll(matches, childMatches);
                        }
                    }
                }

                return matches;
            }

            function buildFilteredTree(matches) {
                const tree = {};

                matches.forEach(match => {
                    let current = tree;
                    
                    for (let i = 0; i < match.path.length; i++) {
                        const pathSegment = match.path[i];
                        
                        if (i === match.path.length - 1) {
                            current[pathSegment] = match.node;
                        } else {
                            if (!current[pathSegment]) {
                                current[pathSegment] = {};
                            }
                            current = current[pathSegment];
                        }
                    }
                });

                return tree;
            }

            const allMatches = [];
            for (const key in data) {
                if (data[key]) {
                    const matches = findMatchingPaths(data[key], key);
                    pushAll(allMatches, matches);
                }
            }

            const filteredTree = buildFilteredTree(allMatches);

            allMatches.forEach(match => {
                if (match.isDirectMatch && !isLeafNodeNamespace(match.node)) {
                    let current = filteredTree;
                    for (let i = 0; i < match.path.length - 1; i++) {
                        current = current[match.path[i]];
                    }
                    const lastSegment = match.path[match.path.length - 1];
                    current[lastSegment] = match.node;
                }
            });

            return filteredTree;
        }

        // Modified addSelectedToProject function
        async function addSelectedToProject() {
            const projId = document.getElementById('modalProjectName').innerHTML;

            if (packageSelections.length === 0 && childrenSelections.length === 0) {
                alert("Please select at least one package or class to add to the project");
                return;
            }

            const classArray = [];
            
            // Add packages
            packageSelections.forEach(packagePath => {
                let pathParts = packagePath.split(".");
                const itemType = pathParts[0];
                
                if (itemType === 'CSP') { 
                    const packagePathFormatted = pathParts.slice(1).join('/');
                    classArray.push({
                        "name": packagePathFormatted,
                        "type": "pkg"
                    });
                } else if (['CLS', 'INC', 'MAC'].includes(itemType)) {
                    const packagePathFormatted = pathParts.slice(1).join('.');
                    classArray.push({
                        "name": packagePathFormatted,
                        "type": "pkg"
                    });
                } else if (itemType === 'Other') {
                    const packagePathFormatted = pathParts.slice(1).join('.');
                    classArray.push({
                        "name": packagePathFormatted,
                        "type": "pkg"
                    });
                }
            });
            
            // Add individual classes
            childrenSelections.forEach(classPath => {
                const item = findNamespaceItemByPath(currentNamespaceData, classPath);
                if (item && isLeafNodeForAdd(item)) {
                    let itemParts = classPath.split(".");
                    const itemType = itemParts[0];
                    
                    if (itemType === 'CSP') { 
                        const itemPath = itemParts.slice(1).join('/');
                        const itemFullname = itemPath + '.' + item.type.toLowerCase();
                        classArray.push({
                            "name": itemFullname,
                            "type": item.type.toLowerCase()
                        });
                    } else if (['CLS', 'INC', 'MAC'].includes(itemType)) {
                        const itemPath = itemParts.slice(1).join('.');
                        const itemFullname = itemPath + '.' + item.type.toLowerCase();
                        classArray.push({
                            "name": itemFullname,
                            "type": item.type.toLowerCase()
                        });
                    } else if (itemType === 'Other') {
                        const itemPath = itemParts.slice(1).join('.');
                        const itemFullname = (item.type === '') ? itemPath : (itemPath + '.' + item.type.toLowerCase()); 
                        classArray.push({
                            "name": itemFullname,
                            "type": item.type.toLowerCase()
                        });
                    }
                }
            });

            // --- Check for parent/child overlap
            const pkgs = classArray.filter(e => e.type === "pkg").map(e => e.name);
            const classes = classArray.filter(e => e.type !== "pkg").map(e => e.name);

            for (const pkg of pkgs) {
                for (const cls of classes) {
                    if (cls.startsWith(pkg + ".")) {
                        alert(`Conflict detected: Package "${pkg}" and one of its classes "${cls}" are both selected.\nPlease select either the package or its children, not both.`);
                        return; // stop execution
                    } 
                }
            }

            const add_request = {
                "projectName": currentAddProjectName,
                "elements": classArray
            }
            
            PackageManagerAPI.addClassesToProject(projId, add_request)
                .then(function(response) {
                    const packageCount = packageSelections.length;
                    const classCount = childrenSelections.length;
                    let message;
                    
                    if (packageCount > 0 && classCount > 0) {
                        message = `Successfully added ${packageCount} packages and ${classCount} individual classes to project "${currentAddProjectName}"`;
                    } else if (packageCount > 0) {
                        message = `Successfully added ${packageCount} packages to project "${currentAddProjectName}"`;
                    } else {
                        message = `Successfully added ${classCount} individual classes to project "${currentAddProjectName}"`;
                    }
                    
                    alert(message);
                })
                .catch(function(err) {
                    console.error('Error adding items to project:', err.message);
                    alert(`Error adding items to project: ${err.message}`);
                });        
        }

        // Helper functions for Add Classes Modal
        function isLeafNodeForAdd(node) {
            return node && typeof node === 'object' && 'name' in node && 'type' in node;
        }

        function findNamespaceItemByPath(data, path) {
            let pathParts = path.split('.');
            let current = data;
            
            const type = pathParts[0];
            if (type === 'Other') {
                const otherEl = pathParts.slice(1).join('.');
                pathParts = [type, otherEl]; 
            }

            for (const part of pathParts) {
                if (current && current[part]) {
                    current = current[part];
                } else {
                    return null;
                }
            }
            
            return current;
        }

        // Close modal when clicking outside
        document.addEventListener('DOMContentLoaded', function() {
            const modal = document.getElementById('addClassesModal');
            if (modal) {
                modal.addEventListener('click', function(e) {
                    if (e.target === this) {
                        closeAddClassesModal();
                    }
                });
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && document.getElementById('addClassesModal').style.display === 'block') {
                closeAddClassesModal();
            }
        });

    </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="NewProjectModal">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language="javascript"> 
        // New Project Modal Functions

        function openNewProjectModal() {
            const modal = document.getElementById('newProjectModal');
            if (modal) {
                modal.classList.add('show');
                // Focus on the project name input
                setTimeout(() => {
                    const nameInput = document.getElementById('projectName');
                    if (nameInput) nameInput.focus();
                }, 100);
                
                // Prevent body scrolling when modal is open
                document.body.style.overflow = 'hidden';
            } else {
                console.error('Modal element not found: newProjectModal');
            }
        }

        function closeNewProjectModal() {
            const modal = document.getElementById('newProjectModal');
            if (modal) {
                modal.classList.remove('show');
                // Reset form
                const form = document.getElementById('newProjectForm');
                if (form) form.reset();
                
                // Restore body scrolling
                document.body.style.overflow = 'auto';
            }
        }

        async function createNewProject(event) {
            event.preventDefault();
            
            // Get form data
            const form = event.target;
            const formData = new FormData(form);
            
            const projectData = {
                name: formData.get('projectName').trim(),
                description: formData.get('projectDescription').trim()
            };
            
            // Basic validation
            if (!projectData.name) {
                alert('Project name is required');
                return;
            }
            
            if (projectData.name.length < 3) {
                alert('Project name must be at least 3 characters long');
                return;
            }

            if (projectData.name.length > 64) {
                alert('Project name cannot be longer than 64 characters');
                return;
            }
            
            // Show loading state
            const submitBtn = form.querySelector('button[type="submit"]');
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<span class="plus-icon icon-hourglass"></span> Creating...';
            submitBtn.disabled = true;
            
            const now = new Date();
            const formatted_date_time = `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())} ${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(now.getSeconds())}`;
            
            const proj_data = {
                'name': projectData.name,
                'desc': projectData.description
            }
            
            PackageManagerAPI.createProject(proj_data)
                .then(function(response) {
                    // Show success message
                    alert(`${formatted_date_time} - Project "${projectData.name}" has been created successfully!`);
                    
                    // Close modal
                    closeNewProjectModal();
                    
                    // Optionally refresh the project list
                    if (typeof loadProjects === 'function') {
                        loadProjects();
                    }
                })
                .catch(function(err) {
                    const now = new Date();
                    const formatted_date_time = `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())} ${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(now.getSeconds())}`;
                    alert(`${formatted_date_time} - Network error: Failed to create project: ${err.message}. Please try again.`);
                });        
            
            // Restore button state
            submitBtn.innerHTML = originalText;
            submitBtn.disabled = false;
        }

        function pad(n) {
            return n.toString().padStart(2, '0');
        }

        // Close modal when clicking outside of it
        document.addEventListener('click', function(event) {
            const modal = document.getElementById('newProjectModal');
            if (modal && event.target === modal) {
                closeNewProjectModal();
            }
        });

        // Close modal with Escape key
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                const modal = document.getElementById('newProjectModal');
                if (modal && modal.classList.contains('show')) {
                    closeNewProjectModal();
                }
            }
        });
    </script>>

    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.ExportTaskSection.CSS">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67443,59562.194704865</TimeChanged>
<TimeCreated>67443,59562.194704865</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    CSS STYLES
*/
]]></Content>
</UDLText>

<Method name="RenderStyles">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Do ..TaskFileSelectorModalStyles()
    Do ..CreateTaskModalStyles()

    &html<<style>
        .header {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            padding: 24px;
            margin-bottom: 24px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            font-size: 28px;
            font-weight: 700;
            color: #1e293b;
        }

        .header p {
            color: #64748b;
            margin-top: 4px;
        }

        .table-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            overflow: auto;
            max-height: 600px;
        }

        .table-header {
            padding: 20px 24px;
            border-bottom: 1px solid #e2e8f0;
        }

        .table-header h2 {
            font-size: 20px;
            font-weight: 600;
            color: #1e293b;
        }

        .styled-table {
            width: 100%;
            min-width: 1000px;
            border-collapse: collapse;
        }

        .styled-table th,
        .styled-table td {
            padding: 12px 24px;
            text-align: left;
            border-bottom: 1px solid #e2e8f0;
            white-space: nowrap;
        }

        .styled-table tr:hover {
            background: #f8fafc;
        }

        .status-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .status-active {
            background: #dcfce7;
            color: #166534;
        }

        .status-suspended {
            background: #fffcbaff;
            color: #736e09ff;
        }

        .status-running {
            background: #a7b1f2ff;
            color: rgba(7, 54, 148, 1);
        }

        .status-error {
            background: #fecaca;
            color: #991b1b;
        }

        .priority-badge {
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .priority-high { background: #fee2e2; color: #991b1b; }
        .priority-normal { background: #dbeafe; color: #1e40af; }
        .priority-low { background: #f1f5f9; color: #475569; }

        .task-info-panel {
            position: fixed;
            top: 0;
            right: -400px;
            width: 400px;
            height: 100vh;
            background: white;
            box-shadow: -2px 0 10px rgba(0,0,0,0.1);
            transition: right 0.3s ease;
            z-index: 1002;
            overflow-y: auto;
        }

        .task-info-panel.open {
            right: 0;
        }

        .info-panel-header {
            padding: 20px;
            border-bottom: 1px solid #e2e8f0;
            background: #f8fafc;
            position: sticky;
            top: 0;
            z-index: 1;
        }

        .info-panel-content {
            padding: 20px;
        }

        .info-section {
            margin-bottom: 24px;
        }

        .info-section h4 {
            font-size: 14px;
            font-weight: 600;
            color: #374151;
            text-transform: uppercase;
            letter-spacing: 0.05em;
            margin-bottom: 8px;
        }

        .info-item {
            margin-bottom: 12px;
        }

        .info-label {
            font-size: 12px;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.05em;
        }

        .info-value {
            font-size: 14px;
            color: #1f2937;
            font-weight: 500;
            margin-top: 2px;
        }

        .error-details {
            background: #fef2f2;
            border: 1px solid #fecaca;
            border-radius: 6px;
            padding: 12px;
            font-family: monospace;
            font-size: 12px;
            color: #991b1b;
            white-space: pre-wrap;
        }

        .project-item-with-action {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .add-project-item {
            border: 2px dashed #d1d5db;
            background: transparent;
            color: #6b7280;
            cursor: pointer;
            transition: all 0.2s;
        }

        .add-project-item:hover {
            border-color: #3b82f6;
            color: #3b82f6;
            background: #f0f9ff;
        }

        .project-list {
            list-style: none;
            padding: 0;
        }

        .project-item {
            padding: 8px 12px;
            background: #f8fafc;
            border-radius: 6px;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
    </style>>
    Return sc
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
    Modals CSS STYLES
*/
]]></Content>
</UDLText>

<Method name="CreateTaskModalStyles">
<Description>
Styles for the task create modal which let the create a new export task</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    &html<<style>
        .create-task-modal-overlay {
            display: none;
            position: fixed;
            z-index: 1000;
            top: 0; 
            left: 0; 
            right: 0; 
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            justify-content: center;
            align-items: center;
        }

        @keyframes CreateTaskFadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }

        @keyframes CreateTaskSlideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .create-task-modal-container {
            background: white;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
            width: 90%;
            max-width: 700px;
            max-height: 90vh;
            overflow-y: auto;
            animation: CreateTaskFadeIn 0.3s ease, CreateTaskSlideIn 0.3s ease;
            /* Remove any positioning that might interfere */
            position: relative;
        }
        
        .create-task-modal-header {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .create-task-modal-header h3 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

        .create-task-close {
            background: none;
            border: none;
            color: white;
            font-size: 24px;
            cursor: pointer;
            padding: 0;
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background 0.2s ease;
        }

        .create-task-close:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .create-task-modal-content {
            padding: 30px;
        }

        .create-task-form-row {
            display: flex;
            gap: 20px;
            align-items: flex-start;
            flex-wrap: wrap;
        }

        .create-task-form-group {
            margin-bottom: 20px;
            flex: 1;
            min-width: 200px;
        }

        .create-task-form-label {
            display: block;
            margin-bottom: 6px;
            font-weight: 600;
            color: #333;
        }

        .create-task-form-input,
        .create-task-form-select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            transition: border-color 0.2s ease;
            box-sizing: border-box;
        }

        .create-task-form-input:focus,
        .create-task-form-select:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
        }

        .create-task-form-grid-2 {
            display: grid;
            gap: 12px;
        }

        .create-task-week-row {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }

        .create-task-day-checkbox, .edit-task-day-checkbox{
            display: inline-flex; 
            align-items: center;
            margin: 4px 8px 4px 0;
            padding: 6px 10px;
            border: 1px solid #d1d5db;
            border-radius: 6px;
            background-color: #f9fafb;
            font-size: 14px;
            cursor: pointer;
            user-select: none;
            transition: background-color 0.2s, border-color 0.2s;
        }

        .create-task-day-checkbox:hover,
        .edit-task-day-checkbox:hover {
            background-color: #f3f4f6;
            border-color: #9ca3af;
        }

        .create-task-day-checkbox input[type="checkbox"],
        .edit-task-day-checkbox input[type="checkbox"] {
            margin-right: 6px;
            cursor: pointer;
        }

        .create-task-email-section h4 {
            font-size: 14px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 12px;
        }

        .create-task-email-input-group {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }

        .create-task-email-list {
            margin-top: 8px;
        }

        .create-task-modal-actions {
            display: flex;
            gap: 12px;
            justify-content: flex-end;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #eee;
        }

        /* Purge Section Styles */
        .purge-section {
            margin-bottom: 30px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }

        .purge-section h4 {
            font-size: 16px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 16px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .create-task-purge-checkbox {
            display: flex;
            align-items: center;
            font-weight: 600;
            color: #333;
            cursor: pointer;
            user-select: none;
            margin-bottom: 8px;
        }

        .create-task-purge-checkbox input[type="checkbox"] {
            margin-right: 8px;
            cursor: pointer;
            width: 16px;
            height: 16px;
        }

        .create-task-purge-warning {
            display: flex;
            align-items: flex-start;
            gap: 8px;
            padding: 12px;
            background-color: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 6px;
            margin-top: 16px;
        }
        
        .warning-icon {
            flex-shrink: 0;
            font-size: 16px;
        }

        .warning-text {
            font-size: 13px;
            color: #856404;
            line-height: 1.4;
        }

        /* Schedule Section Styles */
        .schedule-section {
            margin-bottom: 30px;
            padding: 20px;
            background-color: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
        }

        .schedule-section h4 {
            font-size: 16px;
            font-weight: 600;
            color: #374151;
            margin-bottom: 16px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        @keyframes CreateTask {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        @media (max-width: 768px) {
            .create-task-form-row {
                flex-direction: column;
            }

            .create-task-modal-container {
                width: 95%;
                margin: 10px;
            }

            .create-task-modal-content {
                padding: 20px;
            }

            .purge-section {
                padding: 16px;
            }
            
            .create-task-purge-warning {
                padding: 10px;
            }
            
            .warning-text {
                font-size: 12px;
            }
        }
    </style>>
    Quit $$$OK
]]></Implementation>
</Method>

<Method name="TaskFileSelectorModalStyles">
<Description>
Styles for the task file/project selector modal which let the user associate the projects with an export task</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<style>
            .task-file-selector-modal {
                display: none;
                position: fixed;
                z-index: 1000;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                background-color: rgba(0, 0, 0, 0.5);
                animation: taskFileSelectorFadeIn 0.3s ease;
            }

            .task-file-selector-modal.show {
                display: flex;
                justify-content: center;
                align-items: center;
            }

            @keyframes taskFileSelectorFadeIn {
                from { opacity: 0; }
                to { opacity: 1; }
            }

            .task-file-selector-modal-content {
                background-color: #ffffff;
                margin: 2% auto;
                border-radius: 12px;
                width: 90%;
                max-width: 1200px;
                max-height: 90vh;
                box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
                display: flex;
                flex-direction: column;
                overflow-y: auto;
            }

            .task-file-selector-modal-header {
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                padding: 24px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .task-file-selector-modal-title {
                font-size: 1.5rem;
                font-weight: 600;
                margin: 0;
            }

            .task-file-selector-task-name {
                font-size: 0.9rem;
                opacity: 0.9;
                margin-top: 4px;
            }

            .task-file-selector-close {
                font-size: 28px;
                font-weight: bold;
                cursor: pointer;
                background: none;
                border: none;
                color: white;
                opacity: 0.8;
                transition: opacity 0.2s;
                padding: 0;
                width: 32px;
                height: 32px;
                display: flex;
                align-items: center;
                justify-content: center;
                border-radius: 6px;
            }

            .task-file-selector-close:hover {
                opacity: 1;
                background-color: rgba(255, 255, 255, 0.1);
            }

            .task-file-selector-modal-body {
                flex: 1;
                display: flex;
                gap: 2px;
                background-color: #f8fafc;
                min-height: 0;
            }

            .task-file-selector-panel {
                flex: 1;
                background: white;
                display: flex;
                flex-direction: column;
                position: relative;
            }

            .task-file-selector-panel-header {
                padding: 20px;
                border-bottom: 2px solid #e2e8f0;
                background: white;
            }

            .task-file-selector-panel-title {
                font-size: 1.1rem;
                font-weight: 600;
                color: #1a202c;
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .task-file-selector-panel-subtitle {
                font-size: 0.875rem;
                color: #64748b;
                margin-top: 4px;
            }

            .task-file-selector-panel-icon {
                font-size: 1.2rem;
            }

            .task-file-selector-associated-panel .task-file-selector-panel-header {
                background: linear-gradient(135deg, #e0f2fe 0%, #f0f9ff 100%);
                border-bottom-color: #0ea5e9;
            }

            .task-file-selector-associated-panel .task-file-selector-panel-title {
                color: #0c4a6e;
            }

            .task-file-selector-available-panel .task-file-selector-panel-header {
                background: linear-gradient(135deg, #f0fdf4 0%, #f7fee7 100%);
                border-bottom-color: #22c55e;
            }

            .task-file-selector-available-panel .task-file-selector-panel-title {
                color: #15803d;
            }

            .task-file-selector-panel-body {
                flex: 1;
                overflow-y: auto;
                padding: 16px;
            }

            .task-file-selector-file-list {
                display: flex;
                flex-direction: column;
                gap: 8px;
            }

            .task-file-selector-file-item {
                display: flex;
                align-items: center;
                justify-content: space-between;
                padding: 12px 16px;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                background: white;
                transition: all 0.2s ease;
                cursor: pointer;
                position: relative;
            }

            .task-file-selector-file-item:hover {
                border-color: #cbd5e1;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
                transform: translateY(-1px);
            }

            .task-file-selector-file-item.selected {
                background: linear-gradient(135deg, #dbeafe 0%, #eff6ff 100%);
                border-color: #3b82f6;
                box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
            }

            .task-file-selector-file-info {
                flex: 1;
                display: flex;
                flex-direction: column;
            }

            .task-file-selector-file-name {
                font-weight: 600;
                color: #1a202c;
                display: flex;
                align-items: center;
                gap: 8px;
            }

            .task-file-selector-file-description {
                font-size: 0.875rem;
                color: #64748b;
                margin-top: 2px;
            }

            .task-file-selector-file-meta {
                font-size: 0.8rem;
                color: #94a3b8;
                margin-top: 4px;
            }

            .task-file-selector-file-actions {
                display: flex;
                gap: 8px;
                align-items: center;
            }

            .task-file-selector-btn {
                padding: 6px 12px;
                border: none;
                border-radius: 6px;
                font-size: 0.875rem;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.2s ease;
                display: flex;
                align-items: center;
                gap: 4px;
            }

            .task-file-selector-btn-remove {
                background-color: #fee2e2;
                color: #dc2626;
                border: 1px solid #fecaca;
            }

            .task-file-selector-btn-remove:hover {
                background-color: #fecaca;
                border-color: #f87171;
            }

            .task-file-selector-btn-add {
                background-color: #dcfce7;
                color: #16a34a;
                border: 1px solid #bbf7d0;
            }

            .task-file-selector-btn-add:hover {
                background-color: #bbf7d0;
                border-color: #86efac;
            }

            .task-file-selector-empty-state {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                height: 200px;
                color: #64748b;
                text-align: center;
                padding: 40px;
            }

            .task-file-selector-empty-icon {
                font-size: 3rem;
                margin-bottom: 16px;
                opacity: 0.5;
            }

            .task-file-selector-search-box {
                margin-bottom: 16px;
            }

            .task-file-selector-search-input {
                width: 100%;
                padding: 10px 16px;
                border: 1px solid #d1d5db;
                border-radius: 8px;
                font-size: 0.9rem;
                transition: border-color 0.2s;
            }

            .task-file-selector-search-input:focus {
                outline: none;
                border-color: #3b82f6;
                box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
            }

            .task-file-selector-counter {
                background: #f1f5f9;
                color: #475569;
                padding: 2px 8px;
                border-radius: 12px;
                font-size: 0.8rem;
                font-weight: 500;
            }

            .task-file-selector-status-badge {
                padding: 2px 8px;
                border-radius: 12px;
                font-size: 0.75rem;
                font-weight: 500;
            }

            .task-file-selector-status-associated {
                background: #dbeafe;
                color: #1d4ed8;
            }

            .task-file-selector-modal-footer {
                padding: 20px 24px;
                border-top: 1px solid #e2e8f0;
                background: white;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }

            .task-file-selector-btn-primary {
                background: #3b82f6;
                color: white;
                padding: 10px 24px;
                border: none;
                border-radius: 8px;
                font-weight: 500;
                cursor: pointer;
                transition: background-color 0.2s;
            }

            .task-file-selector-btn-primary:hover {
                background: #2563eb;
            }

            .task-file-selector-btn-secondary {
                background: #f8fafc;
                color: #64748b;
                padding: 10px 24px;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.2s;
            }

            .task-file-selector-btn-secondary:hover {
                background: #f1f5f9;
                border-color: #cbd5e1;
            }

            @media (max-width: 768px) {
                .task-file-selector-modal-content {
                    width: 95%;
                    height: 90vh;
                    margin: 5% auto;
                }

                .task-file-selector-modal-body {
                    flex-direction: column;
                }

                .task-file-selector-associated-panel {
                    order: 0;
                }

                .task-file-selector-available-panel {
                    order: 2;
                }
            }
        </style>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.ExportTaskSection.HTML">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67445,26650.514799933</TimeChanged>
<TimeCreated>67443,59562.195572631</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    HTML Rendering
*/
]]></Content>
</UDLText>

<Method name="renderExportTask">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    // CSS
    Do ##class(PackageManager.UI.Screens.ExportTaskSection.CSS).RenderStyles()
    // JS 
    Do ##class(PackageManager.UI.Screens.ExportTaskSection.JavaScript).RenderJavaScript()
    // HTML Modals
    Do ##class(PackageManager.UI.Screens.ExportTaskSection.HTML).renderCreateTaskModal()
    Do ##class(PackageManager.UI.Screens.ExportTaskSection.HTML).renderAddProjectModal()
    Do ##class(PackageManager.UI.Screens.ExportTaskSection.HTML).renderEditTaskModal()
    
    &html<<script language='javascript'>
        function renderExportTask() {
            return `
                <h2><span class="icon-outbox"></span> #($$$ExportProjectTaskSectionTitle)#</h2>
                <p>Manage system tasks and schedules.</p>
                <div class="project-container">
                    <div class="project-header">
                        <div class='project-title'>
                           <h3 id="taskCount"><span class="icon-dividers"></span> Active Tasks</h3>
                        </div>
                        <div class='header-controls'>
                            <button class='new-project-btn' onclick='openCreateTaskModal()'><span class='plus-icon'>+</span> Create New Task</button>
                        </div>
                    </div>

                    <div class="project-content">
                        <div class='project-table-wrapper'>
                            <table class='project-table' id="taskTableContainer">
                                <tbody id='projectTableBody'>
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Modal to show projects related to the current task -->
                    ${renderAddProjectModal()}

                    <!-- Modal to create a new task -->
                    ${renderCreateTaskModal()}

                    <!-- Modal to edit a task -->
                    ${renderEditTaskModal()}

                </div>
            `;
        }
    </script>>
    Return sc
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
    Modals Rendering
*/
]]></Content>
</UDLText>

<Method name="renderCreateTaskModal">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language='javascript'>
        function renderCreateTaskModal() {
            return `
                <!-- OVERLAY -->
                <div id="createTaskModal" class="create-task-modal-overlay">

                    <!-- CONTAINER CENTRATO -->
                    <div class="create-task-modal-container">

                        <!-- HEADER + FORM -->
                        <div class="create-task-modal-header">
                            <h3><span class="icon-bag"></span> Create New Task</h3>
                            <button type="button" class="create-task-close icon-multiplication" onclick="closeCreateTaskModal()"></button>
                        </div>
                        <div class="create-task-modal-content">
                            <form id="createTaskForm">
                                <!-- Basic Information -->
                                <div class="create-task-form-row">
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">Task Name *</label>
                                        <input type="text" id="task_name" class="create-task-form-input" placeholder="Enter task name" maxlength="50" required>
                                    </div>
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">Description</label>
                                        <input type="text" id="task_desc" class="create-task-form-input" placeholder="Enter task description">
                                    </div>
                                </div>

                                <!-- Schedule Section -->
                                <div class="schedule-section">
                                    <h4><span class="icon-calendar"></span> Schedule Configuration</h4>
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">How often do you want the Task Manager to execute this task?</label>
                                        <select id="schedule_type" class="create-task-form-select" onchange="handleScheduleTypeChange()">
                                            <option value="" disabled selected>Choose...</option>
                                            <option value="once">Only Once</option>
                                            <option value="daily">Daily</option>
                                            <option value="weekly">Weekly</option>
                                            <option value="monthly">Monthly</option>
                                        </select>
                                    </div>
                                    
                                    <!-- Daily Options -->
                                    <div id="daily_options" class="hidden">
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Every</label>
                                            <div class="create-task-form-grid-2">
                                                <input type="number" id="every_n_days" class="create-task-form-input" value="1" min="1" max="7">
                                                <span style="align-self: center;">day(s)</span>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Weekly Options -->
                                    <div id="weekly_options" class="hidden">
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Every</label>
                                            <div class="create-task-form-grid-2">
                                                <input type="number" id="every_n_weeks" class="create-task-form-input" value="1" min="1" max="5">
                                                <span style="align-self: center;">week(s)</span>
                                            </div>
                                        </div>
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Days of the week:</label>
                                            <div class="create-task-week-row">
                                                <label class="create-task-day-checkbox"><input type="checkbox" value="2"> Monday</label>
                                                <label class="create-task-day-checkbox"><input type="checkbox" value="3"> Tuesday</label>
                                                <label class="create-task-day-checkbox"><input type="checkbox" value="4"> Wednesday</label>
                                                <label class="create-task-day-checkbox"><input type="checkbox" value="5"> Thursday</label>
                                                <label class="create-task-day-checkbox"><input type="checkbox" value="6"> Friday</label>
                                                <label class="create-task-day-checkbox"><input type="checkbox" value="7"> Saturday</label>
                                                <label class="create-task-day-checkbox"><input type="checkbox" value="1"> Sunday</label>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Monthly Options -->
                                    <div id="monthly_options" class="hidden">
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Every</label>
                                            <div class="create-task-form-grid-2">
                                                <input type="number" id="every_n_months" class="create-task-form-input" value="1" min="1" max="12">
                                                <span style="align-self: center;">month(s)</span>
                                            </div>
                                        </div>
                                        <div class="create-task-form-group">
                                            <label for="day_of_month" class="create-task-form-label">On day of month:</label>
                                            <input type="number" id="day_of_month" class="create-task-form-input" value="1" min="1" max="31">
                                        </div>
                                    </div>
                                </div>

                                <!-- Date Range -->
                                <div class="create-task-form-row">
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">Start Date</label>
                                        <input type="date" id="start_date" class="create-task-form-input">
                                    </div>
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">End Date (optional)</label>
                                        <input type="date" id="end_date" class="create-task-form-input">
                                        <small style="color: #666; font-size: 12px;">Leave empty for tasks that never expire</small>
                                    </div>
                                </div>

                                <!-- Frequency -->
                                <div class="create-task-form-row">
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">Execution frequency:</label>
                                        <select id="frequency_type" class="create-task-form-select" onchange="handleFrequencyTypeChange()">
                                            <option value="once">Run once at this time</option>
                                        </select>
                                    </div>
                                    <div id="single_run_options">
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Run time:</label>
                                            <input type="time" id="run_once_time" class="create-task-form-input" value="01:00">
                                        </div>
                                    </div>
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">Priority</label>
                                        <select id="priority_type" class="create-task-form-select">
                                            <option value="1">Low</option>
                                            <option value="0">Normal</option>
                                            <option value="2">High</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- Purge Configuration Section -->
                                <div class="purge-section">
                                    <h4><span class="icon-delete"></span> File Purge Configuration</h4>
                                    <div class="create-task-form-group">
                                        <label class="create-task-purge-checkbox">
                                            <input type="checkbox" id="purge_enabled" onchange="handlePurgeToggle()"> 
                                            Enable automatic file purging
                                        </label>
                                        <small style="color: #666; font-size: 12px; display: block; margin-top: 4px;">
                                            Automatically delete old backup files to manage disk space
                                        </small>
                                    </div>
                                    
                                    <div id="purge_options" class="hidden">
                                        <div class="create-task-form-row">
                                            <div class="create-task-form-group">
                                                <label class="create-task-form-label">Retention Time (days)</label>
                                                <input type="number" id="retention_days" class="create-task-form-input" value="60" min="1" max="365">
                                                <small style="color: #666; font-size: 12px;">Files older than this will be deleted</small>
                                            </div>
                                            <div class="create-task-form-group">
                                                <label class="create-task-form-label">Minimum Files to Keep</label>
                                                <input type="number" id="min_files_keep" class="create-task-form-input" value="5" min="1" max="100">
                                                <small style="color: #666; font-size: 12px;">Always keep at least this many newest files</small>
                                            </div>
                                        </div>
                                        <div class="create-task-purge-warning">
                                            <span class="warning-icon"><span class="icon-warning"></span></span>
                                            <span class="warning-text">
                                                Files will be permanently deleted. The newest files will always be preserved up to the minimum count specified.
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Email Notifications Section -->
                                <div class="create-task-email-section">
                                    <h4><span class="icon-email"></span> Email Notifications (Available Soon...)</h4>
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">Completion Notifications:</label>
                                        <div class="create-task-email-input-group">
                                            <input type="email" id="completion_email_input" class="create-task-form-input" placeholder="Enter email address" disabled>
                                            <button type="button" class="btn btn-secondary" onclick="addEmail('completion')">Add</button>
                                        </div>
                                        <div id="completion_email_list" class="create-task-email-list"></div>
                                    </div>
                                </div>

                                <!-- Buttons -->
                                <div style="text-align: right; padding-top: 16px; border-top: 1px solid #e2e8f0; margin-top: 16px;">
                                    <button type="button" class="btn btn-secondary" onclick="closeCreateTaskModal()" style="margin-right: 8px;">Cancel</button>
                                    <button type="button" class="btn btn-primary" onclick="submitNewTask('#($USERNAME)#')">Create Task</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            `;
        }
    </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="renderEditTaskModal">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language='javascript'>
        function renderEditTaskModal() {
            return `
                <!-- OVERLAY -->
                <div id="renderEditTaskModal" class="create-task-modal-overlay">

                    <!-- CONTAINER CENTRATO -->
                    <div class="create-task-modal-container">

                        <!-- HEADER + FORM -->
                        <div class="create-task-modal-header">
                            <h3><span class="icon-bag"></span> Edit Task</h3>
                            <button type="button" class="create-task-close icon-multiplication" onclick="closeEditTaskModal()"></button>
                        </div>
                        <div class="create-task-modal-content">
                            <form id="EditTaskForm">
                                <!-- Task Status Info (Read-only) -->
                                <div class="task-status-section" style="background: #f8f9fa; padding: 12px; border-radius: 6px; margin-bottom: 16px;">
                                    <h4><span class="icon-barchart"></span> Current Task Status</h4>
                                    <div class="create-task-form-row">
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Status</label>
                                            <input type="text" id="edit-task_status" class="create-task-form-input" readonly style="background: #f1f1f1;">
                                        </div>
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Last Run</label>
                                            <input type="text" id="edit-last_run" class="create-task-form-input" readonly style="background: #f1f1f1;">
                                        </div>
                                    </div>
                                    <div class="create-task-form-row">
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Next Scheduled</label>
                                            <input type="text" id="edit-next_scheduled" class="create-task-form-input" readonly style="background: #f1f1f1;">
                                        </div>
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Task Class</label>
                                            <input type="text" id="edit-task_class" class="create-task-form-input" readonly style="background: #f1f1f1;">
                                        </div>
                                    </div>
                                </div>

                                <!-- Basic Information -->
                                <div class="create-task-form-row">
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">Task Name *</label>
                                        <input type="text" id="edit-task_name" class="create-task-form-input" placeholder="Enter task name" maxlength="50" required>
                                    </div>
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">Description</label>
                                        <input type="text" id="edit-task_desc" class="create-task-form-input" placeholder="Enter task description">
                                    </div>
                                </div>

                                <!-- Schedule Section -->
                                <div class="schedule-section">
                                    <h4><span class="icon-calendar"></span> Schedule Configuration</h4>
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">How often do you want the Task Manager to execute this task?</label>
                                        <select id="edit-schedule_type" class="create-task-form-select" onchange="handleScheduleTypeChange('edit')">
                                            <option value="" disabled>Choose...</option>
                                            <option value="once">Only Once</option>
                                            <option value="daily">Daily</option>
                                            <option value="weekly">Weekly</option>
                                            <option value="monthly">Monthly</option>
                                        </select>
                                    </div>
                                    
                                    <!-- Daily Options -->
                                    <div id="edit-daily_options" class="hidden">
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Every</label>
                                            <div class="create-task-form-grid-2">
                                                <input type="number" id="edit-every_n_days" class="create-task-form-input" value="1" min="1" max="7">
                                                <span style="align-self: center;">day(s)</span>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Weekly Options -->
                                    <div id="edit-weekly_options" class="hidden">
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Every</label>
                                            <div class="create-task-form-grid-2">
                                                <input type="number" id="edit-every_n_weeks" class="create-task-form-input" value="1" min="1" max="5">
                                                <span style="align-self: center;">week(s)</span>
                                            </div>
                                        </div>
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Days of the week:</label>
                                            <div class="create-task-week-row">
                                                <label class="edit-task-day-checkbox"><input type="checkbox" value="2"> Monday</label>
                                                <label class="edit-task-day-checkbox"><input type="checkbox" value="3"> Tuesday</label>
                                                <label class="edit-task-day-checkbox"><input type="checkbox" value="4"> Wednesday</label>
                                                <label class="edit-task-day-checkbox"><input type="checkbox" value="5"> Thursday</label>
                                                <label class="edit-task-day-checkbox"><input type="checkbox" value="6"> Friday</label>
                                                <label class="edit-task-day-checkbox"><input type="checkbox" value="7"> Saturday</label>
                                                <label class="edit-task-day-checkbox"><input type="checkbox" value="1"> Sunday</label>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Monthly Options -->
                                    <div id="edit-monthly_options" class="hidden">
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Every</label>
                                            <div class="create-task-form-grid-2">
                                                <input type="number" id="edit-every_n_months" class="create-task-form-input" value="1" min="1" max="12">
                                                <span style="align-self: center;">month(s)</span>
                                            </div>
                                        </div>
                                        <div class="create-task-form-group">
                                            <label for="day_of_month" class="create-task-form-label">On day of month:</label>
                                            <input type="number" id="edit-day_of_month" class="create-task-form-input" value="1" min="1" max="31">
                                        </div>
                                    </div>
                                </div>

                                <!-- Date Range -->
                                <div class="create-task-form-row">
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">Start Date</label>
                                        <input type="date" id="edit-start_date" class="create-task-form-input">
                                    </div>
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">End Date (optional)</label>
                                        <input type="date" id="edit-end_date" class="create-task-form-input">
                                        <small style="color: #666; font-size: 12px;">Leave empty for tasks that never expire</small>
                                    </div>
                                </div>

                                <!-- Frequency -->
                                <div class="create-task-form-row">
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">Execution frequency:</label>
                                        <select id="edit-frequency_type" class="create-task-form-select" onchange="handleFrequencyTypeChange()">
                                            <option value="once">Run once at this time</option>
                                        </select>
                                    </div>
                                    <div id="single_run_options">
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Run time:</label>
                                            <input type="time" id="edit-run_once_time" class="create-task-form-input" value="01:00">
                                            <small style="color: #666; font-size: 12px;">Empty, if the next schedule is not set.</small>
                                        </div>
                                    </div>
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">Priority</label>
                                        <select id="edit-priority_type" class="create-task-form-select">
                                            <option value="1">Low</option>
                                            <option value="0">Normal</option>
                                            <option value="2">High</option>
                                        </select>
                                    </div>
                                </div>

                                <!-- Purge Configuration Section -->
                                <div class="purge-section">
                                    <h4><span class="icon-delete"></span> File Purge Configuration</h4>
                                    <div class="create-task-form-group">
                                        <label class="create-task-purge-checkbox">
                                            <input type="checkbox" id="edit-purge_enabled" onchange="handlePurgeToggle('edit')"> 
                                            Enable automatic file purging
                                        </label>
                                        <small style="color: #666; font-size: 12px; display: block; margin-top: 4px;">
                                            Automatically delete old backup files to manage disk space
                                        </small>
                                    </div>
                                    
                                    <div id="edit-purge_options" class="hidden">
                                        <div class="create-task-form-row">
                                            <div class="create-task-form-group">
                                                <label class="create-task-form-label">Retention Time (days)</label>
                                                <input type="number" id="edit-retention_days" class="create-task-form-input" value="60" min="1" max="365">
                                                <small style="color: #666; font-size: 12px;">Files older than this will be deleted</small>
                                            </div>
                                            <div class="create-task-form-group">
                                                <label class="create-task-form-label">Minimum Files to Keep</label>
                                                <input type="number" id="edit-min_files_keep" class="create-task-form-input" value="5" min="1" max="100">
                                                <small style="color: #666; font-size: 12px;">Always keep at least this many newest files</small>
                                            </div>
                                        </div>
                                        <div class="create-task-purge-warning">
                                            <span class="warning-icon"><span class="icon-warning"></span></span>
                                            <span class="warning-text">
                                                Files will be permanently deleted. The newest files will always be preserved up to the minimum count specified.
                                            </span>
                                        </div>
                                    </div>
                                </div>

                                <!-- Task Control Section -->
                                <div class="task-control-section" style="background: #fff7ed; padding: 12px; border-radius: 6px; margin: 16px 0; border-left: 4px solid #f59e0b;">
                                    <h4><span class="icon-pause"></span> Task Control</h4>
                                    <div class="create-task-form-row">
                                        <div class="create-task-form-group">
                                            <label class="create-task-form-label">Task Status</label>
                                            <select id="edit-task_suspended" class="create-task-form-select">
                                                <option value="0">Active</option>
                                                <option value="1">Suspended</option>
                                            </select>
                                        </div>
                                    </div>
                                </div>

                                <!-- Email Notifications Section -->
                                <div class="create-task-email-section">
                                    <h4><span class="icon-email"></span> Email Notifications (Available Soon...)</h4>
                                    <div class="create-task-form-group">
                                        <label class="create-task-form-label">Completion Notifications:</label>
                                        <div class="create-task-email-input-group">
                                            <input type="email" id="edit-completion_email_input" class="create-task-form-input" placeholder="Enter email address" disabled>
                                            <button type="button" class="btn btn-secondary" onclick="addEmail('completion')">Add</button>
                                        </div>
                                        <div id="completion_email_list" class="create-task-email-list"></div>
                                    </div>
                                </div>

                                <!-- Buttons -->
                                <div style="text-align: right; padding-top: 16px; border-top: 1px solid #e2e8f0; margin-top: 16px; display: flex; justify-content: space-between; align-items: center;">
                                    <button type="button" class="btn btn-warning" onclick="restoreOriginalData()" style="background: #f59e0b; color: white;"><span class="icon-refresh"></span> Restore Original</button>
                                    <div>
                                        <button type="button" class="btn btn-secondary" onclick="closeEditTaskModal()" style="margin-right: 8px;">Cancel</button>
                                        <button type="button" class="btn btn-primary" onclick="submitEditTask()">Update Task</button>
                                    </div>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            `;
        }
    </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="renderAddProjectModal">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script language='javascript'>
        function renderAddProjectModal() {
            return `
            <!-- Modal -->
            <div id="taskFileSelectorModal" class="task-file-selector-modal">
                <div class="task-file-selector-modal-content">
                    <div class="task-file-selector-modal-header">
                        <div>
                            <h2 class="task-file-selector-modal-title">Manage Project Files</h2>
                            <div class="task-file-selector-task-name"><strong id="taskFileSelectorTaskName">Export projects utility task</strong></div>
                        </div>
                        <button class="task-file-selector-close" onclick="taskFileSelectorCloseModal()">&times;</button>
                    </div>

                    <div class="task-file-selector-modal-body">
                        <!-- Associated Files Panel -->
                        <div class="task-file-selector-panel task-file-selector-associated-panel">
                            <div class="task-file-selector-panel-header">
                                <div class="task-file-selector-panel-title">
                                    <span class="task-file-selector-panel-icon"><span class="icon-folder"></span></span>
                                    Associated Projects
                                    <span class="task-file-selector-counter" id="taskFileSelectorAssociatedCounter">0</span>
                                </div>
                                <div class="task-file-selector-panel-subtitle">Projects currently linked to this task</div>
                            </div>
                            <div class="task-file-selector-panel-body">
                                <div class="task-file-selector-search-box">
                                    <input type="text" class="task-file-selector-search-input" placeholder="Search associated projects..."
                                        oninput="taskFileSelectorFilterFiles('associated', this.value)">
                                </div>
                                <div class="task-file-selector-file-list" id="taskFileSelectorAssociatedFiles">
                                    <!-- Associated files will be populated here -->
                                </div>
                            </div>
                        </div>

                        <!-- Available Files Panel -->
                        <div class="task-file-selector-panel task-file-selector-available-panel">
                            <div class="task-file-selector-panel-header">
                                <div style="display: flex; justify-content: space-between; align-items: flex-start; width: 100%;">
                                    <div>
                                        <div class="task-file-selector-panel-title">
                                            <span class="task-file-selector-panel-icon icon-bag"></span>
                                            Available Projects
                                            <span class="task-file-selector-counter" id="taskFileSelectorAvailableCounter">0</span>
                                        </div>
                                        <div class="task-file-selector-panel-subtitle">All projects in the filesystem</div>
                                    </div>
                                    <button class="btn" onclick="taskFileSelectorLoadAllProjects()"
                                        style="background: #22c55e; color: white; font-size: 0.875rem; padding: 8px 16px; border-radius: 6px; font-weight: 500; transition: all 0.2s ease;"
                                        id="taskFileSelectorLoadProjectsBtn"
                                        onmouseover="this.style.background='#16a34a'"
                                        onmouseout="this.style.background='#22c55e'">
                                        <span class="icon-refresh"></span> Refresh Projects
                                    </button>
                                </div>
                            </div>
                            <div class="task-file-selector-panel-body">
                                <div class="task-file-selector-search-box">
                                    <input type="text" class="task-file-selector-search-input" placeholder="Search available projects..."
                                        oninput="taskFileSelectorFilterFiles('available', this.value)">
                                </div>
                                <div class="task-file-selector-file-list" id="taskFileSelectorAvailableFiles">
                                    <!-- Available files will be populated here -->
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="task-file-selector-modal-footer">
                        <div>
                        </div>
                        <div style="display: flex; gap: 12px;">
                            <button class="btn-secondary" onclick="taskFileSelectorRestoreChanges()" style="background: #f59e0b; color: white;"><span class="icon-refresh"></span> Restore Original</button>
                            <button class="btn-secondary" onclick="taskFileSelectorCloseModal()">Cancel</button>
                            <button class="btn-primary" onclick="taskFileSelectorSaveChanges()">Save Changes</button>
                        </div>
                    </div>
                </div>
            </div>
            `;
        }
    </script>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.ExportTaskSection.JavaScript">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67451,30211.046845992</TimeChanged>
<TimeCreated>67443,59562.207595076</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    JAVASCRIPT
*/
]]></Content>
</UDLText>

<Method name="RenderJavaScript">
<Description>
Render JavaScript code for the page

This method generates the necessary JavaScript code for the page, including
modal JavaScript, message notification, and utility functions.

# Notes
This method is responsible for rendering the JavaScript code that is used
to interact with the Export Task Section page UI components.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK

    // Modals JavaScript
    Do ..AddProjectModalJavaScript()
    Do ..CreateTaskModalJavaScript()
    Do ..EditTaskModalJavaScript()
    Do ..TaskTableActionsJavaScript()
    Do ..TaskTableJavaScript()
    
    &html<<script type="text/javascript">                       
        // Utility function to escape HTML characters in a string
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }
        
        // Close modals when clicking outside
        window.onclick = function(event) {
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });
        }
    </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="TaskTableJavaScript">
<Description>
Render JavaScript code for the task table

This method generates the necessary JavaScript code for the task table,
including loading tasks from the API, rendering the table, and handling
user interactions.

# Returns
* `sc`: Status code indicating success

# Notes
This method is responsible for rendering the JavaScript code that is used
to interact with the task table UI component.

# Functions
* `loadExportTasks`: Loads tasks from the API and renders the table.
* `renderTasksTable`: Renders the task table based on the loaded tasks.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script type="text/javascript">
        // Global variables
        let currentTasks = [];
            
        /**
        * Loads tasks from the API and renders the task table.
        *
        * @async
        * @returns {Promise<void>}
        */
        async function loadExportTasks() {
            try {
                //console.log('Making API call to fetch tasks from database...');
                const container = document.getElementById('taskTableContainer');
                const taskCountElement = document.getElementById('taskCount');
                
                // Show loading state
                container.innerHTML = '<div class="loading">Loading tasks from database...</div>';
                
                PackageManagerAPI.checkExistingTasks('noCache')
                    .then(function(tasks) {
                        currentTasks = tasks.tasks;
                        renderTasksTable(currentTasks);
                        // Update task count in header
                        if (taskCountElement) {
                            taskCountElement.textContent = `Existing Tasks: ${currentTasks.length}`;
                        }
                    })
                    .catch(function(err) {
                        throw err;
                    });        
            } catch (error) {
                const container = document.getElementById('taskTableContainer');
                container.innerHTML = `
                    <div class="loading">
                        <p><span class="icon-cancel"></span> Error loading tasks from database</p>
                        <p style="font-size: 14px; color: #64748b; margin-top: 8px;">${error.message}</p>
                        <button class="btn-primary" onclick="loadExportTasks()" style="margin-top: 12px;">
                            <span class="icon-refresh"></span> Retry
                        </button>
                    </div>
                `;
            }
        }
        
        /**
        * Renders the task table based on the loaded tasks.
        *
        * @param {Array<Object>} tasks - The tasks to render.
        * @returns {void}
        */
        function renderTasksTable(tasks) {
            const container = document.getElementById('taskTableContainer');
            
            if (!tasks || tasks.length === 0) {
                container.innerHTML = `
                    <div class="loading">
                        <p><span class='icon-clipboard'></span> No tasks found in database</p>
                        <p style="font-size: 14px; color: #64748b; margin-top: 8px;">
                            Create your first task to get started
                        </p>
                        <button class="btn-primary" onclick="openCreateTaskModal()" style="margin-top: 12px;">
                            <span class="icon-plus"></span> Create New Task
                        </button>
                    </div>
                `;
                return;
            }
            
            //console.log(`Rendering ${tasks.length} tasks from database`);
            
            let html = `
                <table class="styled-table">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Description</th>
                            <th>Namespace</th>
                            <th>Priority</th>
                            <th>Status</th>
                            <th>Projects</th>
                            <th>Last Started</th>
                            <th>Last Finished</th>
                            <th>Execution Time (s)</th>
                            <th>Last Execution Status</th>
                            <th>Next Run</th>
                            <th>Start Date</th>
                            <th>End Date</th>
                            <th>Run As User</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            
            tasks.forEach(task => {
                const statusClass = task.Suspended ? 'status-suspended' : 'status-active';
                const statusText = task.Suspended ? 'Suspended' : 'Active';
                let priorityClass = '';
                if (task.Priority == 1) {
                    priorityClass += 'Low';
                } else if (task.Priority == 0) {
                    priorityClass += 'Normal';
                } else if (task.Priority == 2) {
                    priorityClass += 'High';
                }
                
                // Data di ultima esecuzione
                const displayStarted = task.DisplayStarted?.replace(' ', 'T') ? new Date(task.DisplayStarted.replace(' ', 'T')) : '-';
                const displayFinished = task.DisplayFinished?.replace(' ', 'T') ? new Date(task.DisplayFinished.replace(' ', 'T')) : '-';
                const DisplayStartDate = task.DisplayStartDate? new Date(task.DisplayStartDate) : '-';
                const DisplayEndDate = task.DisplayEndDate === "None" ? '-' : new Date(task.DisplayEndDate);

                // Stato ultima esecuzione
                const displayStatus = task.DisplayStarted ? (task.DisplayStatus || '') : '-';

                // Calcola tempo di esecuzione in secondi solo se entrambe le date sono valide
                let execution_time_seconds = '';
                if (displayStarted instanceof Date && !isNaN(displayStarted) &&
                    displayFinished instanceof Date && !isNaN(displayFinished)) {
                    
                    const diffInMs = displayFinished - displayStarted;
                    execution_time_seconds = diffInMs / 1000;
                }

                // Data di prossima esecuzione
                let nextScheduled = null;
                if (task.DisplayDayNextScheduled && task.TimeNextScheduled) {
                    nextScheduled = new Date(`${task.DisplayDayNextScheduled}T${task.TimeNextScheduled}`);
                }

                // Get projects associated with the current task
                let projects = task.Projects
                // Set the icon for tasks associated with projects
                let projectsIcon = "<span class='icon-bag'></span>";
                let projectsIconTitle = "View Projects";
                if (projects.length === 0) {
                    // Task without any associated project
                    projectsIcon = "<span class='icon-folder'></span>";
                    projectsIconTitle = "Associate projects to this task";
                }

                // User running the task
                const running_user = task.RunAsUser;

                html += `
                    <tr>
                        <td>${escapeHtml(task.ID || '')}</td>
                        <td><strong>${escapeHtml(task.Name || '')}</strong></td>
                        <td>${escapeHtml(task.Description || '-')}</td>
                        <td>${escapeHtml(task.NameSpace || '')}</td>
                        <td><span class="priority-badge priority-${priorityClass}">${priorityClass}</span></td>
                        <td><span class="status-badge ${statusClass}">${statusText}</span></td>
                        <td>
                            <button type="button" class="btn-icon" 
                                data-task-name="${escapeHtml(task.Name)}"
                                data-task-id="${task.ID}"
                                data-task-projects="${escapeHtml(btoa(unescape(encodeURIComponent(JSON.stringify(task.Projects)))))}" 
                                onclick="showProjects(this)"
                                title="${projectsIconTitle}">
                                ${projectsIcon}
                            </button>
                        </td>
                        <td>${displayStarted ? displayStarted.toLocaleString() : 'Never'}</td>
                        <td>${displayFinished ? displayFinished.toLocaleString() : '-'}</td>
                        <td>${execution_time_seconds !== '' ? `${execution_time_seconds} sec` : '-'}</td>                        
                        <td>${displayStatus !== '' ? `${escapeHtml(displayStatus)}` : '-'}</td>
                        <td>${nextScheduled ? nextScheduled.toLocaleString() : '-'}</td>
                        <td>${DisplayStartDate 
                            ? DisplayStartDate.toLocaleDateString('it-IT', { day: '2-digit', month: '2-digit', year: 'numeric' }) 
                        : '-'}</td>
                        <td>${DisplayEndDate === "-"
                            ? '-' : DisplayEndDate.toLocaleDateString('it-IT', { day: '2-digit', month: '2-digit', year: 'numeric' }) }</td>
                        <td>${running_user ? running_user.toLocaleString() : 'Unknown'}</td>
                        <td>
                            <div class="actions">
                                <button type="button" class="btn-icon icon-edit" onclick="editTask('${escapeHtml(task.ID)}')" title="Edit Task"></button>
                                <button type="button" class="btn-icon icon-run" onclick="runTask('${escapeHtml(task.ID)}')" title="Run Task"></button>
                                <button type="button" class="btn-icon icon-delete" onclick="deleteTask('${escapeHtml(task.ID)}')" title="Delete Task"></button>
                            </div>
                        </td>
                    </tr>
                `;
            });
            
            html += '</tbody></table>';
            container.innerHTML = html;
        }
        </script>>
    Return sc
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
/*
    Modals JAVASCRIPT
*/
]]></Content>
</UDLText>

<Method name="CreateTaskModalJavaScript">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script type="text/javascript">

        /**
        * Opens the create task modal and resets the form.
        *
        * @returns {void}
        */
        function openCreateTaskModal() {
            const modal = document.getElementById('createTaskModal');
            modal.style.display = 'flex';  // Force flex display
            // Reset form
            document.getElementById('createTaskForm').reset();
            initializeCreateTaskForm();
        }

        // Close create task modal
        function closeCreateTaskModal() {
            const modal = document.getElementById('createTaskModal');
            modal.style.display = 'none';  // Hide it
        }        
        
        /**
        * Handles changes to the schedule type dropdown.
        *
        * @param {string} [modal='create'] - The modal type (create or edit).
        * @returns {void}
        */
        function handleScheduleTypeChange(modal = 'create') {
            let schedule_type_id = 'schedule_type'; // For create modal
            let daily_options_id = 'daily_options';
            let weekly_options_id = 'weekly_options';
            let monthly_options_id = 'monthly_options';
            if (modal === 'edit') {
                schedule_type_id = 'edit-schedule_type'; // for edit modal
                daily_options_id = 'edit-daily_options';
                weekly_options_id = 'edit-weekly_options';
                monthly_options_id = 'edit-monthly_options';
            }
            const scheduleType = document.getElementById(schedule_type_id).value;
            
            // Hide all schedule-specific sections
            document.getElementById(daily_options_id).classList.add('hidden');
            document.getElementById(weekly_options_id).classList.add('hidden');
            document.getElementById(monthly_options_id).classList.add('hidden');
            //document.getElementById('after_task_options').classList.add('hidden');
            
            // Show relevant section based on selection
            switch(scheduleType) {
                case 'daily':
                    document.getElementById(daily_options_id).classList.remove('hidden');
                    break;
                case 'weekly':
                    document.getElementById(weekly_options_id).classList.remove('hidden');
                    break;
                case 'monthly':
                    document.getElementById(monthly_options_id).classList.remove('hidden');
                    break;
                //case 'monthly_by_day':
                //    document.getElementById('monthly_options').classList.remove('hidden');
                //    break;
                //case 'after_task':
                //    document.getElementById('after_task_options').classList.remove('hidden');
                //    break;
            }
        }
        
        /**
        * Handles changes to the frequency type dropdown.
        *
        * @param {string} [modal='create'] - The modal type (create or edit).
        * @returns {void}
        */
        function handleFrequencyTypeChange(modal = 'create') {
            let freq_type_id = 'frequency_type'; // For create modal
            if (modal === 'edit') {
                freq_type_id = 'edit-frequency_type'; // for edit modal
            }
            const frequencyType = document.getElementById(freq_type_id).value;
            //const multipleTimesOptions = document.getElementById('multiple_times_options');
            
            //if (frequencyType === 'multiple') {
            //    multipleTimesOptions.classList.remove('hidden');
            //} else {
            //    multipleTimesOptions.classList.add('hidden');
            //}
        }
        
        /**
        * Handles changes to the purge toggle checkbox.
        *
        * @param {string} [modal='create'] - The modal type (create or edit).
        * @returns {void}
        */
        function handlePurgeToggle(modal = 'create') {
            let purgeEnabled_id = 'purge_enabled'; // For create modal
            let purgeOptions_id = 'purge_options'; // For create modal
            if (modal === 'edit') {
                purgeEnabled_id = 'edit-purge_enabled'; // for edit modal
                purgeOptions_id = 'edit-purge_options'; // for edit modal
            }
            const purgeEnabled = document.getElementById(purgeEnabled_id).checked;
            const purgeOptions = document.getElementById(purgeOptions_id);
            
            if (purgeEnabled) {
                purgeOptions.classList.remove('hidden');
            } else {
                purgeOptions.classList.add('hidden');
            }
        }

        // Email management functions
        let emailNotifications = {
            completion: [],
            error: [],
            expiration: []
        };
                
        /**
        * Adds an email address to the email notifications list.
        *
        * @param {string} type - The type of email notification (completion, error, or expiration).
        * @returns {void}
        */
        function addEmail(type) {
            const inputId = `${type}_email_input`;
            const email = document.getElementById(inputId).value.trim();
            
            // Basic email validation
            const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
            if (!email || !emailRegex.test(email)) {
                alert('Please enter a valid email address');
                return;
            }
            
            // Check if email already exists
            if (emailNotifications[type].includes(email)) {
                alert('Email address already added');
                return;
            }
            
            // Add email to list
            emailNotifications[type].push(email);
            document.getElementById(inputId).value = '';
            updateEmailDisplay(type);
        }
        
        /**
        * Removes an email address from the email notifications list.
        *
        * @param {string} type - The type of email notification (completion, error, or expiration).
        * @param {string} email - The email address to remove.
        * @returns {void}
        */
        function removeEmail(type, email) {
            const index = emailNotifications[type].indexOf(email);
            if (index > -1) {
                emailNotifications[type].splice(index, 1);
                updateEmailDisplay(type);
            }
        }

        /**
        * Updates the email notifications display.
        *
        * @param {string} type - The type of email notification (completion, error, or expiration).
        * @returns {void}
        */ 
        function updateEmailDisplay(type) {
            const container = document.getElementById(`${type}_email_list`);
            container.innerHTML = emailNotifications[type].map(email => 
                `<span class="email-tag">
                    ${escapeHtml(email)}
                    <span class="remove-email" onclick="removeEmail('${type}', '${email}')">&times;</span>
                </span>`
            ).join('');
        }

        /**
        * Initializes the create task form with default values.
        *
        * @returns {void}
        */
        function initializeCreateTaskForm() {
            // Reset email lists
            emailNotifications = { completion: [] };
            updateEmailDisplay('completion');
            
            // Set current time
            const now = new Date();
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            document.getElementById('run_once_time').value = `${hours}:${minutes}`;

            // Set current date
            const today = new Date();
            const yyyy = today.getFullYear();
            const mm = String(today.getMonth() + 1).padStart(2, '0');
            const dd = String(today.getDate()).padStart(2, '0');
            document.getElementById('start_date').value = `${yyyy}-${mm}-${dd}`;

            // Set default values
            document.getElementById('schedule_type').value = 'daily';
            document.getElementById('frequency_type').value = 'once';
                    
            // Set purge defaults
            document.getElementById('purge_enabled').checked = false;
            document.getElementById('retention_days').value = 60;
            document.getElementById('min_files_keep').value = 5;

            // Handle initial state
            handleScheduleTypeChange();
            handleFrequencyTypeChange();
            handlePurgeToggle(); 
        }

        /**
        * Submits the new task form data to the API.
        *
        * @async
        * @returns {Promise<void>}
        */
        async function submitNewTask(username) {
            try {
                // Collect basic task data
                const taskName = document.getElementById('task_name').value.trim();
                const taskDesc = document.getElementById('task_desc').value.trim();
            
                // Validate required fields
                if (!taskName) {
                    alert('Task name is required');
                    return;
                }
                
                // Check that the first character is not a number
                const firstChar = taskName.trim().charAt(0);
                if (/^[0-9]$/.test(firstChar)) {
                    alert('Task name cannot start with a number');
                    return;
                }

                let schedule_type = document.getElementById('schedule_type').value.trim();
                let id_to_verify = '';
                let max_value = 0;
                if (schedule_type === 'daily') {
                    id_to_verify = 'every_n_days';
                    max_value = 7
                } else if (schedule_type === 'weekly') {
                    id_to_verify = 'every_n_weeks';
                    max_value = 5
                } else if (schedule_type === 'monthly') {
                    id_to_verify = 'day_of_month';
                    max_value = 31
                } else if (schedule_type === 'once') {
                    // continue
                } else {
                    alert('Please choose a valid schedule type');
                    return; 
                }
                if (id_to_verify) {
                    if (document.getElementById(id_to_verify).value.trim() > max_value) {
                        alert('Invalid value for ' + id_to_verify + '. Max value is ' + max_value);
                        return;
                    }
                }

                // Collect purge configuration
                const purgeEnabled = document.getElementById('purge_enabled').checked;
                let purgeConfig = {
                    enabled: purgeEnabled
                };
                
                if (purgeEnabled) {
                    const retentionDays = parseInt(document.getElementById('retention_days').value);
                    const minFilesKeep = parseInt(document.getElementById('min_files_keep').value);
                    
                    // Validate purge settings
                    if (!retentionDays || retentionDays < 1) {
                        alert('Retention days must be at least 1');
                        return;
                    }
                    
                    if (!minFilesKeep || minFilesKeep < 1) {
                        alert('Minimum files to keep must be at least 1');
                        return;
                    }
                    
                    purgeConfig.retentionDays = retentionDays;
                    purgeConfig.minFilesKeep = minFilesKeep;
                }

                // Collect schedule data
                const scheduleType = document.getElementById('schedule_type').value;
                let startDate = document.getElementById('start_date').value;
                if (!startDate) {
                    const today = new Date();
                    const yyyy = today.getFullYear();
                    const mm = String(today.getMonth() + 1).padStart(2, '0');
                    const dd = String(today.getDate()).padStart(2, '0');
                    startDate = `${yyyy}-${mm}-${dd}`; // Format: YYYY-MM-DD
                }

                const endDate = document.getElementById('end_date').value;
                const frequencyType = document.getElementById('frequency_type').value;
                const priority_type = document.getElementById('priority_type').value;

                let scheduleData = {
                    type: scheduleType,
                    startDate: startDate,
                    endDate: endDate,
                    frequencyType: frequencyType,
                    priority: priority_type
                };
                
                // Add schedule-specific data
                switch(scheduleType) {
                    case 'daily':
                        scheduleData.everyNDays = parseInt(document.getElementById('every_n_days').value) || 1;
                        break;
                    case 'weekly':
                        scheduleData.everyNWeeks = parseInt(document.getElementById('every_n_weeks').value) || 1;
                        const output = Array.from(document.querySelectorAll('.create-task-day-checkbox input:checked'))
                            .map(cb => Number(cb.value))         // convert to numbers
                            .sort((a, b) => a - b)               // numeric sort
                            .join('');                           // join with no separator
                        scheduleData.daysOfWeek = output;
                        break;
                    case 'monthly':
                        scheduleData.everyNMonths = parseInt(document.getElementById('every_n_months').value) || 1;
                        scheduleData.dayOfMonth = parseInt(document.getElementById('day_of_month').value) || 1;
                        break;
                    //case 'monthly_by_day':
                    //    scheduleData.everyNMonths = parseInt(document.getElementById('every_n_months').value) || 1;
                    //   scheduleData.dayOfMonth = parseInt(document.getElementById('day_of_month').value) || 1;
                    //    break;
                    //case 'after_task':
                    //    scheduleData.dependentTask = document.getElementById('dependent_task').value;
                    //    break;
                }
                
                // Add frequency data
                if (frequencyType === 'once') {
                    scheduleData.runTime = document.getElementById('run_once_time').value;
                } else {
                    scheduleData.intervalType = document.getElementById('interval_type').value;
                    scheduleData.intervalValue = parseInt(document.getElementById('interval_value').value) || 1;
                    scheduleData.firstRunTime = document.getElementById('first_run_time').value;
                    scheduleData.lastRunTime = document.getElementById('last_run_time').value;
                }
                
                // Prepare form data for API
                const formData = {
                    task_name: taskName,
                    task_desc: taskDesc,
                    username: username,
                    schedule: scheduleData,
                    purge_config: purgeConfig,
                    email_notifications: emailNotifications
                };
                
                PackageManagerAPI.createTask(formData,'noCache')
                    .then(function(tasks) {
                        alert('Task created successfully!');
                        closeCreateTaskModal();
                        loadExportTasks();
                    })
                    .catch(function(err) {
                        throw err;
                    });        
            } catch (error) {
                const now = new Date();
                const formatted_date_time = `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())} ${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(now.getSeconds())}`;
                alert(`${formatted_date_time} - Error creating task: ${error.message}.`);
            }
        }

        </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="TaskTableActionsJavaScript">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script type="text/javascript">

        /**
        * Deletes a task by ID.
        *
        * @param {string} taskId - The ID of the task to delete.
        * @async
        * @returns {Promise<void>}
        */
        async function deleteTask(taskId) {
            const task = currentTasks.find(t => t.ID === taskId.toString());
            if (!task) {
                alert('Task not found');
                return;
            }
            if (!confirm(`Are you sure you want to delete the task '${taskId}-${task.Name}'?`)) {
                return;
            }
            
            PackageManagerAPI.deleteTask(taskId)
                .then(function(tasks) {
                    loadExportTasks();
                    alert('Task deleted successfully!');
                })
                .catch(function(err) {
                    alert('Error deleting task: ' + err.message);
                });        
        }
        
        /**
        * Runs a task by ID.
        *
        * @param {string} taskId - The ID of the task to run.
        * @async
        * @returns {Promise<void>}
        */
        async function runTask(taskId) {
            const task = currentTasks.find(t => t.ID === taskId.toString());
            if (!task) {
                alert('Task not found');
                return;
            }
            if (!confirm(`Do you really want to run the task '${taskId}-${task.Name}' now?`)) {
                return;
            }
            
            PackageManagerAPI.runTask(taskId)
                .then(function(tasks) {
                    loadExportTasks();
                    alert('Task run was scheduled successfully!');
                })
                .catch(function(err) {
                    alert(`Error while attempting to run the task: ${err.message}`);
                });        
        }

        </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="EditTaskModalJavaScript">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script type="text/javascript">

        // Store original task data for restore functionality
        let originalTaskData = null;
        let currentEditingTaskId = null;

        /**
        * Edits a task by ID.
        *
        * @param {string} taskId - The ID of the task to edit.
        * @returns {void}
        */
        function editTask(taskId) {
            const task = currentTasks.find(t => t.ID === taskId);
            if (!task) {
                alert('Task not found');
                return;
            }
            openEditTaskModal(task);                  
        }
        
        /**
        * Opens the edit task modal and populates the form with task data.
        *
        * @param {Object} task - The task data to populate the form with.
        */      
        async function openEditTaskModal(task) {
            const modal = document.getElementById('renderEditTaskModal');
            if (!modal) {
                console.error('Edit modal not found in DOM');
                return;
            }

            // Store the task ID we're editing
            currentEditingTaskId = task.ID;

            modal.style.display = 'flex';  // Force flex display

            // Get task info from API
            PackageManagerAPI.getTaskInfo(task.ID)
                .then(function(taskData) {
                    // Store original data for restore functionality
                    originalTaskData = JSON.parse(JSON.stringify(taskData)); // Deep copy
                    
                    // Reset form first
                    document.getElementById('EditTaskForm').reset();
                    
                    // Populate the form with the retrieved task data
                    populateFormWithTaskData(taskData);
                })
                .catch(function(err) {
                    alert(`It was impossible to retrieve task information. ${err.message}`);
                });        
        }

        // Close edit task modal and clear stored data
        function closeEditTaskModal() {
            // Use the correct modal ID from your HTML
            const modal = document.getElementById('renderEditTaskModal');
            if (modal) {
                modal.style.display = 'none';  // Hide it
            }
            
            // Clear stored data
            originalTaskData = null;
            currentEditingTaskId = null;
        }
        
        // Restore original task data
        function restoreOriginalData() {
            if (!originalTaskData) {
                console.warn('No original data to restore');
                return;
            }
            
            if (confirm('Are you sure you want to restore the original task settings? All current changes will be lost.')) {
                populateFormWithTaskData(originalTaskData);
            }
        }

        // Email management functions
        let emailNotificationsEdit = {
            completion: [],
            error: [],
            expiration: []
        };
        
        // Populate form with existing task data
        function populateFormWithTaskData(taskData) {
            //console.log('Populating form with task data:', taskData);
            try {
                // Add a small delay to ensure DOM elements are ready
                setTimeout(() => {
                    // Basic task information
                    const taskNameElement = document.getElementById('edit-task_name');
                    const taskDescElement = document.getElementById('edit-task_desc');
                    
                    if (taskNameElement) {
                        taskNameElement.value = taskData.Name || '';
                        //console.log('Set task name to:', taskData.Name);
                    } else {
                        console.error('edit-task_name element not found');
                    }
                    
                    if (taskDescElement) {
                        taskDescElement.value = taskData.Description || '';
                        //console.log('Set task description to:', taskData.Description);
                    } else {
                        console.error('edit-task_desc element not found');
                    }
                    
                    // Read-only status fields (if they exist)
                    const statusElement = document.getElementById('edit-task_status');
                    if (statusElement) {
                        statusElement.value = taskData.DisplayStatus || 'Unknown';
                    }
                    
                    const lastRunElement = document.getElementById('edit-last_run');
                    if (lastRunElement) {
                        lastRunElement.value = taskData.DisplayFinished || 'Never';
                    }
                    
                    const nextScheduledElement = document.getElementById('edit-next_scheduled');
                    if (nextScheduledElement) {
                        const nextTime = taskData.TimeNextScheduled !== "00:00:00" ? taskData.TimeNextScheduled : 'Not scheduled';
                        nextScheduledElement.value = nextTime;
                    }
                    
                    const taskClassElement = document.getElementById('edit-task_class');
                    if (taskClassElement) {
                        taskClassElement.value = taskData.TaskClass || '';
                    }
                    
                    // Task suspended status
                    const suspendedElement = document.getElementById('edit-task_suspended');
                    if (suspendedElement) {
                        suspendedElement.value = taskData.Suspended ? '1' : '0';
                    }
                    
                    // Dates
                    if (taskData.StartDate) {
                        const startDateElement = document.getElementById('edit-start_date');
                        if (startDateElement) {
                            // Ensure date is in YYYY-MM-DD format
                            const startDate = new Date(taskData.StartDate);
                            if (!isNaN(startDate.getTime())) {
                                startDateElement.value = startDate.toISOString().split('T')[0];
                            }
                        }
                    }

                    if (taskData.EndDate) {
                        const endDateElement = document.getElementById('edit-end_date');
                        if (endDateElement) {
                            const endDate = new Date(taskData.EndDate);
                            if (!isNaN(endDate.getTime())) {
                                endDateElement.value = endDate.toISOString().split('T')[0];
                            }
                        }
                    }
                    
                    // Priority
                    const priorityElement = document.getElementById('edit-priority_type');
                    if (priorityElement) {
                        priorityElement.value = taskData.Priority || '0';
                    }
                    
                    // Purge Settings
                    const purge_checkbox = document.getElementById('edit-purge_enabled');
                    if (purge_checkbox) {
                        purge_checkbox.checked = taskData?.Settings?.EnablePurge === '1' ? true : false;
                        if (purge_checkbox.checked) {
                            const retention_days = document.getElementById('edit-retention_days');
                            const min_files_keep = document.getElementById('edit-min_files_keep');
                            retention_days.value = taskData?.Settings?.PurgeAfterNDays
                            min_files_keep.value = taskData?.Settings?.MinimumNumberOfFilesToKeep
                        }
                    }


                    // Schedule type based on TimePeriod
                    let scheduleType = 'daily'; // default
                    switch(parseInt(taskData.TimePeriod)) {
                        case 0:
                            scheduleType = 'daily';
                            break;
                        case 1:
                            scheduleType = 'weekly';
                            break;
                        case 2:
                            scheduleType = 'monthly';
                            break;
                        case 5:
                            scheduleType = 'once';
                            break;
                        default:
                            scheduleType = 'daily';
                    }
                    
                    const scheduleTypeElement = document.getElementById('edit-schedule_type');
                    if (scheduleTypeElement) {
                        scheduleTypeElement.value = scheduleType;
                        //console.log('Set schedule type to:', scheduleType);

                        const event = new Event('change', { bubbles: true });
                        scheduleTypeElement.dispatchEvent(event);
                    }
                                        
                    // Set schedule-specific values (with another small delay to ensure options are shown)
                    setTimeout(() => {
                        switch(scheduleType) {
                            case 'daily':
                                const everyDaysElement = document.getElementById('edit-every_n_days');
                                if (everyDaysElement) {
                                    everyDaysElement.value = taskData.TimePeriodEvery || 1;
                                }
                                break;
                            case 'weekly':
                                const everyWeeksElement = document.getElementById('edit-every_n_weeks');
                                if (everyWeeksElement) {
                                    everyWeeksElement.value = taskData.TimePeriodEvery || 1;
                                }
                                
                                // Handle days of week from TimePeriodDay
                                // TimePeriodDay format: Sunday=1, Monday=2, ..., Saturday=7
                                // String like "23456" means Monday through Friday
                                if (taskData.TimePeriodDay) {
                                    //console.log('Processing TimePeriodDay:', taskData.TimePeriodDay);
                                    
                                    // Reset all checkboxes first
                                    document.querySelectorAll('.edit-task-day-checkbox input').forEach(cb => cb.checked = false);
                                    
                                    // Check the selected days
                                    const daysString = taskData.TimePeriodDay.toString();
                                    for (let i = 0; i < daysString.length; i++) {
                                        const dayValue = daysString.charAt(i);
                                        const checkbox = document.querySelector(`.edit-task-day-checkbox input[value="${dayValue}"]`);
                                        if (checkbox) {
                                            checkbox.checked = true;
                                            //console.log('Checked day:', dayValue);
                                        } else {
                                            console.warn('Checkbox not found for day value:', dayValue);
                                        }
                                    }
                                }
                                break;
                            case 'monthly':
                                const everyMonthsElement = document.getElementById('edit-every_n_months');
                                if (everyMonthsElement) {
                                    everyMonthsElement.value = taskData.TimePeriodEvery || 1;
                                }
                                
                                // For monthly, if TimePeriodDay is set, use it, otherwise extract from StartDate
                                let dayOfMonth = 1;
                                if (taskData.TimePeriodDay && taskData.TimePeriodDay !== '') {
                                    dayOfMonth = parseInt(taskData.TimePeriodDay) || 1;
                                } else if (taskData.StartDate) {
                                    dayOfMonth = new Date(taskData.StartDate).getDate();
                                }
                                
                                const dayOfMonthElement = document.getElementById('edit-day_of_month');
                                if (dayOfMonthElement) {
                                    dayOfMonthElement.value = dayOfMonth;
                                }
                                break;
                        }
                    }, 100); // Small delay to ensure schedule options are visible
                    
                    // Trigger change event
                    if (typeof handleScheduleTypeChange === 'function') {
                        handleScheduleTypeChange('edit');
                    }

                    // Time settings
                    if (taskData.DailyStartTime) {
                        // Convert from HH:MM:SS to HH:MM format
                        const timeParts = taskData.DailyStartTime.split(':');
                        if (timeParts.length >= 2) {
                            const runTimeElement = document.getElementById('edit-run_once_time');
                            if (runTimeElement) {
                                const hours = timeParts[0].padStart(2, '0');
                                const minutes = timeParts[1].padStart(2, '0');
                                runTimeElement.value = `${hours}:${minutes}`;
                            }
                        }
                    }
                    
                    // Frequency type (for now, default to 'once' as that seems to be the main use case)
                    const frequencyElement = document.getElementById('edit-frequency_type');
                    if (frequencyElement) {
                        frequencyElement.value = 'once';

                        // Trigger change event
                        if (typeof handleFrequencyTypeChange === 'function') {
                            handleFrequencyTypeChange('edit');
                        }
                    }

                    // Trigger change event on purge checkbox
                    if (typeof handlePurgeToggle === 'function') {
                        handlePurgeToggle('edit');
                    }

                }, 50); // Small delay to ensure form elements are rendered
                
            } catch (error) {
                //console.error('Error populating form with task data:', error);
                alert('Error loading task data into form. Please try again.');
            }
        }

        // Submit new task
        async function submitEditTask() {
            try {
                if (!currentEditingTaskId) {
                    alert('No task selected for editing');
                    return;
                }

                // Collect basic task data
                const taskName = document.getElementById('edit-task_name').value.trim();
                const taskDesc = document.getElementById('edit-task_desc').value.trim();
                const taskSuspended = document.getElementById('edit-task_suspended').value;

                // Validate required fields
                if (!taskName) {
                    alert('Task name is required');
                    return;
                }
                
                // Check that the first character is not a number
                const firstChar = taskName.trim().charAt(0);
                if (/^[0-9]$/.test(firstChar)) {
                    alert('Task name cannot start with a number');
                    return;
                }

                let schedule_type = document.getElementById('edit-schedule_type').value.trim();
                let id_to_verify = '';
                let max_value = 0;
                if (schedule_type === 'daily') {
                    id_to_verify = 'edit-every_n_days';
                    max_value = 7
                } else if (schedule_type === 'weekly') {
                    id_to_verify = 'edit-every_n_weeks';
                    max_value = 5
                } else if (schedule_type === 'monthly') {
                    id_to_verify = 'edit-day_of_month';
                    max_value = 31
                } else if (schedule_type === 'once') {
                    // continue
                } else {
                    alert('Please choose a valid schedule type');
                    return; 
                }
                if (id_to_verify) {
                    if (document.getElementById(id_to_verify).value.trim() > max_value) {
                        alert('Invalid value for ' + id_to_verify + '. Max value is ' + max_value);
                        return;
                    }
                }

                // Collect purge configuration
                const purgeEnabled = document.getElementById('edit-purge_enabled').checked;
                let purgeConfig = {
                    enabled: purgeEnabled
                };
                
                if (purgeEnabled) {
                    const retentionDays = parseInt(document.getElementById('edit-retention_days').value);
                    const minFilesKeep = parseInt(document.getElementById('edit-min_files_keep').value);
                    
                    // Validate purge settings
                    if (!retentionDays || retentionDays < 1) {
                        alert('Retention days must be at least 1');
                        return;
                    }
                    
                    if (!minFilesKeep || minFilesKeep < 1) {
                        alert('Minimum files to keep must be at least 1');
                        return;
                    }
                    
                    purgeConfig.retentionDays = retentionDays;
                    purgeConfig.minFilesKeep = minFilesKeep;
                }

                // Collect schedule data
                const scheduleType = document.getElementById('edit-schedule_type').value;
                let startDate = document.getElementById('edit-start_date').value;
                if (startDate === originalTaskData.StartDate) {
                    startDate = ''; // do not pass the start date if it wasn't modified to avoid errors (task schedule won't allow to set past dates as starting date)
                }
                /*if (!startDate) {
                    const today = new Date();
                    const yyyy = today.getFullYear();
                    const mm = String(today.getMonth() + 1).padStart(2, '0');
                    const dd = String(today.getDate()).padStart(2, '0');
                    startDate = `${yyyy}-${mm}-${dd}`; // Format: YYYY-MM-DD
                }*/

                const endDate = document.getElementById('edit-end_date').value;
                const frequencyType = document.getElementById('edit-frequency_type').value;
                const priority_type = document.getElementById('edit-priority_type').value;

                let scheduleData = {
                    type: scheduleType,
                    startDate: startDate,
                    endDate: endDate,
                    frequencyType: frequencyType,
                    priority: priority_type
                };
                
                // Add schedule-specific data
                switch(scheduleType) {
                    case 'daily':
                        scheduleData.everyNDays = parseInt(document.getElementById('edit-every_n_days').value) || 1;
                        break;
                    case 'weekly':
                        scheduleData.everyNWeeks = parseInt(document.getElementById('edit-every_n_weeks').value) || 1;
                        const output = Array.from(document.querySelectorAll('.edit-task-day-checkbox input:checked'))
                            .map(cb => Number(cb.value))         // convert to numbers
                            .sort((a, b) => a - b)               // numeric sort
                            .join('');                           // join with no separator
                        scheduleData.daysOfWeek = output;
                        break;
                    case 'monthly':
                        scheduleData.everyNMonths = parseInt(document.getElementById('edit-every_n_months').value) || 1;
                        scheduleData.dayOfMonth = parseInt(document.getElementById('edit-day_of_month').value) || 1;
                        break;
                    //case 'monthly_by_day':
                    //    scheduleData.everyNMonths = parseInt(document.getElementById('every_n_months').value) || 1;
                    //   scheduleData.dayOfMonth = parseInt(document.getElementById('day_of_month').value) || 1;
                    //    break;
                    //case 'after_task':
                    //    scheduleData.dependentTask = document.getElementById('dependent_task').value;
                    //    break;
                }
                
                // Add frequency data
                if (frequencyType === 'once') {
                    scheduleData.runTime = document.getElementById('edit-run_once_time').value;
                } else {
                    scheduleData.intervalType = document.getElementById('edit-interval_type').value;
                    scheduleData.intervalValue = parseInt(document.getElementById('edit-interval_value').value) || 1;
                    scheduleData.firstRunTime = document.getElementById('edit-first_run_time').value;
                    scheduleData.lastRunTime = document.getElementById('edit-last_run_time').value;
                }
                
                // Prepare form data for API
                const formData = {
                    task_id: currentEditingTaskId,  
                    task_name: taskName,
                    task_desc: taskDesc,
                    task_suspended: taskSuspended,
                    schedule: scheduleData,
                    purge_config: purgeConfig,
                    email_notifications: emailNotificationsEdit
                };
                
                PackageManagerAPI.updateTask(currentEditingTaskId, formData, 'noCache')
                    .then(function(taskData) {
                        alert('Task updated successfully!');
                        closeEditTaskModal();
                        loadExportTasks(); // Refresh the task list
                    })
                    .catch(function(err) {
                        alert(`Error updating task. ${err.message}`);
                    });        
                
            } catch (error) {
                //console.error('Error updating task:', error.message);
                alert(`Error updating task: ${error.message}`);
            }
        }

        </script>>
    Return sc
]]></Implementation>
</Method>

<Method name="AddProjectModalJavaScript">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script type="text/javascript">
        let taskFileSelectorAllProjects = [];
        let taskFileSelectorOriginalProjects = [];

        async function showProjects(buttonElement) {
            const taskName = buttonElement.getAttribute('data-task-name');
            const taskID = parseInt(buttonElement.getAttribute('data-task-id'));
            const taskProjectsJson = atob(unescape(buttonElement.getAttribute('data-task-projects')));

            let taskProjects = [];
            try {
                taskProjects = taskProjectsJson ? JSON.parse(taskProjectsJson) : [];
            } catch (e) {
                console.error('Error parsing projects JSON:', e);
                taskProjects = [];
            }

            if (taskProjects.length === 0) {
                console.log("No projects for this task");
            }

            // You may fetch real task data here if needed.
            taskFileSelectorData = {
                ID: taskID,
                Name: taskName,
                Description: `Projects for task: ${taskName}`,
                Projects: taskProjects
            };
            
            taskFileSelectorOriginalProjects = JSON.parse(JSON.stringify(taskProjects)); // deep clone

            taskFileSelectorOpenModal();
        }

        let taskFileSelectorSelected = {
            associated: new Set(),
            available: new Set()
        };

        function taskFileSelectorOpenModal() {
            const modal = document.getElementById("taskFileSelectorModal");
            document.getElementById("taskFileSelectorTaskName").textContent = taskFileSelectorData.Description;
            taskFileSelectorLoadAllProjects();
            modal.classList.add("show");
            taskFileSelectorUpdateTransferButtons();
        }

        function taskFileSelectorCloseModal() {
            const modal = document.getElementById("taskFileSelectorModal");
            taskFileSelectorSelected.associated.clear();
            taskFileSelectorSelected.available.clear();
            modal.classList.remove("show");
        }

        function taskFileSelectorRestoreChanges() {
            taskFileSelectorData.Projects = JSON.parse(JSON.stringify(taskFileSelectorOriginalProjects));
            taskFileSelectorPopulateFiles();
            taskFileSelectorSelected.associated.clear();
            taskFileSelectorSelected.available.clear();
            taskFileSelectorUpdateTransferButtons();
            
        }

        async function taskFileSelectorLoadAllProjects() {
            const btn = document.getElementById("taskFileSelectorLoadProjectsBtn");
            const originalText = btn.innerHTML;

            
            btn.innerHTML = "Loading...";
            btn.disabled = true;

            document.getElementById("taskFileSelectorAvailableFiles").innerHTML = `<div class="empty-state"><div class="empty-icon icon-hourglass"></div><div>Loading projects...</div></div>`;

            setTimeout(async () => {

                PackageManagerAPI.getProjects('noCache')
                    .then(function(response) {
                        taskFileSelectorAllProjects = response;
                        taskFileSelectorPopulateFiles();
                        btn.innerHTML = "<span class='icon-success'></span> Refreshed";
                        btn.innerHTML = originalText;
                        btn.disabled = false;
                    })
                    .catch(function(err) {
                        alert("Error loading projects: " + err.message);
                    });        
                    
            }, 200);
        }

        function taskFileSelectorPopulateFiles() {
            const associatedIds = taskFileSelectorData.Projects.map(p => p.ProjectId || p.name);
            const associatedProjects = taskFileSelectorAllProjects.filter(p => 
                associatedIds.includes(p.ProjectId || p.name || p.id)
            );
            const availableProjects = taskFileSelectorAllProjects.filter(p => 
                !associatedIds.includes(p.ProjectId || p.name || p.id)
            );
            taskFileSelectorRenderFileList("taskFileSelectorAssociatedFiles", associatedProjects, "associated");
            taskFileSelectorRenderFileList("taskFileSelectorAvailableFiles", availableProjects, "available");
            taskFileSelectorUpdateCounters();
        }

        function taskFileSelectorRenderFileList(containerId, projects, type) {
            const container = document.getElementById(containerId);

            if (projects.length === 0) {
                container.innerHTML = `<div class="empty-state">
                    <div class="empty-icon">${type === "associated" ? "<span class='icon-folder'></span>" : "<span class='icon-bag'></span>"}</div>
                    <div>No ${type} projects</div>
                </div>`;
            }

            container.innerHTML = projects.map(project => {
                const projectId = project.ProjectId || project.name || project.id;
                const projectName = project.name || project.ProjectId || project.id;
                const projectDescription = project.description || project.Description || '';
                const lastModified = project.last_modified || project.lastModified || project.LastModified || new Date().toISOString();

                return `
                    <div class="task-file-selector-file-item" data-name="${projectId}" onclick="taskFileSelectorToggleSelection('${type}', '${projectId}')">
                        <div class="task-file-selector-file-info">
                            <div class="task-file-selector-file-name">
                                <span class="icon-document"></span> ${projectName} ${type === "associated" ? '<span class="status-badge status-associated">Associated</span>' : ''}
                            </div>
                            ${projectDescription ? `<div class="task-file-selector-file-description">${projectDescription}</div>` : ''}
                            <div class="task-file-selector-file-meta">Last modified: ${new Date(lastModified).toLocaleString()}</div>
                        </div>
                        <div class="task-file-selector-file-actions">
                            ${type === "associated"
                                ? `<button class="task-file-selector-btn-remove" onclick="event.stopPropagation(); taskFileSelectorQuickRemove('${projectId}')"><span class="icon-multiplication"></span> Remove</button>`
                                : `<button class="task-file-selector-btn-add" onclick="event.stopPropagation(); taskFileSelectorQuickAdd('${projectId}')"><span class="icon-success"></span> Add</button>`
                            }
                        </div>
                    </div>
                `;
            }).join("");
        }

        function taskFileSelectorToggleSelection(type, name) {
            const item = document.querySelector(`#taskFileSelector${type.charAt(0).toUpperCase() + type.slice(1)}Files .task-file-selector-file-item[data-name='${name}']`);
            let set = taskFileSelectorSelected[type]; 
            if (!item) {
                console.error(`Item not found: ${name} in ${type}`);
                return;
            }
            if (set.has(name)) {
                set = removeFromSet(set, name);  // Update local variable
                taskFileSelectorSelected[type] = set;  // Update the stored reference
                item.classList.remove("selected");
            } else {
                set.add(name);
                item.classList.add("selected");
            }

            taskFileSelectorUpdateTransferButtons();
            
        }

        function taskFileSelectorQuickAdd(projectId) {
            if (!taskFileSelectorData.Projects.find(p => (p.ProjectId || p.name) === projectId)) {
                taskFileSelectorData.Projects.push({ ProjectId: projectId });
                taskFileSelectorPopulateFiles();
                
            }
        }

        function taskFileSelectorQuickRemove(projectId) {
            taskFileSelectorData.Projects = taskFileSelectorData.Projects.filter(p => 
                (p.ProjectId || p.name) !== projectId
            );
            taskFileSelectorPopulateFiles();
            
        }

        function taskFileSelectorUpdateTransferButtons() {
            const addBtn = document.getElementById("taskFileSelectorAddBtn");
            const removeBtn = document.getElementById("taskFileSelectorRemoveBtn");

            if (addBtn) {
                addBtn.disabled = taskFileSelectorSelected.available.size === 0;
            }
            if (removeBtn) {
                removeBtn.disabled = taskFileSelectorSelected.associated.size === 0;
            }            
        }

        function taskFileSelectorUpdateCounters() {
            document.getElementById("taskFileSelectorAssociatedCounter").textContent = taskFileSelectorData.Projects.length;
            document.getElementById("taskFileSelectorAvailableCounter").textContent = taskFileSelectorAllProjects.length - taskFileSelectorData.Projects.length;
        }

        function taskFileSelectorFilterFiles(type, searchTerm) {
            const container = document.getElementById(`taskFileSelector${type.charAt(0).toUpperCase() + type.slice(1)}Files`);
            const items = container.querySelectorAll(".task-file-selector-file-item");
            const search = searchTerm.toLowerCase();

            items.forEach(item => {
                const name = item.querySelector(".task-file-selector-file-name").textContent.toLowerCase();
                const descEl = item.querySelector(".task-file-selector-file-description");
                const desc = descEl ? descEl.textContent.toLowerCase() : "";

                item.style.display = name.includes(search) || desc.includes(search) ? "flex" : "none";
            });
        }

        function taskFileSelectorSaveChanges() {
            const originalIds = taskFileSelectorOriginalProjects.map(p => p.ProjectId || p.name);
            const currentIds = taskFileSelectorData.Projects.map(p => p.ProjectId || p.name);

            const removedProjects = originalIds.filter(id => !currentIds.includes(id));
            const addedProjects = currentIds.filter(id => !originalIds.includes(id));

            const classes = {
                    taskID: taskFileSelectorData.ID,
                    removed: removedProjects,
                    added: addedProjects
            }; 

            PackageManagerAPI.updateTaskClasses(taskFileSelectorData.ID, classes)
                .then(function(response) {
                    alert(`Changes saved successfully!\nAdded: ${addedProjects.length} projects\nRemoved: ${removedProjects.length} projects`);
                    // Refresh the task list to show updated data
                    if (typeof loadExportTasks === 'function') {
                        loadExportTasks();
                    }
                    taskFileSelectorCloseModal();
                })
                .catch(function(err) {
                    alert("Error saving changes: " + err.message);
                });        
        }

        window.addEventListener("click", e => {
            const modal = document.getElementById("taskFileSelectorModal");
            if (e.target === modal) taskFileSelectorCloseModal();
        });

    </script>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.InstallSection.CSP.APIStatusCSP">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67443,59562.217532352</TimeChanged>
<TimeCreated>67443,59562.217532352</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ret = ""
    Set WebAppExists = 0
    Set execute = $GET(%request.Data("execute",1))
    If execute = 1 {
        Try {
            Set namespace = $Namespace
            Set apiEndpoint = $$$PackageManagerAPI 
            Set sc = ##class(PackageManager.Utility.WebApplication).WebApplicationExists(namespace, apiEndpoint, .WebAppExists)
            If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
        }
        Catch ex {
            Set sc=ex.AsStatus()
            Set ret = $SYSTEM.Status.GetErrorText(sc)
        }
    }
    If WebAppExists {
        Set ret = {
            "installed":true
        }
    } else {
        Set ret = {
            "installed":false
        }
    }
    w !,ret.%ToJSON(),!
    Return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.InstallSection.CSP.InstallCSP">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67443,59562.218551215</TimeChanged>
<TimeCreated>67443,59562.218551215</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ret = ""
    Set execute = $GET(%request.Data("execute",1))
    If execute = 1 {
        Try {
            Set sc = ##class(PackageManager.Installer.WebApplication).CreateWebApplication()    
            If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
            Set ret = "ok"
            w ret,!
        }
        Catch ex {
            Set sc=ex.AsStatus()
            Set ret = $SYSTEM.Status.GetErrorText(sc)
        }
    }
    Return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.InstallSection.CSP.UninstallCSP">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67443,59562.22015419</TimeChanged>
<TimeCreated>67443,59562.22015419</TimeCreated>

<Method name="OnPage">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set ret = ""
    Set execute = $GET(%request.Data("execute",1))
    If execute = 1 {
        Try {
            Set sc = ##class(PackageManager.Installer.WebApplication).DeleteWebApplication()    
            If $$$ISERR(sc) Throw ##class(%Exception.StatusException).CreateFromStatus(sc)
            Set ret = "ok"
            w ret,!
        }
        Catch ex {
            Set sc=ex.AsStatus()
            Set ret = $SYSTEM.Status.GetErrorText(sc)
        }
    }
    Return $$$OK
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.InstallSection.CSS">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67443,59562.199928887</TimeChanged>
<TimeCreated>67443,59562.199928887</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    CSS STYLES
*/
]]></Content>
</UDLText>

<Method name="RenderStyles">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK

    &html<<style>

        .api-mgr-reset * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        /* Project Container Styles - matching existing design */
        .api-mgr-project-container {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            overflow: hidden;
            margin-bottom: 20px;
            margin-top: 10px;
            max-width: 1000px;
            margin-left: 0;  /* Changed from auto to 0 */
            margin-right: auto;
        }

        .api-mgr-project-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            background: linear-gradient(135deg, #3c97ffff, #0d6bd7ff);
            color: white;
            flex-wrap: wrap;
            gap: 10px;
        }

        .api-mgr-project-header h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
            min-width: 0;
            flex-shrink: 1;
        }

        .api-mgr-project-title {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 18px;
            font-weight: 600;
        }

        .api-mgr-project-title .api-mgr-icon {
            font-size: 20px;
        }

        .api-mgr-project-content {
            padding: 10px;
        }

        /* Section Styling */
        .api-mgr-section {
            margin-bottom: 30px;
        }

        .api-mgr-status-box {
            overflow-x: auto;
            border: 1px solid #e0e4e8;
            border-radius: 8px;
            margin-bottom: 20px;
            margin-top: 20px;
            background: white;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
            /* Remove any horizontal margins */
            margin-left: 0;
            margin-right: 0;
        }

        .api-mgr-status-content {
            padding: 24px 28px;
        }

        .api-mgr-status-box--success {
            border-left: 4px solid #28a745;
            background: linear-gradient(135deg, #f8fff9 0%, #f0fff1 100%);
        }

        .api-mgr-status-box--error {
            border-left: 4px solid #dc3545;
            background: linear-gradient(135deg, #fff8f8 0%, #ffeaea 100%);
        }

        .api-mgr-status-box--warning {
            border-left: 4px solid #ffc107;
            background: linear-gradient(135deg, #fffbf0 0%, #fff8e1 100%);
        }

        .api-mgr-status-text {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 16px;
            color: #2c3e50;
            line-height: 1.4;
            display: flex;
            align-items: center;
        }

        .api-mgr-status-details {
            font-size: 14px;
            color: #5a6c7d;
            line-height: 1.6;
            margin-bottom: 8px;
            margin-top: 8px;
            padding-left: 18px; /* Align with status indicator */
        }

        /* Button Styles - matching existing project buttons */
        .api-mgr-btn {
            padding: 10px 18px;
            font-weight: 600;
            border: 1px solid #e0e4e8;
            border-radius: 15px;
            font-size: 12px;
            letter-spacing: 0.03em;
            min-width: 120px;
            margin-right: 10px;
            margin-bottom: 10px;
            background-color: #fefefe;
            transition: all 0.25s ease;
            cursor: pointer;
            color: #2c3e50;
        }

        .api-mgr-btn:hover {
            transform: translateY(-1px);
            background-color: #3498db;
            box-shadow: 0 2px 5px #3498db;
            color: white;
        }

        .api-mgr-btn--success {
            background-color: #28a745;
            color: white;
            border-color: #28a745;
        }

        .api-mgr-btn--success:hover {
            background-color: #218838;
            box-shadow: 0 2px 5px rgba(40, 167, 69, 0.3);
        }

        .api-mgr-btn--danger {
            background-color: #dc3545;
            color: white;
            border-color: #dc3545;
        }

        .api-mgr-btn--danger:hover {
            background-color: #c82333;
            box-shadow: 0 2px 5px rgba(220, 53, 69, 0.3);
        }

        .api-mgr-btn:disabled {
            background-color: #6c757d;
            color: white;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .api-mgr-btn:disabled:hover {
            background-color: #6c757d;
            transform: none;
            box-shadow: none;
        }

        .api-mgr-btn--refresh {
            background: linear-gradient(135deg, #3e5f81ff 0%, #34495e 100%);
            color: white;
            border-color: #2c3e50;
        }

        .api-mgr-btn--refresh:hover {
            box-shadow: 0 2px 5px rgba(44, 62, 80, 0.3);
        }

        /* Loading Spinner */
        .api-mgr-loading-spinner {
            display: inline-block;
            width: 16px;
            height: 16px;
            border: 2px solid #f3f3f3;
            border-top: 2px solid #3498db;
            border-radius: 50%;
            animation: api-mgr-spin 1s linear infinite;
            margin-right: 8px;
        }

        @keyframes api-mgr-spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .api-mgr-container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            overflow: hidden;
        }
    
        /* Message Styles - matching existing project messages */
        .api-mgr-message {
            padding: 12px;
            border-radius: 6px;
            margin-bottom: 15px;
            display: none;
        }

        .api-mgr-message--success {
            background-color: #d4edda;
            border: 1px solid #c3e6cb;
            color: #155724;
        }

        .api-mgr-message--error {
            background-color: #f8d7da;
            border: 1px solid #f5c6cb;
            color: #721c24;
        }

        .api-mgr-message--info {
            background-color: #cce7ff;
            border: 1px solid #99d3ff;
            color: #004085;
        }

        /* Details List Styles */
        .api-mgr-details-list {
            list-style: none;
            padding: 0;
            margin: 8px 0 0 0;
        }

        .api-mgr-details-list__item {
            padding: 6px 0;
            border-bottom: 1px solid #f0f0f0;
            font-size: 13px;
            display: flex;
            align-items: center;
        }

        .api-mgr-details-list__item:last-child {
            border-bottom: none;
        }

        /* Status Indicators - Enhanced */
        .api-mgr-status-indicator {
            display: inline-block;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            margin-right: 12px;
            margin-left: 6;
            flex-shrink: 0;
            box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.8);
        }

        .api-mgr-status-indicator--green {
            background: linear-gradient(135deg, #28a745, #20c997);
            box-shadow: 0 0 0 2px rgba(40, 167, 69, 0.2);
        }

        .api-mgr-status-indicator--red {
            background: linear-gradient(135deg, #dc3545, #e74c3c);
            box-shadow: 0 0 0 2px rgba(220, 53, 69, 0.2);
        }

        .api-mgr-status-indicator--yellow {
            background: linear-gradient(135deg, #ffc107, #f39c12);
            box-shadow: 0 0 0 2px rgba(255, 193, 7, 0.2);
        }

        /* Controls Area - Enhanced spacing */
        .api-mgr-controls {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
            margin-top: 24px;
            padding-top: 20px;
            border-top: 1px solid #e8ecef;
        }

        /* Page Header */
        .api-mgr-page-header {
            text-align: center;
            margin-bottom: 30px;
            color: #2c3e50;
        }

        .api-mgr-page-title {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 8px;
        }

        .api-mgr-page-subtitle {
            font-size: 14px;
            color: #7f8c8d;
        }

        /* Enhanced status details styling */
        .api-mgr-status-details strong {
            color: #2c3e50;
            font-weight: 600;
        }

        .api-mgr-status-details br + * {
            margin-top: 4px;
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .api-mgr-project-header {
                flex-direction: column;
                gap: 5px;
                text-align: center;
            }
            
            .api-mgr-controls {
                flex-direction: column;
                margin-top: 20px;
                padding-top: 16px;
            }
            
            .api-mgr-btn {
                width: 100%;
                min-width: auto;
            }
            
            .api-mgr-status-content {
                padding: 20px;
            }
            
            .api-mgr-status-text {
                font-size: 15px;
            }
            
            .api-mgr-status-details {
                font-size: 13px;
                padding-left: 16px;
            }
        }

    </style>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.InstallSection.HTML">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67444,41055.253078836</TimeChanged>
<TimeCreated>67443,59562.195796255</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    HTML Rendering
*/
]]></Content>
</UDLText>

<Method name="renderInstallSection">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    // CSS
    Do ##class(PackageManager.UI.Screens.InstallSection.CSS).RenderStyles()
    // JS 
    Do ##class(PackageManager.UI.Screens.InstallSection.JavaScript).RenderJavaScript()
    
    &html<<script language='javascript'>
        function renderInstallSection() {
            return `
                <h2><span class="icon-tools"></span> #($$$InstallationSectionTitle)#</h2>
                <p>This section allows you to install and configure the Package Manager in your environment.</p>

                    <div id="api-mgr-messages"></div>

                    <!-- API Status Section -->
                    <div class="api-mgr-project-container">
                        <div class="api-mgr-project-header">
                            <div class="api-mgr-project-title">
                                <span class="api-mgr-icon icon-wireless"></span>
                                <h3>Current API Status</h3>
                            </div>
                        </div>
                        <div class="api-mgr-project-content">
                            <div class="api-mgr-section">
                                <div class="api-mgr-status-box" id="api-mgr-api-status">
                                    <div class="api-mgr-status-content">
                                        <div class="api-mgr-status-text">Checking API status...</div>
                                    </div>
                                </div>
                                
                                <div class="api-mgr-controls">
                                    <button id="api-mgr-api-action-btn" class="api-mgr-btn" onclick="apiMgrToggleAPI()" disabled>
                                        <span id="api-mgr-api-spinner" class="api-mgr-loading-spinner" style="display: none;"></span>
                                        <span id="api-mgr-api-btn-text">Loading...</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
            `;
        }
    </script>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.InstallSection.JavaScript">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67443,59562.216913564</TimeChanged>
<TimeCreated>67443,59562.216913564</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    JAVASCRIPT
*/
]]></Content>
</UDLText>

<Method name="RenderJavaScript">
<Description>
Render JavaScript code for the page

This method generates the necessary JavaScript code for the page, including
modal JavaScript, message notification, and utility functions.

# Notes
This method is responsible for rendering the JavaScript code that is used
to interact with the Export Task Section page UI components.</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<script type="text/javascript">                       
        
        let apiMgrApiInstalled = false;

        /**
        * Shows a message notification on the page.
        * 
        * @param {string} text - The text of the message.
        * @param {string} type - The type of the message (e.g. "success", "error").
        */
        function apiMgrShowMessage(text, type = 'success') {
            const messagesDiv = document.getElementById('api-mgr-messages');
            messagesDiv.innerHTML = `<div class="api-mgr-message api-mgr-message--${type}" style="display: block;">${text}</div>`;
            
            setTimeout(() => {
                messagesDiv.innerHTML = '';
            }, 5000);
        }

        /**
        * Shows or hides a spinner on the page.
        * 
        * @param {string} spinnerId - The ID of the spinner element.
        * @param {boolean} show - Whether to show or hide the spinner.
        */
        function apiMgrShowSpinner(spinnerId, show = true) {
            const spinner = document.getElementById(spinnerId);
            if (spinner) {
                spinner.style.display = show ? 'inline-block' : 'none';
            }
        }

        /**
        * Checks the status of the API and updates the page accordingly.
        * 
        * This function checks if the API is installed and running, and updates the page
        * with the status information.
        */
        async function apiMgrCheckAPIStatus() {
            apiMgrShowSpinner('api-mgr-api-spinner', true);
            
            try {
                let apiMgrApiInstalled;
                // Check if the web app exists calling an ObjectScript method 
                // (it's not possible to fetch the API since if it does not exist and won't return a response) 
                result = await apiMgrCallMethod('CheckWebAppStatus');
                if (result.statusText === "OK") {
                    let res_json = await result.json();
                    apiMgrApiInstalled = res_json.installed;
                }
                const statusBox = document.getElementById('api-mgr-api-status');
                const actionBtn = document.getElementById('api-mgr-api-action-btn');
                const btnText = document.getElementById('api-mgr-api-btn-text');
                
                if (apiMgrApiInstalled === true) {
                    // Ping the api
                    PackageManagerAPI.ping()
                        .then(function(response) {
                            statusBox.className = 'api-mgr-status-box api-mgr-status-box--success';
                            statusBox.innerHTML = `
                                <div class="api-mgr-status-text">
                                    <span class="api-mgr-status-indicator api-mgr-status-indicator--green"></span>
                                    API is installed and running
                                </div>
                                <div class="api-mgr-status-details">
                                    Last ping: ${response.timestamp}<br>
                                    Status: ${response.message}
                                </div>
                            `;
                            actionBtn.className = 'api-mgr-btn api-mgr-btn--danger';
                            btnText.textContent = 'Uninstall API';
                        })
                } else {
                    statusBox.className = 'api-mgr-status-box api-mgr-status-box--error';
                    statusBox.innerHTML = `
                        <div class="api-mgr-status-text">
                            <span class="api-mgr-status-indicator api-mgr-status-indicator--red"></span>
                            API is not installed
                        </div>
                        <div class="api-mgr-status-details">
                            The API needs to be installed before it can be used.
                        </div>
                    `;
                    actionBtn.className = 'api-mgr-btn api-mgr-btn--success';
                    btnText.textContent = 'Install API';
                }
                
                actionBtn.disabled = false;
                
            } catch (error) {
                const statusBox = document.getElementById('api-mgr-api-status');
                statusBox.className = 'api-mgr-status-box api-mgr-status-box--error';
                statusBox.innerHTML = `
                    <div class="api-mgr-status-text">
                        <span class="api-mgr-status-indicator api-mgr-status-indicator--red"></span>
                        API connection failed
                    </div>
                    <div class="api-mgr-status-details">
                        Error: ${error.message}
                    </div>
                `;
                
                const actionBtn = document.getElementById('api-mgr-api-action-btn');
                const btnText = document.getElementById('api-mgr-api-btn-text');
                actionBtn.className = 'api-mgr-btn api-mgr-btn--success';
                btnText.textContent = 'Install API';
                actionBtn.disabled = false;
                apiMgrApiInstalled = false;
            } finally {
                apiMgrShowSpinner('api-mgr-api-spinner', false);
            }
        }

        /**
        * Toggles the installation of the API.
        * 
        * This function installs or uninstalls the API, depending on its current status.
        */
        async function apiMgrToggleAPI() {
            let apiMgrApiInstalled;
            // Check if the web app exists calling an ObjectScript method 
            // (it's not possible to fetch the API since if it does not exist and won't return a response) 
            result = await apiMgrCallMethod('CheckWebAppStatus');
            if (result.statusText === "OK") {
                let res_json = await result.json();
                apiMgrApiInstalled = res_json.installed;
            }

            const action = apiMgrApiInstalled ? 'uninstall-api' : 'install-api';
            const actionText = apiMgrApiInstalled ? 'uninstall' : 'install';
            
            // Show confirmation dialog
            if (!confirm(`Are you sure you want to ${actionText} the API?`)) {
                return;
            }
            
            apiMgrShowSpinner('api-mgr-api-spinner', true);
            document.getElementById('api-mgr-api-action-btn').disabled = true;
            
            try {                
                let result;
                
                if (action === 'uninstall-api') {
                    result = await apiMgrCallMethod('UninstallWebApp');
                } else if (action === 'install-api') {
                    result = await apiMgrCallMethod('InstallWebApp');
                }

                // Check if the operation was successful
                if (result.statusText !== 'OK') {
                    throw new Error(result || `Failed to ${actionText} API`);
                }

                // Show success message
                apiMgrShowMessage(`API ${actionText}ed successfully`, 'success');

                // Refresh status after action
                setTimeout(() => {
                    apiMgrCheckAPIStatus();
                }, 1000);
                
            } catch (error) {
                apiMgrShowMessage(`Failed to ${actionText} API: ${error.message}`, 'error');
                document.getElementById('api-mgr-api-action-btn').disabled = false;
                apiMgrShowSpinner('api-mgr-api-spinner', false);
            }
        }

        /**
        * Calls an ObjectScript CSP page to execute ObjectScript code asynchronously on the server.
        * 
        * This function calls an ObjectScript method on the server, and returns the result.
        * 
        * @param {string} action - The name of the method to call.
        * @returns {Promise} A promise that resolves with the result of the method call.
        */
        async function apiMgrCallMethod(action) {  
            let url;
            if (action === 'UninstallWebApp') {
                url = "#(##class(PackageManager.UI.Screens.InstallSection.CSP.UninstallCSP).GetPageURLForInternalCalls())#"; 
            } else if (action === 'InstallWebApp') {
                url = "#(##class(PackageManager.UI.Screens.InstallSection.CSP.InstallCSP).GetPageURLForInternalCalls())#"; 
            } else if (action === 'CheckWebAppStatus') {
                url = "#(##class(PackageManager.UI.Screens.InstallSection.CSP.APIStatusCSP).GetPageURLForInternalCalls())#"; 
            }
            const response = await fetch(url + '?execute=1');
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }            
            return response;
        }

    </script>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.ReleaseSection.CSS">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67443,59562.222294238</TimeChanged>
<TimeCreated>67443,59562.222294238</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    CSS STYLES
*/
]]></Content>
</UDLText>

<Method name="RenderStyles">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK

    &html<<style>
        .exported-releases-container {
            width: 100%;
            max-width: none;
            margin: 0;
            background-color: #ffffff;
            border-radius: 6px;
            overflow: hidden;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-top: 20px;
        }
        
        .exported-releases-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 12px 15px;
            background: linear-gradient(135deg, #3c97ffff, #0d6bd7ff);
            color: white;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .exported-releases-header h3 {
            margin: 0;
            font-size: 16px;
            font-weight: 600;
            min-width: 0;
            flex-shrink: 1;
        }
        
        .exported-releases-controls {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        
        .exported-releases-controls button {
            padding: 8px 16px;
            background-color: #fefefe;
            color: #2c3e50;
            border: 1px solid #e0e4e8;
            border-radius: 15px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
            letter-spacing: 0.03em;
            transition: all 0.25s ease;
            white-space: nowrap;
        }
        
        .exported-releases-controls button:hover {
            transform: translateY(-1px);
            background: linear-gradient(135deg, #3e5f81ff 0%, #34495e 100%);
            color: white;
            border-color: #2c3e50;
            box-shadow: 0 2px 5px rgba(44, 62, 80, 0.3);
        }
        
        .exported-releases-controls button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        
        .exported-releases-controls button:disabled:hover {
            transform: none;
            background-color: #fefefe;
            color: #2c3e50;
        }
        
        .exported-releases-selection-info {
            padding: 12px 15px;
            background-color: #e8f8fbff;
            border-bottom: 1px solid #e0e4e8;
            font-size: 14px;
            color: #2c3e50;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .exported-releases-selected-count {
            font-weight: bold;
            color: #3498db;
        }
        
        .exported-releases-search-container {
            padding: 10px 15px;
            border-bottom: 1px solid #e0e4e8;
            background-color: #f8f9fa;
        }
        
        .exported-releases-search-input {
            width: 100%;
            padding: 8px 10px;
            border: 1px solid #ddd;
            border-radius: 6px;
            font-size: 14px;
            background-color: #fbfffeff;
            box-sizing: border-box;
        }
        
        .exported-releases-search-input:focus {
            outline: none;
            border-color: #0e639c;
        }
        
        .exported-releases-tree-container {
            max-height: 600px;
            overflow-y: auto;
            padding: 0;
            background-color: #ffffff;
        }
        
        .exported-releases-tree-list {
            list-style: none;
            margin: 0;
            padding: 0;
        }
        
        .exported-releases-tree-item {
            list-style: none;
            margin: 0;
            padding: 0;
        }
        
        .exported-releases-tree-item-content {
            display: flex;
            align-items: center;
            padding: 8px 15px;
            cursor: pointer;
            min-height: 32px;
            border-bottom: 1px solid #f0f5fa;
            transition: background-color 0.2s ease;
        }
        
        .exported-releases-tree-item-content:hover {
            background-color: #f8f9fa;
        }
        
        .exported-releases-tree-toggle {
            width: 16px;
            height: 16px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 8px;
            font-size: 12px;
            transition: transform 0.15s ease;
            color: #2c3e50;
        }
        
        .exported-releases-tree-checkbox {
            margin-right: 10px;
            margin-left: 0px;
        }
        
        .exported-releases-tree-icon {
            margin-right: 8px;
            font-size: 16px;
            vertical-align: middle;
        }
        
        .exported-releases-tree-label {
            flex: 1;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            font-size: 14px;
            color: #2c3e50;
            margin-right: 10px;
        }
        
        .exported-releases-file-info {
            display: flex;
            gap: 15px;
            font-size: 12px;
            color: #666;
            margin-left: auto;
        }
        
        .exported-releases-file-date {
            white-space: nowrap;
        }
        
        .exported-releases-file-size {
            white-space: nowrap;
            font-weight: 500;
        }
        
        .exported-releases-tree-children {
            margin-left: 24px;
            display: none;
            list-style: none;
            padding: 0;
        }
        
        .exported-releases-tree-item.expanded .exported-releases-tree-children {
            display: block;
        }
        
        .exported-releases-tree-item.expanded .exported-releases-tree-toggle {
            transform: rotate(90deg);
        }
        
        .exported-releases-loading {
            text-align: center;
            padding: 40px;
            color: #666;
        }
        
        .exported-releases-message {
            padding: 15px;
            margin: 15px;
            border-radius: 6px;
            font-weight: 500;
        }
        
        .exported-releases-message.success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .exported-releases-message.error {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        /* Responsive design */
        @media (max-width: 768px) {
            .exported-releases-header {
                flex-direction: column;
                align-items: stretch;
                text-align: center;
            }
            
            .exported-releases-controls {
                justify-content: center;
            }
            
            .exported-releases-controls button {
                flex: 1;
                min-width: 120px;
            }
            
            .exported-releases-file-info {
                flex-direction: column;
                gap: 5px;
            }
        }
        
        @media (max-width: 480px) {
            .exported-releases-container {
                margin-top: 15px;
                border-radius: 4px;
            }
            
            .exported-releases-header {
                padding: 10px 12px;
            }
            
            .exported-releases-header h3 {
                font-size: 14px;
            }
            
            .exported-releases-controls {
                flex-direction: column;
                gap: 6px;
            }
            
            .exported-releases-controls button {
                width: 100%;
                margin: 0;
                padding: 10px 16px;
                font-size: 14px;
            }
            
            .exported-releases-tree-item-content {
                padding: 6px 12px;
                flex-wrap: wrap;
            }
            
            .exported-releases-file-info {
                width: 100%;
                justify-content: space-between;
                margin-left: 0;
                margin-top: 5px;
            }
        }
    </style>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.ReleaseSection.HTML">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67444,48187.514736441</TimeChanged>
<TimeCreated>67443,59562.222594357</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    HTML Rendering
*/
]]></Content>
</UDLText>

<Method name="renderExportedRelease">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    // CSS
    Do ##class(PackageManager.UI.Screens.ReleaseSection.CSS).RenderStyles()
    // JS 
    Do ##class(PackageManager.UI.Screens.ReleaseSection.JavaScript).RenderJavaScript()
    
    &html<<script language='javascript'>
        function renderExportedRelease() {
            return `
                <h2><span class='icon-folder-books'></span> #($$$ExportedReleaseSectionTitle)#</h2>
                <p>This lists all the exported versions created by export tasks..</p>
                <div class="exported-releases-container">
                    <div class="exported-releases-header">
                        <h3>Exported Releases</h3>
                        <div class="exported-releases-controls">
                            <button id="refreshBtn" onclick="loadExportedReleases()"><span class="icon-refresh"></span> Refresh</button>
                            <button id="expandBtn" onclick="expandAllReleases()"><span class='icon-folder-open'></span> Expand All</button>
                            <button id="collapseBtn" onclick="collapseAllReleases()"><span class="icon-folder"></span> Collapse All</button>
                            <button id="clearBtn" onclick="clearReleaseSelection()"><span class="icon-cancel"></span> Clear Selection</button>
                            <button id="downloadBtn" onclick="downloadSelectedReleases()" disabled><span class="icon-download"> Download Selected</button>
                        </div>
                    </div>
                    
                    <div class="exported-releases-selection-info">
                        <span>Select XML releases to download</span>
                        <span class="exported-releases-selected-count" id="selectedCount">0 Selected</span>
                    </div>
                    
                    <div class="exported-releases-search-container">
                        <input type="text" id="searchInput" class="exported-releases-search-input" 
                            placeholder="Search projects and releases..." oninput="filterExportedReleases()">
                    </div>
                    
                    <div class="exported-releases-tree-container">
                        <div id="releasesContainer">
                        </div>
                    </div>
                    
                    <div id="exported-releases-messageContainer"></div>
                </div>
            `;
        }
    </script>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.ReleaseSection.JavaScript">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67445,26471.25078125</TimeChanged>
<TimeCreated>67443,59562.226768332</TimeCreated>

<UDLText name="T">
<Content><![CDATA[
/*
    JAVASCRIPT
*/
]]></Content>
</UDLText>

<Method name="RenderJavaScript">
<Description>
Render JavaScript code for the page</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    
    &html<<script type="text/javascript">                       

        // Global variables - using array instead of Set for consistent behavior
        let allReleases = {};
        let filteredReleases = {};
        let selectedReleases = []; // Changed from Set to Array for consistency

        // Loads the list of exported releases from the API endpoint.
        // The list of exported releases is an array of objects, where each object represents a release.
        async function loadExportedReleases() {
            PackageManagerAPI.getReleases('noCache')
                .then(function(data) {
                    allReleases = data;
                    // Make a copy of the allReleases object
                    filteredReleases = {};
                    for (const key in allReleases) {
                        if (allReleases.hasOwnProperty(key)) {
                            filteredReleases[key] = allReleases[key];
                        }
                    }
                    selectedReleases = []; // Reset selections
                    renderExportedReleases(filteredReleases);
                })
                .catch(function(err) {
                    showMessageExportedRelease('Error loading exported releases: ' + err.message, 'error');
                    console.error('Error:', err.message);
                });        
        }

        // Render the tree structure
        function renderExportedReleases(data) {
            const container = document.getElementById('releasesContainer');
            container.innerHTML = '';

            if (Object.keys(data).length === 0) {
                container.innerHTML = '<div class="exported-releases-loading">No exported releases found</div>';
                return;
            }

            const ul = document.createElement('ul');
            ul.className = 'exported-releases-tree-list';

            for (const projectName in data) {
                const projectItem = createProjectItem(projectName, data[projectName]);
                ul.appendChild(projectItem);
            }

            container.appendChild(ul);
            
            // Restore selections after rendering
            setTimeout(() => {
                restoreSelectionsFromPersistent();
                updateSelectionUI();
            }, 100);
        }

        // Creates a project folder item in the release tree.
        // The project folder item is a container element that holds the releases for the project.
        // It has a checkbox that allows the user to select or deselect the project.
        function createProjectItem(projectName, releases) {
            const li = document.createElement('li');
            li.className = 'exported-releases-tree-item folder';

            const content = document.createElement('div');
            content.className = 'exported-releases-tree-item-content';

            // Toggle arrow
            const toggle = document.createElement('span');
            toggle.className = 'exported-releases-tree-toggle icon-right-arrow';
            //toggle.textContent = 'â¶';
            content.appendChild(toggle);

            // Project checkbox (selects all releases in project)
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'exported-releases-tree-checkbox';
            checkbox.value = projectName;
            checkbox.setAttribute('data-leaf', 'false'); // Mark as folder
            checkbox.addEventListener('change', (e) => {
                e.stopPropagation();
                handleProjectCheckboxChange(projectName, checkbox.checked, li);
            });
            content.appendChild(checkbox);

            // Project icon
            const icon = document.createElement('span');
            icon.className = 'exported-releases-tree-icon icon-bag';
            content.appendChild(icon);

            // Project label
            const label = document.createElement('span');
            label.className = 'exported-releases-tree-label';
            label.textContent = projectName;
            content.appendChild(label);

            // Release count
            const releaseCount = Object.keys(releases).length;
            const countInfo = document.createElement('div');
            countInfo.className = 'exported-releases-file-info';
            countInfo.innerHTML = `<span>${releaseCount} releases</span>`;
            content.appendChild(countInfo);

            // Click handler for folder expansion
            content.addEventListener('click', (e) => {
                if (e.target === checkbox) return;
                e.preventDefault();
                e.stopPropagation();
                li.classList.toggle('expanded');
            });

            // Create children container
            const childrenContainer = document.createElement('ul');
            childrenContainer.className = 'exported-releases-tree-children';

            // Add release items
            for (const releaseName in releases) {
                const releaseItem = createReleaseItem(releaseName, releases[releaseName]);
                childrenContainer.appendChild(releaseItem);
            }

            li.appendChild(content);
            li.appendChild(childrenContainer);

            return li;
        }

        // Creates a release file item in the release tree.
        // The release file item is a container element that holds the files for the release.
        // It has a checkbox that allows the user to select or deselect the release.
        function createReleaseItem(releaseName, releaseData) {
            const li = document.createElement('li');
            li.className = 'exported-releases-tree-item file';

            const content = document.createElement('div');
            content.className = 'exported-releases-tree-item-content';

            // Empty toggle space
            const toggle = document.createElement('span');
            toggle.className = 'exported-releases-tree-toggle';
            toggle.style.visibility = 'hidden';
            content.appendChild(toggle);

            // File checkbox
            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.className = 'exported-releases-tree-checkbox';
            checkbox.value = releaseData.full_file_path;
            checkbox.dataset.filename = releaseData.name + '.xml';
            checkbox.setAttribute('data-leaf', 'true'); // Mark as leaf
            checkbox.addEventListener('change', (e) => {
                e.stopPropagation();
                handleReleaseCheckboxChange(releaseData.full_file_path, checkbox.checked);
            });
            content.appendChild(checkbox);

            // File icon
            const icon = document.createElement('span');
            icon.className = 'exported-releases-tree-icon icon-document';
            content.appendChild(icon);

            // File label
            const label = document.createElement('span');
            label.className = 'exported-releases-tree-label';
            label.textContent = releaseData.name;
            content.appendChild(label);

            // File info (date and size)
            const fileInfo = document.createElement('div');
            fileInfo.className = 'exported-releases-file-info';
            
            const formattedSize = formatFileSize(releaseData.file_size);
            const formattedDate = formatDate(releaseData.data_created);
            
            fileInfo.innerHTML = `
                <span class="exported-releases-file-date">${formattedDate}</span>
                <span class="exported-releases-file-size">${formattedSize}</span>
            `;
            content.appendChild(fileInfo);

            li.appendChild(content);
            return li;
        }

        // Handle project checkbox changes (folder level)
        // When the project checkbox is checked or unchecked, this function updates the selection state of the project.
        // If the project is selected, it also selects all the releases and files within the project.
        function handleProjectCheckboxChange(projectName, isSelected, folderElement) {
            const projectReleases = filteredReleases[projectName];
            if (!projectReleases) return;

            // Get all release file paths for this project
            const projectFilePaths = Object.values(projectReleases).map(r => r.full_file_path);
            
            if (isSelected) {
                // Add all project releases to selection if not already there
                projectFilePaths.forEach(filepath => {
                    if (!selectedReleases.includes(filepath)) {
                        selectedReleases.push(filepath);
                    }
                });
                
                // If folder is expanded, check visible children
                if (folderElement.classList.contains('expanded')) {
                    selectAllVisibleChildren(folderElement, true);
                }
            } else {
                // Remove all project releases from selection
                projectFilePaths.forEach(filepath => {
                    const index = selectedReleases.indexOf(filepath);
                    if (index !== -1) {
                        selectedReleases.splice(index, 1);
                    }
                });
                
                // If folder is expanded, uncheck visible children
                if (folderElement.classList.contains('expanded')) {
                    selectAllVisibleChildren(folderElement, false);
                }
            }

            updateSelectionUI();
        }

        // Handle individual release checkbox changes (file level)
        // When the release checkbox is checked or unchecked, this function updates the selection state of the release.
        // If the release is selected, it also selects all the files within the release.
        function handleReleaseCheckboxChange(filepath, isSelected) {
            if (isSelected) {
                if (!selectedReleases.includes(filepath)) {
                    selectedReleases.push(filepath);
                }
            } else {
                const index = selectedReleases.indexOf(filepath);
                if (index !== -1) {
                    selectedReleases.splice(index, 1);
                }
            }

            updateSelectionUI();
        }

        // Helper function to select/unselect all visible children
        function selectAllVisibleChildren(folderElement, select) {
            const childrenContainer = folderElement.querySelector('.exported-releases-tree-children');
            if (!childrenContainer) return;
            
            const childCheckboxes = childrenContainer.querySelectorAll('input[type="checkbox"][data-leaf="true"]');
            
            childCheckboxes.forEach(childCheckbox => {
                const filepath = childCheckbox.value;
                
                if (select) {
                    childCheckbox.checked = true;
                    if (!selectedReleases.includes(filepath)) {
                        selectedReleases.push(filepath);
                    }
                } else {
                    childCheckbox.checked = false;
                    const index = selectedReleases.indexOf(filepath);
                    if (index !== -1) {
                        selectedReleases.splice(index, 1);
                    }
                }
            });
        }

        // Update UI elements based on current selection
        function updateSelectionUI() {
            const count = selectedReleases.length;
            document.getElementById('selectedCount').textContent = `${count} Selected`;
            document.getElementById('downloadBtn').disabled = count === 0;

            // Update project checkboxes based on their children
            updateProjectCheckboxes();
        }

        // Update project checkboxes based on selected children (with indeterminate state)
        function updateProjectCheckboxes() {
            for (const projectName in filteredReleases) {
                const projectCheckbox = document.querySelector(`input[type="checkbox"][value="${projectName}"][data-leaf="false"]`);
                if (!projectCheckbox) continue;

                const projectReleases = filteredReleases[projectName];
                const projectFilePaths = Object.values(projectReleases).map(r => r.full_file_path);
                const selectedFromProject = projectFilePaths.filter(path => selectedReleases.includes(path));
                
                if (selectedFromProject.length === 0) {
                    projectCheckbox.checked = false;
                    projectCheckbox.indeterminate = false;
                } else if (selectedFromProject.length === projectFilePaths.length) {
                    projectCheckbox.checked = true;
                    projectCheckbox.indeterminate = false;
                } else {
                    projectCheckbox.checked = false;
                    projectCheckbox.indeterminate = true;
                }
            }
        }

        // Restore selections from persistent array after re-rendering
        function restoreSelectionsFromPersistent() {
            selectedReleases.forEach(filepath => {
                const checkbox = document.querySelector(`input[value="${CSS.escape(filepath)}"][data-leaf="true"]`);
                if (checkbox) {
                    checkbox.checked = true;
                }
            });
        }

        // Download selected releases
        async function downloadSelectedReleases() {
            if (selectedReleases.length === 0) {
                showMessageExportedRelease('Please select at least one release to download', 'error');
                return;
            }

            const downloadBtn = document.getElementById('downloadBtn');
            const originalText = downloadBtn.textContent;
            let downloadCount = 0;
            let errorCount = 0;

            try {
                downloadBtn.textContent = 'Downloading...';
                downloadBtn.disabled = true;

                showMessageExportedRelease(`Starting download of ${selectedReleases.length} file(s)...`, 'info');

                for (const filepath of selectedReleases) {
                    try {
                        // This will work both on Windows or Unix servers
                        let filename = filepath.split(/[\/\\]/).pop();
                        
                        await downloadSingleFile(filepath, filename);
                        downloadCount++;
                        
                        // Update progress
                        downloadBtn.textContent = `${downloadCount}/${selectedReleases.length}`;
                        
                        // Small delay between downloads to prevent overwhelming the server
                        await new Promise(resolve => setTimeout(resolve, 100));
                        
                    } catch (error) {
                        console.error(`Failed to download ${filepath}:`, error);
                        errorCount++;
                    }
                }

                // Show completion message
                if (errorCount === 0) {
                    showMessageExportedRelease(`Successfully downloaded ${downloadCount} file(s)`, 'success');
                } else {
                    showMessageExportedRelease(`Downloaded ${downloadCount} file(s), ${errorCount} failed`, 'error');
                }

            } catch (error) {
                showMessageExportedRelease('Download failed: ' + error.message, 'error');
                console.error('Download error:', error);
            } finally {
                downloadBtn.textContent = originalText;
                downloadBtn.disabled = selectedReleases.length === 0;
            }
        }

        // Download a single file
        async function downloadSingleFile(filepath, filename) {
            const download_req = { filepath: filepath }
            PackageManagerAPI.downloadRelease(download_req,'noCache')
                .then(function(content) {
                    const blob = new Blob([content], { type: 'application/xml' });
                    const url = URL.createObjectURL(blob);
                    
                    const a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    a.download = filename;
                    
                    document.body.appendChild(a);
                    a.click();
                    document.body.removeChild(a);
                    
                    URL.revokeObjectURL(url);
                })
                .catch(function(err) {
                    showMessageExportedRelease('Error while downloading exported releases: ' + err.message, 'error');
                    console.error('Error:', err.message);
                });        
        }

        // Search/filter functionality with selection preservation
        function filterExportedReleases() {
            const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();
            
            if (!searchTerm) {
                // Make a copy of the allReleases object
                filteredReleases = {};
                for (const key in allReleases) {
                    if (allReleases.hasOwnProperty(key)) {
                        filteredReleases[key] = allReleases[key];
                    }
                }
            } else {
                filteredReleases = {};
                
                for (const projectName in allReleases) {
                    const matchingReleases = {};
                    
                    // Check if project name matches
                    const projectMatches = projectName.toLowerCase().includes(searchTerm);
                    
                    for (const releaseName in allReleases[projectName]) {
                        const release = allReleases[projectName][releaseName];
                        const releaseMatches = releaseName.toLowerCase().includes(searchTerm) ||
                                             release.name.toLowerCase().includes(searchTerm);
                        
                        if (projectMatches || releaseMatches) {
                            matchingReleases[releaseName] = release;
                        }
                    }
                    
                    if (Object.keys(matchingReleases).length > 0) {
                        filteredReleases[projectName] = matchingReleases;
                    }
                }
            }
            
            renderExportedReleases(filteredReleases);
        }

        // Expand all project folders
        function expandAllReleases() {
            document.querySelectorAll('.exported-releases-tree-item.folder').forEach(item => {
                item.classList.add('expanded');
            });
        }

        // Collapse all project folders
        function collapseAllReleases() {
            document.querySelectorAll('.exported-releases-tree-item.folder').forEach(item => {
                item.classList.remove('expanded');
            });
        }

        // Clear all selections
        function clearReleaseSelection() {
            selectedReleases = []; // Clear persistent array
            document.querySelectorAll('input[type="checkbox"]').forEach(cb => {
                cb.checked = false;
                cb.indeterminate = false;
            });
            updateSelectionUI();
        }

        // Utility functions
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];
        }

        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString();
        }

        function showMessageExportedRelease(text, type) {
            const container = document.getElementById('exported-releases-messageContainer');
            
            // Clear existing messages
            container.innerHTML = '';
            
            if (text) {
                const messageDiv = document.createElement('div');
                messageDiv.className = `exported-releases-message ${type}`;
                messageDiv.textContent = text;
                container.appendChild(messageDiv);
                
                // Auto-hide success messages
                if (type === 'success') {
                    setTimeout(() => {
                        if (container.contains(messageDiv)) {
                            container.removeChild(messageDiv);
                        }
                    }, 5000);
                }
            }
        }
    </script>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.UI.Screens.SideBar.CSS">
<Super>PackageManager.UI.Screens.Abstract</Super>
<TimeChanged>67444,40697.827028969</TimeChanged>
<TimeCreated>67443,59562.23417227</TimeCreated>

<Method name="SideBarCSS">
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    &html<<style>
        .sidebar {
            width: 260px;
            background: #1e2a38;
            color: #ecf0f1;
            display: flex;
            flex-direction: column;
            border-right: 1px solid #ccc;
            transition: width 0.3s ease;
            overflow-x: hidden;
            position: relative; /* Added for version positioning */
        }

        .sidebar.collapsed {
            width: 60px;
        }

        .sidebar.collapsed h3 span.label {
            display: none;
        }

        .sidebar.collapsed .sidebar-header .label {
            display: none;
        }

        /* Hide version text when collapsed, show only icon */
        .sidebar.collapsed .version-text {
            display: none;
        }

        .sidebar.collapsed .sidebar-version {
            padding: 8px 5px;
        }

        .sidebar.collapsed .version-icon {
            display: inline-block;
        }

        /* Hide user info when collapsed */
        .sidebar.collapsed .user-info {
            display: none;
        }

        .sidebar-header {
            padding: 20px;
            font-size: 1.3em;
            font-weight: 600;
            background-color: #162029;
            border-bottom: 1px solid #2d3c4d;
            letter-spacing: 0.5px;
            text-align: center;
            cursor: pointer;
            user-select: none;
        }

        .sidebar h3 {
            font-size: 0.95em;
            margin: 0;
            padding: 14px 20px;
            cursor: pointer;
            border-left: 4px solid transparent;
            display: flex;
            align-items: center;
            gap: 10px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            transition: all 0.2s ease-in-out;
        }

        .sidebar h3:hover {
            background-color: #2f3e4e;
            border-left: 4px solid #3498db;
        }

        .sidebar.collapsed h3 span.label {
            display: none;
        }

        /* Bottom info section - groups user info and version together */
        .bottom-info {
            margin-top: auto;
            border-top: 1px solid #2d3c4d;
            background-color: rgba(22, 32, 41, 0.6);
        }

        /* User information styling */
        .user-info {
            padding: 8px 12px;
            display: flex;
            gap: 8px;
            align-items: center;
            border-bottom: 1px solid rgba(45, 60, 77, 0.5);
        }

        .currentNamespace,
        .currentUser {
            flex: 1;
            font-size: 10px;
            color: rgba(236, 240, 241, 0.7);
            padding: 4px 6px;
            background-color: rgba(52, 152, 219, 0.1);
            border-radius: 3px;
            font-weight: 300;
            letter-spacing: 0.2px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            transition: all 0.3s ease;
            text-align: center;
            min-width: 0; /* Allows flex items to shrink */
        }

        .currentNamespace:hover,
        .currentUser:hover {
            background-color: rgba(52, 152, 219, 0.2);
            color: rgba(236, 240, 241, 0.9);
        }

        /* Version indicator styling - now part of bottom info */
        .sidebar-version {
            text-align: center;
            padding: 8px 12px;
            transition: all 0.3s ease;
        }

        .version-text {
            font-size: 11px;
            color: rgba(236, 240, 241, 0.5); /* Matches your sidebar text color with opacity */
            font-weight: 300;
            letter-spacing: 0.5px;
            transition: opacity 0.3s ease;
        }

        /* Version icon for collapsed state */
        .version-icon {
            display: none;
            font-size: 12px;
            color: rgba(236, 240, 241, 0.4);
        }

        /* Hover effect for version area */
        .sidebar-version:hover .version-text {
            color: rgba(236, 240, 241, 0.8);
        }

        .sidebar-version:hover .version-icon {
            color: rgba(236, 240, 241, 0.7);
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .sidebar-version {
                font-size: 10px;
                padding: 6px 8px;
            }
            
            .currentNamespace,
            .currentUser {
                font-size: 10px;
            }
        }
    </style>>
    Return sc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.Utility.Utils">
<Description>
This class provides utility methods for working with file systems, CSP directories, and JSON data structures.
It includes methods for creating nested JSON structures from file systems, defining objects from CSP file names,
and registering web applications.

The class is designed to be used in the context of the InterSystems IRIS platform and provides functionality
for working with CSP directories, file systems, and JSON data.</Description>
<Final>1</Final>
<IncludeCode>PackageManager.PackageManager</IncludeCode>
<TimeChanged>67451,33007.055412278</TimeChanged>
<TimeCreated>67443,59562.236351065</TimeCreated>

<Method name="DirExists">
<Description><![CDATA[
Verify if a directory exists at the provided path, create it if not and requested by the user <br>
parameters:<br>
path -> the path to the directory<br>
create -> if true, the directory will be created if it does not exist<br>
exists -> the output parameter that will be set to true if the directory exists<br>
returns: status code<br>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String,create:%Boolean=0,*exists:%Boolean</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    // Switch to %SYS namespace to get more privileges
    New $NAMESPACE
    Set $NAMESPACE = "%SYS"
    Set exists = ##class(%File).DirectoryExists(path) 
    If 'exists {
        If create {
            #; Set ret = ##class(%File).CreateDirectory(path, .returnCode)
            Set ret = ##class(%File).CreateDirectoryChain(path, .returnCode)
            If ret = 0 {
                Set sc = ($$$ERROR($$$GeneralError, "Unable to create directory "_path_". Return code: "_returnCode))
            }
            Set exists = 1
        }
    }
    Return sc
]]></Implementation>
</Method>

<Method name="AdaptPathToOS">
<Description>
This method adapts a file path to the operating system by replacing backslashes with forward slashes or vice versa.
It ensures that the file paths are compatible with the underlying OS.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>path:%String="",*separator:%String</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set os = $SYSTEM.Version.GetOS()
    If $$$isWINDOWS {
        Set path = $REPLACE(path,"/","\")
        Set separator = "\"
    } ElseIf $$$isUNIX {
        Set path = $REPLACE(path,"\","/")
        Set separator = "/"
    }
    Return path
]]></Implementation>
</Method>

<Method name="GetInstanceDetails">
<Description>
This print the current IRIS instance URL, Server and Port</Description>
<ClassMethod>1</ClassMethod>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    // Get current IRIS instance URL and port
    Set sc=##class(%RoutineMgr).GetWebServerPort(.Port,.Server,.URLPrefix,.URL)
    w !,"URL: "_URL
    w !,"Port: "_Port
    w !,"Server: "_Server
    w !,"URLPrefix: "_URLPrefix
    Return sc
]]></Implementation>
</Method>

<Method name="CreateNestedObject">
<Description>

Creates a nested object structure within the provided result object.

@param {string} item - The base name of the object to create.
@param {string} type - The type of object to create (e.g. "csp" or other).
@param {string} currProject - The current project name.
@param {object} result - The object to create the nested structure within.
@param {string} [Separator="."] - The separator to use when splitting the item name.
@param {string} [CSPExtension=""] - An optional extension to use for CSP files.

@returns {status} - The status of the operation.

@description
This method creates a nested object structure within the provided result object.
It extracts the base name from the item parameter, and then creates a nested object
structure based on the type and project name. If the type is "csp", it uses a
specific root node, otherwise it uses a different root node. It then creates or
gets the nested container and sets the metadata for the leaf node.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[item:%String,type:%String,currProject:%String,&result:%DynamicObject,Separator:%String=".",CSPExtension:%String=""]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        If '$ISOBJECT($GET(result)) Set result = {}
        // Extract base name without suffix if provided
        Set baseName = item
        Set parts = $LISTFROMSTRING(baseName, Separator)

        // Ensure the project node exists
        If '$ISOBJECT(result.%Get(currProject)) {
            Do result.%Set(currProject, ##class(%DynamicObject).%New())
        }
        Set element = result.%Get(currProject)
        If ($ZCONVERT(type,"L") = "csp") {
            Set rootNode = $$$APIDIR
            // In case of CSP files, we may have a more proper extension than .csp passed as additional argument
            If CSPExtension '= "" {
                Set type = CSPExtension
            }
        } Else {
            Set rootNode = $$$APIPKG
        }
        If '$ISOBJECT(element.%Get(rootNode)) {
            Do element.%Set(rootNode, ##class(%DynamicObject).%New())
        }
        Set element = element.%Get(rootNode)

        Set ptr = 0
        Set depth = $LISTLENGTH(parts)
        Set count = 0
        Set currElement = element
        While $LISTNEXT(parts, ptr, part) {
            Set count = count + 1
            Set isLast = (count = depth)
            If isLast {
                // Leaf node with metadata
                Do currElement.%Set(part, {
                    "name": (part),
                    "type": (type)
                })
            } Else {
                // Create or get nested container
                If '$ISOBJECT(currElement.%Get(part)) {
                    Do currElement.%Set(part, ##class(%DynamicObject).%New())
                }
            }
            Set currElement = currElement.%Get(part)
        }
        //Do result.%Get(currProject).%Push(element)
        //w !,result.%ToJSON(),!
    } Catch ex {
        Set sc = ex.AsStatus()
    }
    Quit sc
]]></Implementation>
</Method>

<Method name="JSONFolderTree">
<Description>
Creates a nested JSON structure of all files and subdirectories under a given installation-relative directory.
The tree is returned as a %DynamicObject passed by reference (`result`), with the top-level key being `currProject`.
This is particularly useful for inspecting CSP directories like `csp\user\`, including subfolders and file types.

- Files are inserted as objects with `name` and `type` (based on file extension).
- Subdirectories are represented as nested `%DynamicObject` nodes.
- The method does NOT use recursion but instead uses an explicit directory stack for traversal.

Parameters:
- `directory`: A relative path inside the IRIS installation dir (default: `"csp\user\"`)
- `currProject`: The project name to serve as root key of the resulting object (default: `"test"`)
- `result`: A dynamic object passed by reference to hold the structured output

Example output:
```json
{
  "test": {
    "subdir": {
      "file1": { "name": "file1", "type": "css" }
    },
    "file2": { "name": "file2", "type": "js" }
  }
}
```</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[directory:%String,currProject:%String,&result:%DynamicObject="",verbose:%Boolean=0,separator:%String="\"]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {
        // Initialize result object if not already provided
        If '$ISOBJECT(result) Set result = {}

        // if the directory contains both slashes and backslashes, replace them with the separator
        Set directory = ..AdaptPathToOS(directory, .separator)

        // Ensure project root exists in result
        If '$ISOBJECT(result.%Get(currProject)) {
            Do result.%Set(currProject, ##class(%DynamicObject).%New())
        }
        Set rootElement = result.%Get(currProject)
        If '$ISOBJECT(rootElement.%Get($$$APIDIR)) {
            Do rootElement.%Set($$$APIDIR, ##class(%DynamicObject).%New())
        }
        // Set the directory root as a specific node of the stack
        Set rootElement = rootElement.%Get($$$APIDIR)
        
        // Create a node for the current root directory
        Set ptr = 0
        While $LISTNEXT($LISTFROMSTRING(directory, separator),ptr,element){
            If '$ISOBJECT(rootElement.%Get(element)) {
                Do rootElement.%Set(element, ##class(%DynamicObject).%New())
            }
            Set rootElement = rootElement.%Get(element)
        }

        // Define base path and initialize stack for directories
        Kill FILES
        Set basePath = $SYSTEM.Util.InstallDirectory()_directory
        Set FILES($INCREMENT(FILES)) = basePath

        // Main loop to scan each directory in stack
        Set key = ""
        For {
            Set key = $ORDER(FILES(key), 1, searchdir)
            Quit:key=""

            Set filepath = $ZSEARCH(searchdir_"*")
            While filepath'="" {
                Set filename = ##class(%File).GetFilename(filepath)

                // Skip special entries
                If (filename'=".") && (filename'="..") {
                    If verbose { Write "file: "_filepath_" " }
                    // If it is a directory, add it to the stack for further inspection
                    If ##class(%File).DirectoryExists(filepath) {
                        If verbose { Write "is a directory",! }
                        Set FILES($INCREMENT(FILES)) = filepath_separator  // Add subdir to stack

                        // If it's a subdirectory, create corresponding node in the object tree
                        If $ZCONVERT(filepath, "L")'=$ZCONVERT(basePath, "L") {
                            Set relativePath = $PIECE($ZCONVERT(filepath, "L"), $ZCONVERT(basePath, "L"), 2)
                            Set ptr = 0
                            Set element = rootElement
                            While $LISTNEXT($LISTFROMSTRING(relativePath, separator), ptr, elementName) {
                                Continue:elementName=""
                                If '$ISOBJECT(element.%Get(elementName)) {
                                    Do element.%Set(elementName, ##class(%DynamicObject).%New())
                                }
                                Set element = element.%Get(elementName)
                            }
                        }
                    // If it is a file, insert it into the directory node
                    } Else {
                        If verbose { Write "is a file",! }
                        // Check if we're under a subdirectory and move pointer to the correct nested node
                        Set isSubDir = ($ZCONVERT(searchdir, "L")'=$ZCONVERT(basePath, "L"))
                        If isSubDir {
                            Set relativeDirPath = $PIECE($ZCONVERT(searchdir, "L"), $ZCONVERT(basePath, "L"), 2)
                            Set ptr = 0
                            Set element = rootElement
                            While $LISTNEXT($LISTFROMSTRING(relativeDirPath, separator), ptr, dirPath) {
                                Continue:dirPath=""
                                Set element = element.%Get(dirPath)
                            }
                        } Else {
                            Set element = rootElement
                        }

                        // Insert file node
                        Set name = $PIECE(filename, ".", 1)
                        Set fileformat = $PIECE(filename, ".", 2)
                        Do element.%Set(name, {
                            "name": (name),
                            "type": (fileformat)
                        })
                    }
                }

                Set filepath = $ZSEARCH("")  // Next entry
            }
        }
        If verbose { Write result.%ToJSON() }
    } Catch ex {
        Set sc = ex.AsStatus()
    }
    Return sc
]]></Implementation>
</Method>

<Method name="DefineObjFromCSP">
<Description>
Creates a nested object structure from a CSP file name.
This method takes a CSP file name and creates a nested object structure 
representing the package hierarchy. The resulting object is stored in 
the rootElement parameter. 

Parameters: 
    - rootElement: The root element of the object structure to be created. 
    - Name: The CSP file name to be processed. 
    - separator: The separator character used in the file name. 

Returns: 
    - A status code indicating success or failure. </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&rootElement:%DynamicObject,Name:%String,separator:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {        
        // For csp files, we need to create a nested object for each package
        Set parts = $LISTFROMSTRING(Name, separator)
        Set ptr = 0
        Set depth = $LISTLENGTH(parts)
        Set count = 0
        Set filename = "", extension = ""
        While $LISTNEXT(parts,ptr,part) {
            Set count = count + 1
            If part="" { Continue } // Skip empty parts
            If count = depth {
                Set filename = part
                Set part = $PIECE(filename, ".", 1) // Remove file extension for the last part
                Set extension = $PIECE(filename, ".", 2)
                // Leaf node with metadata
                Do rootElement.%Set(part, {
                    "name": (part),
                    "type": (extension)
                })
            } Else {
                If '$ISOBJECT(rootElement.%Get(part)) {
                    Do rootElement.%Set(part, ##class(%DynamicObject).%New())
                }
                Set rootElement = rootElement.%Get(part)
            }
        }
    }
    Catch ex {
        Set sc=ex.AsStatus()
    }
    Return sc
]]></Implementation>
</Method>

<Method name="DefineObjFromCLSOrRoutine">
<Description>
Creates a nested object structure from a class or routine file name.
This method takes a class or routine file name and creates a nested object structure 
representing the package hierarchy. The resulting object is stored in 
the rootElement parameter.

Note that this method is similar to DefineObjFromCSP, but it handles 
class and routine files differently by removing the last two elements
from the file name and joining them into a single last element

Parameters: 
    - rootElement: The root element of the object structure to be created. 
    - Name: The class or routine file name to be processed. 
    - separator: The separator character used in the file name. 

Returns: 
    - A status code indicating success or failure. </Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[&rootElement:%DynamicObject,Name:%String,separator:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    Set sc = $$$OK
    Try {        
        // For csp files, we need to create a nested object for each package
        Set parts = $LISTFROMSTRING(Name, separator)
        Set $LIST(parts,*-1,*)=$LISTBUILD("",$LIST(parts,*-1)_"."_$LIST(parts,*)) // Remove the last two elements from the list and join them into a single last element
        Set ptr = 0
        Set depth = $LISTLENGTH(parts)
        Set count = 0
        Set filename = "", extension = ""
        While $LISTNEXT(parts,ptr,part) {
            Set count = count + 1
            If part="" { Continue } // Skip empty parts
            If count = depth {
                Set filename = part
                Set part = $PIECE(filename, ".", 1) // Remove file extension for the last part
                Set extension = $PIECE(filename, ".", 2)
                // Leaf node with metadata
                Do rootElement.%Set(part, {
                    "name": (part),
                    "type": (extension)
                })
            } Else {
                If '$ISOBJECT(rootElement.%Get(part)) {
                    Do rootElement.%Set(part, ##class(%DynamicObject).%New())
                }
                Set rootElement = rootElement.%Get(part)
            }
        }
    }
    Catch ex {
        Set sc=ex.AsStatus()
    }
    Return sc
]]></Implementation>
</Method>

<Method name="TranscodeType">
<Description><![CDATA[
This transcodes the type integer to a string description
Following the conventions detailed in:
https://docs.intersystems.com/irislatest/csp/documatic/%25CSP.Documatic.cls?LIBRARY=%25SYS&CLASSNAME=%25Library.RoutineMgr#anchor_queries]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>Type:%Integer</FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
    Set TypeDesc = ""
    Try {
        Set TypeDesc = $CASE(Type,
            0: "MAC",  // Macro
            1: "INT",  // Standard Routine
            2: "INC",  // Include file
            3: "BAS",  // Cache Basic Routine
            4: "CLS",  // Class
            5: "CSP",  // Cache Server Page or a file in this directory
            7: "GBL",  // Global
            8: "PRJ",  // Project
            9: "PKG",  // Package
            10: "APP", // CSP Application
            11: "MVB", // MultiValue Basic macro routine
            12: "MVI", // MultiValue Basic routine
            13: "OBJ", // Object code
            100: "ABS" // A document defined by a subclass of %Studio.AbstractDocument
        )
    }
    Catch ex {
        Set TypeDesc = ""
        Set sc=ex.AsStatus()
    }
    Return TypeDesc
]]></Implementation>
</Method>
</Class>


<Class name="PackageManager.Utility.WebApplication">
<Description>
This class provides utility methods to register, remove and verify existance of a web application on InterSystems IRIS.</Description>
<Final>1</Final>
<TimeChanged>67443,59562.233603638</TimeChanged>
<TimeCreated>67443,59562.233603638</TimeCreated>

<Method name="RegisterWebApplication">
<Description><![CDATA[
Register a web application. It configure an unauthenticated web application.
<ul>
<li><var>pNameSpace</var> Name of the namespace when the web application.</li>
<li><var>pName</var> Service name to create/update.</li>
<li><var>pClassName</var> Name of class to run.</li>
<li><var>pDescription</var> Comment to include.</li>
<li><var>verbose</var> If true (1) enable printing logs.</li>
</ul>
<example>
// Add web api
Do myClass.RegisterWebApplication("SAMPLES","/myApp/api","Host.RS.Rest","This is my api rest")</example> 

Credits to Kurro Lopez: https://community.intersystems.com/post/add-web-application-code]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace:%String,pName:%String,pClassName:%String,pDescription:%String="",verbose:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    New $Namespace
    Set $Namespace = "%SYS"
    Set ret = $$$OK
    Set spec("AutheEnabled") = $$$AutheUnauthenticated
    Set spec("NameSpace") = pNameSpace
    Set spec("Description") = pDescription
    Set spec("IsNameSpaceDefault") = $$$NO
    Set spec("DispatchClass") = pClassName
    Set spec("MatchRoles")=":%All"

    If ('##class(Security.Applications).Exists(pName)) {
        If verbose Write !,"Creating Web application """_pName_"""..."
        Set ret = ##class(Security.Applications).Create(pName, .spec)
        If verbose Write !, "Web application """_pName_""" is created.",!
    }
    Else { // ensure configuration matches in case of updating from old terminal versions
        If verbose Write !, "Updating web application """_pName_"""..."
        Set ret = ##class(Security.Applications).Modify(pName, .spec)
        If verbose Write !, "Web application """_pName_""" is updated.",!
    }
    Return ret
]]></Implementation>
</Method>

<Method name="RemoveWebApplication">
<Description><![CDATA[
Remove a web application
<ul>
<li><var>pName</var> Name of web application to remove.</li>
<li><var>pClassName</var> Name of the class linked to the web application.</li>
<li><var>verbose</var> If true (1) enable printing logs.</li>
</ul>
<example>
// Remove web api
Do myClass.RemoveWebApplication("/myApp/api","Host.RS.Rest")</example>

Credits to Kurro Lopez: https://community.intersystems.com/post/add-web-application-code]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pName:%String,pClassName:%String,verbose:%Boolean=0</FormalSpec>
<Implementation><![CDATA[
    New $Namespace
    Set $Namespace = "%SYS"
    Set ret = $$$OK
    If (##class(Security.Applications).Exists(pName)) {
        Do ##class(Security.Applications).Get(pName, .props)
        If (props("DispatchClass") '= pClassName) {
            If verbose Write !, "Web application doesn't refer to DispatchClass "_pClassName,!
        }
        Else {
            If verbose Write !, "Deleting Web application """_pName_"""..."
            Set ret = ##class(Security.Applications).Delete(pName)
            If verbose Write !, "Web application """_pName_""" was successfully deleted.",!
        }
    }
    Return ret
]]></Implementation>
</Method>

<Method name="WebApplicationExists">
<Description><![CDATA[
This class method verifies if a web application with a specified name exists. .
<ul>
<li><var>pNameSpace</var> Name of the namespace where the web application exists.</li>
<li><var>pName</var> Name to verify.</li>
</ul>]]></Description>
<ClassMethod>1</ClassMethod>
<FormalSpec>pNameSpace:%String,pName:%String,*WebAppExist:%Boolean,verbose:%Boolean=0</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
    New $Namespace
    Set $Namespace = "%SYS"

    Set WebAppExist = 0
    Set ret = $$$OK

    If ('##class(Security.Applications).Exists(pName)) {
        if verbose Write !,"Web application """_pName_""" does not exist..."
    } Else { 
        Set Properties = ""
        Set ret = ##class(Security.Applications).Get(pName, .Properties)
        if verbose Write !, "Web application """_pName_""" properties: ", Properties("NameSpace"), !
        If Properties("NameSpace") = pNameSpace {
            Set WebAppExist = 1
        }
    }
    Return ret
]]></Implementation>
</Method>
</Class>
</Export>
